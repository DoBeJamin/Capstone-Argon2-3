
c:/Users/benja/OneDrive/Desktop/visualStudioCode/summerIOT/Capstone/Argon2-3/target/5.3.0/argon/Argon2-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005974  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b9990  000b9990  00009990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000074  2003e578  000b99b4  0000e578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000204  2003e5ec  2003e5ec  0001e5ec  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b9a28  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b9a2c  000b9a2c  00019a2c  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b9a32  000b9a32  00019a32  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b9a56  000b9a56  00019a56  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0011ef84  00000000  00000000  00019a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00011a0a  00000000  00000000  001389de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003d62d  00000000  00000000  0014a3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002e98  00000000  00000000  00187a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000aef0  00000000  00000000  0018a8ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00034ee7  00000000  00000000  0019579d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003ac14  00000000  00000000  001ca684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013c07a  00000000  00000000  00205298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000087a0  00000000  00000000  00341314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strcmp>:
   b401c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4020:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4024:	2a01      	cmp	r2, #1
   b4026:	bf28      	it	cs
   b4028:	429a      	cmpcs	r2, r3
   b402a:	d0f7      	beq.n	b401c <strcmp>
   b402c:	1ad0      	subs	r0, r2, r3
   b402e:	4770      	bx	lr

000b4030 <strlen>:
   b4030:	4603      	mov	r3, r0
   b4032:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4036:	2a00      	cmp	r2, #0
   b4038:	d1fb      	bne.n	b4032 <strlen+0x2>
   b403a:	1a18      	subs	r0, r3, r0
   b403c:	3801      	subs	r0, #1
   b403e:	4770      	bx	lr

000b4040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4040:	4809      	ldr	r0, [pc, #36]	; (b4068 <module_user_pre_init+0x28>)
   b4042:	490a      	ldr	r1, [pc, #40]	; (b406c <module_user_pre_init+0x2c>)
   b4044:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4046:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4048:	d005      	beq.n	b4056 <module_user_pre_init+0x16>
   b404a:	4a09      	ldr	r2, [pc, #36]	; (b4070 <module_user_pre_init+0x30>)
   b404c:	4282      	cmp	r2, r0
   b404e:	d002      	beq.n	b4056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4050:	1a12      	subs	r2, r2, r0
   b4052:	f004 ff4d 	bl	b8ef0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4056:	4807      	ldr	r0, [pc, #28]	; (b4074 <module_user_pre_init+0x34>)
   b4058:	4a07      	ldr	r2, [pc, #28]	; (b4078 <module_user_pre_init+0x38>)
   b405a:	2100      	movs	r1, #0
   b405c:	1a12      	subs	r2, r2, r0
   b405e:	f004 ff6f 	bl	b8f40 <memset>
    return &link_global_data_start;
}
   b4062:	4801      	ldr	r0, [pc, #4]	; (b4068 <module_user_pre_init+0x28>)
   b4064:	bd08      	pop	{r3, pc}
   b4066:	bf00      	nop
   b4068:	2003e578 	.word	0x2003e578
   b406c:	000b99b4 	.word	0x000b99b4
   b4070:	2003e5ec 	.word	0x2003e5ec
   b4074:	2003e5ec 	.word	0x2003e5ec
   b4078:	2003e7f0 	.word	0x2003e7f0

000b407c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b407c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b407e:	4e07      	ldr	r6, [pc, #28]	; (b409c <module_user_init+0x20>)
   b4080:	4c07      	ldr	r4, [pc, #28]	; (b40a0 <module_user_init+0x24>)
    module_user_init_hook();
   b4082:	f003 fe85 	bl	b7d90 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4086:	1ba4      	subs	r4, r4, r6
   b4088:	08a4      	lsrs	r4, r4, #2
   b408a:	2500      	movs	r5, #0
   b408c:	42ac      	cmp	r4, r5
   b408e:	d100      	bne.n	b4092 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4090:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4092:	f856 3b04 	ldr.w	r3, [r6], #4
   b4096:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4098:	3501      	adds	r5, #1
   b409a:	e7f7      	b.n	b408c <module_user_init+0x10>
   b409c:	000b996c 	.word	0x000b996c
   b40a0:	000b9990 	.word	0x000b9990

000b40a4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b40a4:	f000 b8ba 	b.w	b421c <setup>

000b40a8 <module_user_loop>:
}

void module_user_loop() {
   b40a8:	b508      	push	{r3, lr}
    loop();
   b40aa:	f000 f8c3 	bl	b4234 <loop>
    _post_loop();
}
   b40ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b40b2:	f003 be25 	b.w	b7d00 <_post_loop>

000b40b6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40b6:	f001 b821 	b.w	b50fc <malloc>

000b40ba <_Znaj>:
   b40ba:	f001 b81f 	b.w	b50fc <malloc>

000b40be <_ZdaPv>:
   b40be:	f001 b825 	b.w	b510c <free>

000b40c2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40c2:	f001 b823 	b.w	b510c <free>
	...

000b40c8 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40c8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40ca:	4a03      	ldr	r2, [pc, #12]	; (b40d8 <__cxa_pure_virtual+0x10>)
   b40cc:	4903      	ldr	r1, [pc, #12]	; (b40dc <__cxa_pure_virtual+0x14>)
   b40ce:	200c      	movs	r0, #12
   b40d0:	f000 ff58 	bl	b4f84 <panic_>
  while (1);
   b40d4:	e7fe      	b.n	b40d4 <__cxa_pure_virtual+0xc>
   b40d6:	bf00      	nop
   b40d8:	000b4cd9 	.word	0x000b4cd9
   b40dc:	000b9274 	.word	0x000b9274

000b40e0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40e0:	7800      	ldrb	r0, [r0, #0]
   b40e2:	fab0 f080 	clz	r0, r0
   b40e6:	0940      	lsrs	r0, r0, #5
   b40e8:	4770      	bx	lr

000b40ea <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ea:	2301      	movs	r3, #1
   b40ec:	7003      	strb	r3, [r0, #0]
   b40ee:	4770      	bx	lr

000b40f0 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40f0:	4770      	bx	lr

000b40f2 <_Z8callbackPcPhj>:
#include "Particle.h"
#include "MQTT.h"

SYSTEM_THREAD(ENABLED);

void callback(char *topic, byte *payload, unsigned int length) {};
   b40f2:	4770      	bx	lr

000b40f4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b40f4:	4b0a      	ldr	r3, [pc, #40]	; (b4120 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b40f6:	b510      	push	{r4, lr}
   b40f8:	4604      	mov	r4, r0
   b40fa:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b40fc:	f002 ff84 	bl	b7008 <_ZN5spark10LogManager8instanceEv>
   b4100:	4621      	mov	r1, r4
   b4102:	f003 f9bc 	bl	b747e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4106:	f003 ff65 	bl	b7fd4 <_Z16_fetch_usbserialv>
   b410a:	f003 ff57 	bl	b7fbc <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b410e:	4620      	mov	r0, r4
   b4110:	4b04      	ldr	r3, [pc, #16]	; (b4124 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4112:	f840 3b04 	str.w	r3, [r0], #4
   b4116:	f003 f84d 	bl	b71b4 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b411a:	4620      	mov	r0, r4
   b411c:	bd10      	pop	{r4, pc}
   b411e:	bf00      	nop
   b4120:	000b931c 	.word	0x000b931c
   b4124:	000b9304 	.word	0x000b9304

000b4128 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4128:	b510      	push	{r4, lr}
   b412a:	4604      	mov	r4, r0
    }
   b412c:	f7ff ffe2 	bl	b40f4 <_ZN5spark16SerialLogHandlerD1Ev>
   b4130:	4620      	mov	r0, r4
   b4132:	2124      	movs	r1, #36	; 0x24
   b4134:	f7ff ffc5 	bl	b40c2 <_ZdlPvj>
   b4138:	4620      	mov	r0, r4
   b413a:	bd10      	pop	{r4, pc}

000b413c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b413c:	b40e      	push	{r1, r2, r3}
   b413e:	b500      	push	{lr}
   b4140:	b08c      	sub	sp, #48	; 0x30
   b4142:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4144:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4148:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b414c:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b414e:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4152:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4154:	6801      	ldr	r1, [r0, #0]
   b4156:	aa04      	add	r2, sp, #16
   b4158:	201e      	movs	r0, #30
    attr.flags = 0;
   b415a:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b415e:	f000 ff21 	bl	b4fa4 <log_message_v>
}
   b4162:	b00c      	add	sp, #48	; 0x30
   b4164:	f85d eb04 	ldr.w	lr, [sp], #4
   b4168:	b003      	add	sp, #12
   b416a:	4770      	bx	lr

000b416c <_Z18scanResultCallbackPKN8particle13BleScanResultEPv>:
	}
	
}


void scanResultCallback(const BleScanResult *scanResult, void *context) {
   b416c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4170:	b08e      	sub	sp, #56	; 0x38
   b4172:	4604      	mov	r4, r0

	BleUuid foundServiceUuid;
   b4174:	a809      	add	r0, sp, #36	; 0x24
   b4176:	f001 fa99 	bl	b56ac <_ZN8particle7BleUuidC1Ev>
	size_t svcCount = scanResult->advertisingData().serviceUUID(&foundServiceUuid, 1);
   b417a:	2201      	movs	r2, #1
   b417c:	a909      	add	r1, sp, #36	; 0x24
   b417e:	f104 0008 	add.w	r0, r4, #8
   b4182:	f002 fb29 	bl	b67d8 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
	if (svcCount == 0 || !(foundServiceUuid == serviceUuid)) {
   b4186:	2800      	cmp	r0, #0
   b4188:	d03b      	beq.n	b4202 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0x96>
   b418a:	491f      	ldr	r1, [pc, #124]	; (b4208 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0x9c>)
   b418c:	a809      	add	r0, sp, #36	; 0x24
   b418e:	f001 fac6 	bl	b571e <_ZNK8particle7BleUuideqERKS0_>
   b4192:	b3b0      	cbz	r0, b4202 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0x96>
				scanResult->address()[3], scanResult->address()[4], scanResult->address()[5]);
		*/
		return;
	}

	Log.info("rssi=%d server=%02X:%02X:%02X:%02X:%02X:%02X",
   b4194:	f994 2020 	ldrsb.w	r2, [r4, #32]
   b4198:	9207      	str	r2, [sp, #28]
			scanResult->rssi(),
			scanResult->address()[0], scanResult->address()[1], scanResult->address()[2],
   b419a:	2100      	movs	r1, #0
   b419c:	4620      	mov	r0, r4
   b419e:	f001 fa4f 	bl	b5640 <_ZNK8particle10BleAddressixEh>
   b41a2:	2101      	movs	r1, #1
   b41a4:	9006      	str	r0, [sp, #24]
   b41a6:	4620      	mov	r0, r4
   b41a8:	f001 fa4a 	bl	b5640 <_ZNK8particle10BleAddressixEh>
   b41ac:	2102      	movs	r1, #2
   b41ae:	4605      	mov	r5, r0
   b41b0:	4620      	mov	r0, r4
   b41b2:	f001 fa45 	bl	b5640 <_ZNK8particle10BleAddressixEh>
			scanResult->address()[3], scanResult->address()[4], scanResult->address()[5]);
   b41b6:	2103      	movs	r1, #3
			scanResult->address()[0], scanResult->address()[1], scanResult->address()[2],
   b41b8:	4606      	mov	r6, r0
			scanResult->address()[3], scanResult->address()[4], scanResult->address()[5]);
   b41ba:	4620      	mov	r0, r4
   b41bc:	f001 fa40 	bl	b5640 <_ZNK8particle10BleAddressixEh>
   b41c0:	2104      	movs	r1, #4
   b41c2:	4607      	mov	r7, r0
   b41c4:	4620      	mov	r0, r4
   b41c6:	f001 fa3b 	bl	b5640 <_ZNK8particle10BleAddressixEh>
   b41ca:	2105      	movs	r1, #5
   b41cc:	4680      	mov	r8, r0
   b41ce:	4620      	mov	r0, r4
   b41d0:	f001 fa36 	bl	b5640 <_ZNK8particle10BleAddressixEh>
	Log.info("rssi=%d server=%02X:%02X:%02X:%02X:%02X:%02X",
   b41d4:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   b41d8:	e9cd 8003 	strd	r8, r0, [sp, #12]
   b41dc:	490b      	ldr	r1, [pc, #44]	; (b420c <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0xa0>)
   b41de:	480c      	ldr	r0, [pc, #48]	; (b4210 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0xa4>)
   b41e0:	9500      	str	r5, [sp, #0]
   b41e2:	e9cd 6701 	strd	r6, r7, [sp, #4]
   b41e6:	f7ff ffa9 	bl	b413c <_ZNK5spark6Logger4infoEPKcz>

	peripheralAddr = scanResult->address();
   b41ea:	4621      	mov	r1, r4
   b41ec:	4809      	ldr	r0, [pc, #36]	; (b4214 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0xa8>)
   b41ee:	f001 fa2c 	bl	b564a <_ZN8particle10BleAddressaSERKS0_>
	rssi = scanResult->rssi();
   b41f2:	4b09      	ldr	r3, [pc, #36]	; (b4218 <_Z18scanResultCallbackPKN8particle13BleScanResultEPv+0xac>)
   b41f4:	f994 2020 	ldrsb.w	r2, [r4, #32]
   b41f8:	601a      	str	r2, [r3, #0]
	
	BLE.stopScanning();
   b41fa:	f001 fc15 	bl	b5a28 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b41fe:	f001 fc76 	bl	b5aee <_ZNK8particle14BleLocalDevice12stopScanningEv>
}
   b4202:	b00e      	add	sp, #56	; 0x38
   b4204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4208:	2003e67c 	.word	0x2003e67c
   b420c:	000b9289 	.word	0x000b9289
   b4210:	2003e6d0 	.word	0x2003e6d0
   b4214:	2003e670 	.word	0x2003e670
   b4218:	2003e678 	.word	0x2003e678

000b421c <setup>:
void setup() {
   b421c:	b508      	push	{r3, lr}
	BLE.on();
   b421e:	f001 fc03 	bl	b5a28 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4222:	f001 fc1d 	bl	b5a60 <_ZNK8particle14BleLocalDevice2onEv>
	BLE.setAdvertisingInterval(20);
   b4226:	f001 fbff 	bl	b5a28 <_ZN8particle14BleLocalDevice11getInstanceEv>
}
   b422a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BLE.setAdvertisingInterval(20);
   b422e:	2114      	movs	r1, #20
   b4230:	f001 bc1d 	b.w	b5a6e <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt>

000b4234 <loop>:
void loop() {
   b4234:	b530      	push	{r4, r5, lr}
	rssi = 0;
   b4236:	4c1a      	ldr	r4, [pc, #104]	; (b42a0 <loop+0x6c>)
void loop() {
   b4238:	b085      	sub	sp, #20
	rssi = 0;
   b423a:	2500      	movs	r5, #0
   b423c:	6025      	str	r5, [r4, #0]
	BLE.scan(scanResultCallback, NULL);
   b423e:	f001 fbf3 	bl	b5a28 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4242:	4918      	ldr	r1, [pc, #96]	; (b42a4 <loop+0x70>)
   b4244:	462a      	mov	r2, r5
   b4246:	f002 fba5 	bl	b6994 <_ZNK8particle14BleLocalDevice4scanEPFvPKNS_13BleScanResultEPvES4_>
	if (rssi) {
   b424a:	6823      	ldr	r3, [r4, #0]
   b424c:	b32b      	cbz	r3, b429a <loop+0x66>
		if (client.isConnected()) {
   b424e:	4816      	ldr	r0, [pc, #88]	; (b42a8 <loop+0x74>)
   b4250:	f000 fa32 	bl	b46b8 <_ZN4MQTT11isConnectedEv>
   b4254:	b1b8      	cbz	r0, b4286 <loop+0x52>
			client.loop();
   b4256:	4814      	ldr	r0, [pc, #80]	; (b42a8 <loop+0x74>)
   b4258:	f000 fc05 	bl	b4a66 <_ZN4MQTT4loopEv>
			string_rssi = String(rssi);
   b425c:	6821      	ldr	r1, [r4, #0]
   b425e:	4c13      	ldr	r4, [pc, #76]	; (b42ac <loop+0x78>)
   b4260:	220a      	movs	r2, #10
   b4262:	4668      	mov	r0, sp
   b4264:	f001 f8e1 	bl	b542a <_ZN6StringC1Eih>
   b4268:	4669      	mov	r1, sp
   b426a:	4620      	mov	r0, r4
   b426c:	f001 f8c3 	bl	b53f6 <_ZN6StringaSEOS_>
   b4270:	4668      	mov	r0, sp
   b4272:	f001 f81f 	bl	b52b4 <_ZN6StringD1Ev>
			client.publish("BAR/argon3/RSSI", string_rssi);
   b4276:	6822      	ldr	r2, [r4, #0]
   b4278:	490d      	ldr	r1, [pc, #52]	; (b42b0 <loop+0x7c>)
   b427a:	480b      	ldr	r0, [pc, #44]	; (b42a8 <loop+0x74>)
}
   b427c:	b005      	add	sp, #20
   b427e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			client.publish("BAR/argon3/RSSI", string_rssi);
   b4282:	f000 bb94 	b.w	b49ae <_ZN4MQTT7publishEPKcS1_>
    inline static SleepResult sleep(const hal_pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4286:	4668      	mov	r0, sp
   b4288:	f000 ff28 	bl	b50dc <spark_deviceID>
			client.connect(System.deviceID());
   b428c:	9900      	ldr	r1, [sp, #0]
   b428e:	4806      	ldr	r0, [pc, #24]	; (b42a8 <loop+0x74>)
   b4290:	f000 fb02 	bl	b4898 <_ZN4MQTT7connectEPKc>
   b4294:	4668      	mov	r0, sp
   b4296:	f001 f80d 	bl	b52b4 <_ZN6StringD1Ev>
}
   b429a:	b005      	add	sp, #20
   b429c:	bd30      	pop	{r4, r5, pc}
   b429e:	bf00      	nop
   b42a0:	2003e678 	.word	0x2003e678
   b42a4:	000b416d 	.word	0x000b416d
   b42a8:	2003e5ec 	.word	0x2003e5ec
   b42ac:	2003e690 	.word	0x2003e690
   b42b0:	000b92b6 	.word	0x000b92b6

000b42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b42b4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b42b6:	e9d0 5300 	ldrd	r5, r3, [r0]
   b42ba:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b42bc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b42be:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b42c2:	42ae      	cmp	r6, r5
   b42c4:	d004      	beq.n	b42d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b42c6:	4628      	mov	r0, r5
   b42c8:	f000 fff4 	bl	b52b4 <_ZN6StringD1Ev>
   b42cc:	3514      	adds	r5, #20
   b42ce:	e7f8      	b.n	b42c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b42d0:	6820      	ldr	r0, [r4, #0]
   b42d2:	f000 ff1b 	bl	b510c <free>
    AllocatorT::free(data_);
}
   b42d6:	4620      	mov	r0, r4
   b42d8:	bd70      	pop	{r4, r5, r6, pc}

000b42da <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b42da:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b42dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b42de:	4604      	mov	r4, r0
   b42e0:	460d      	mov	r5, r1
   b42e2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b42e4:	d916      	bls.n	b4314 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b42e6:	4290      	cmp	r0, r2
   b42e8:	d215      	bcs.n	b4316 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b42ea:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b42ee:	1a75      	subs	r5, r6, r1
   b42f0:	f1a1 0714 	sub.w	r7, r1, #20
   b42f4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b42f6:	42b7      	cmp	r7, r6
   b42f8:	d01c      	beq.n	b4334 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b42fa:	b12c      	cbz	r4, b4308 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b42fc:	4631      	mov	r1, r6
   b42fe:	4620      	mov	r0, r4
   b4300:	f001 f854 	bl	b53ac <_ZN6StringC1EOS_>
   b4304:	7c33      	ldrb	r3, [r6, #16]
   b4306:	7423      	strb	r3, [r4, #16]
   b4308:	4630      	mov	r0, r6
   b430a:	f000 ffd3 	bl	b52b4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b430e:	3e14      	subs	r6, #20
   b4310:	3c14      	subs	r4, #20
   b4312:	e7f0      	b.n	b42f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4314:	d00e      	beq.n	b4334 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4316:	42b5      	cmp	r5, r6
   b4318:	d00c      	beq.n	b4334 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b431a:	b12c      	cbz	r4, b4328 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b431c:	4629      	mov	r1, r5
   b431e:	4620      	mov	r0, r4
   b4320:	f001 f844 	bl	b53ac <_ZN6StringC1EOS_>
   b4324:	7c2b      	ldrb	r3, [r5, #16]
   b4326:	7423      	strb	r3, [r4, #16]
   b4328:	4628      	mov	r0, r5
   b432a:	f000 ffc3 	bl	b52b4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b432e:	3514      	adds	r5, #20
   b4330:	3414      	adds	r4, #20
   b4332:	e7f0      	b.n	b4316 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4336 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b433a:	2300      	movs	r3, #0
   b433c:	e9c0 3300 	strd	r3, r3, [r0]
   b4340:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4342:	684f      	ldr	r7, [r1, #4]
   b4344:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4346:	4604      	mov	r4, r0
   b4348:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b434a:	dd23      	ble.n	b4394 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b434c:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b4350:	fb08 f007 	mul.w	r0, r8, r7
   b4354:	f000 fed2 	bl	b50fc <malloc>
            if (!d) {
   b4358:	4605      	mov	r5, r0
   b435a:	b1d8      	cbz	r0, b4394 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b435c:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4360:	fb08 1202 	mla	r2, r8, r2, r1
   b4364:	f7ff ffb9 	bl	b42da <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4368:	6820      	ldr	r0, [r4, #0]
   b436a:	f000 fecf 	bl	b510c <free>
        data_ = d;
   b436e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4370:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4372:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4376:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b437a:	45b8      	cmp	r8, r7
   b437c:	d008      	beq.n	b4390 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b437e:	4639      	mov	r1, r7
   b4380:	4628      	mov	r0, r5
   b4382:	f001 f82d 	bl	b53e0 <_ZN6StringC1ERKS_>
   b4386:	7c3b      	ldrb	r3, [r7, #16]
   b4388:	742b      	strb	r3, [r5, #16]
   b438a:	3714      	adds	r7, #20
   b438c:	3514      	adds	r5, #20
   b438e:	e7f4      	b.n	b437a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4390:	6873      	ldr	r3, [r6, #4]
   b4392:	6063      	str	r3, [r4, #4]
}
   b4394:	4620      	mov	r0, r4
   b4396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b439c <_GLOBAL__sub_I__Z8callbackPcPhj>:
}
   b439c:	b570      	push	{r4, r5, r6, lr}
   b439e:	b08e      	sub	sp, #56	; 0x38
MQTT client("lab.thewcl.com", 1883, callback);
   b43a0:	2400      	movs	r4, #0
SYSTEM_THREAD(ENABLED);
   b43a2:	2100      	movs	r1, #0
   b43a4:	2001      	movs	r0, #1
   b43a6:	f000 fe1d 	bl	b4fe4 <system_thread_set_state>
MQTT client("lab.thewcl.com", 1883, callback);
   b43aa:	f240 725b 	movw	r2, #1883	; 0x75b
   b43ae:	4b26      	ldr	r3, [pc, #152]	; (b4448 <_GLOBAL__sub_I__Z8callbackPcPhj+0xac>)
   b43b0:	4926      	ldr	r1, [pc, #152]	; (b444c <_GLOBAL__sub_I__Z8callbackPcPhj+0xb0>)
   b43b2:	9400      	str	r4, [sp, #0]
   b43b4:	4826      	ldr	r0, [pc, #152]	; (b4450 <_GLOBAL__sub_I__Z8callbackPcPhj+0xb4>)
   b43b6:	f000 f8a3 	bl	b4500 <_ZN4MQTTC1EPKctPFvPcPhjEb>
        capacity_(0) {
   b43ba:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b43be:	9404      	str	r4, [sp, #16]
            StreamLogHandler(Serial, level, filters) {
   b43c0:	f003 fe08 	bl	b7fd4 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b43c4:	4c23      	ldr	r4, [pc, #140]	; (b4454 <_GLOBAL__sub_I__Z8callbackPcPhj+0xb8>)
   b43c6:	4605      	mov	r5, r0
   b43c8:	a902      	add	r1, sp, #8
   b43ca:	a805      	add	r0, sp, #20
   b43cc:	f7ff ffb3 	bl	b4336 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b43d0:	4626      	mov	r6, r4
        stream_(&stream) {
   b43d2:	a905      	add	r1, sp, #20
   b43d4:	a808      	add	r0, sp, #32
   b43d6:	f7ff ffae 	bl	b4336 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b43da:	4b1f      	ldr	r3, [pc, #124]	; (b4458 <_GLOBAL__sub_I__Z8callbackPcPhj+0xbc>)
   b43dc:	f846 3b04 	str.w	r3, [r6], #4
   b43e0:	a908      	add	r1, sp, #32
   b43e2:	a80b      	add	r0, sp, #44	; 0x2c
   b43e4:	f7ff ffa7 	bl	b4336 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b43e8:	aa0b      	add	r2, sp, #44	; 0x2c
   b43ea:	211e      	movs	r1, #30
   b43ec:	4630      	mov	r0, r6
   b43ee:	f003 f929 	bl	b7644 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b43f2:	a80b      	add	r0, sp, #44	; 0x2c
   b43f4:	f7ff ff5e 	bl	b42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b43f8:	a808      	add	r0, sp, #32
   b43fa:	f7ff ff5b 	bl	b42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b43fe:	4b17      	ldr	r3, [pc, #92]	; (b445c <_GLOBAL__sub_I__Z8callbackPcPhj+0xc0>)
   b4400:	6023      	str	r3, [r4, #0]
   b4402:	6225      	str	r5, [r4, #32]
   b4404:	a805      	add	r0, sp, #20
   b4406:	f7ff ff55 	bl	b42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b440a:	4b15      	ldr	r3, [pc, #84]	; (b4460 <_GLOBAL__sub_I__Z8callbackPcPhj+0xc4>)
   b440c:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b440e:	f003 fde1 	bl	b7fd4 <_Z16_fetch_usbserialv>
   b4412:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4416:	f003 fdcd 	bl	b7fb4 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b441a:	f002 fdf5 	bl	b7008 <_ZN5spark10LogManager8instanceEv>
   b441e:	4621      	mov	r1, r4
   b4420:	f002 ffe6 	bl	b73f0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   b4424:	a802      	add	r0, sp, #8
   b4426:	f7ff ff45 	bl	b42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
BleUuid serviceUuid("afe7acc5-33a9-478f-bbe1-8944aa08e884");
   b442a:	490e      	ldr	r1, [pc, #56]	; (b4464 <_GLOBAL__sub_I__Z8callbackPcPhj+0xc8>)
   b442c:	480e      	ldr	r0, [pc, #56]	; (b4468 <_GLOBAL__sub_I__Z8callbackPcPhj+0xcc>)
   b442e:	f001 f9f5 	bl	b581c <_ZN8particle7BleUuidC1EPKc>
BleAddress peripheralAddr;
   b4432:	480e      	ldr	r0, [pc, #56]	; (b446c <_GLOBAL__sub_I__Z8callbackPcPhj+0xd0>)
   b4434:	f001 f92f 	bl	b5696 <_ZN8particle10BleAddressC1Ev>
String string_rssi;
   b4438:	490d      	ldr	r1, [pc, #52]	; (b4470 <_GLOBAL__sub_I__Z8callbackPcPhj+0xd4>)
   b443a:	480e      	ldr	r0, [pc, #56]	; (b4474 <_GLOBAL__sub_I__Z8callbackPcPhj+0xd8>)
}
   b443c:	b00e      	add	sp, #56	; 0x38
   b443e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
String string_rssi;
   b4442:	f000 bf82 	b.w	b534a <_ZN6StringC1EPK19__FlashStringHelper>
   b4446:	bf00      	nop
   b4448:	000b40f3 	.word	0x000b40f3
   b444c:	000b92c6 	.word	0x000b92c6
   b4450:	2003e5ec 	.word	0x2003e5ec
   b4454:	2003e64c 	.word	0x2003e64c
   b4458:	000b9304 	.word	0x000b9304
   b445c:	000b94f8 	.word	0x000b94f8
   b4460:	000b931c 	.word	0x000b931c
   b4464:	000b92d5 	.word	0x000b92d5
   b4468:	2003e67c 	.word	0x2003e67c
   b446c:	2003e670 	.word	0x2003e670
   b4470:	000b94be 	.word	0x000b94be
   b4474:	2003e690 	.word	0x2003e690

000b4478 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b4478:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b447c:	b510      	push	{r4, lr}
   b447e:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b4480:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b4482:	b113      	cbz	r3, b448a <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b4484:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b4486:	f000 fc7d 	bl	b4d84 <os_mutex_lock>
#endif
#endif
#endif
        }
   b448a:	4620      	mov	r0, r4
   b448c:	bd10      	pop	{r4, pc}

000b448e <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b448e:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b4490:	6803      	ldr	r3, [r0, #0]
   b4492:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b4496:	4604      	mov	r4, r0
            if (mqtt->thread)
   b4498:	b112      	cbz	r2, b44a0 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b449a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b449c:	f000 fc7a 	bl	b4d94 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b44a0:	4620      	mov	r0, r4
   b44a2:	bd10      	pop	{r4, pc}

000b44a4 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b44a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b44a6:	461f      	mov	r7, r3
   b44a8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b44ac:	4604      	mov	r4, r0
   b44ae:	460d      	mov	r5, r1
   b44b0:	4616      	mov	r6, r2
    if (thread) {
   b44b2:	b12b      	cbz	r3, b44c0 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b44b4:	2301      	movs	r3, #1
   b44b6:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b44ba:	3058      	adds	r0, #88	; 0x58
   b44bc:	f000 fc5a 	bl	b4d74 <os_mutex_create>
    }
    this->callback = callback;
   b44c0:	9b08      	ldr	r3, [sp, #32]
   b44c2:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b44c4:	2300      	movs	r3, #0
   b44c6:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b44c8:	b106      	cbz	r6, b44cc <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b44ca:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b44cc:	b125      	cbz	r5, b44d8 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b44ce:	4629      	mov	r1, r5
   b44d0:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b44d4:	f000 ff97 	bl	b5406 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b44d8:	9b06      	ldr	r3, [sp, #24]
   b44da:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b44dc:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b44de:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b44e0:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b44e4:	2bff      	cmp	r3, #255	; 0xff
   b44e6:	bfb8      	it	lt
   b44e8:	23ff      	movlt	r3, #255	; 0xff
   b44ea:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b44ee:	b108      	cbz	r0, b44f4 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b44f0:	f7ff fde5 	bl	b40be <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b44f4:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b44f8:	f7ff fddf 	bl	b40ba <_Znaj>
   b44fc:	61e0      	str	r0, [r4, #28]
}
   b44fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4500 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b4500:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b4504:	4604      	mov	r4, r0
            bool thread) {
   b4506:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b4508:	4617      	mov	r7, r2
   b450a:	4698      	mov	r8, r3
   b450c:	460e      	mov	r6, r1
            bool thread) {
   b450e:	f004 f89b 	bl	b8648 <_ZN9TCPClientC1Ev>
   b4512:	490d      	ldr	r1, [pc, #52]	; (b4548 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b4514:	61e5      	str	r5, [r4, #28]
   b4516:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b451a:	f000 ff16 	bl	b534a <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b451e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b4522:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b4524:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b4528:	22ff      	movs	r2, #255	; 0xff
   b452a:	230f      	movs	r3, #15
   b452c:	e9cd 3200 	strd	r3, r2, [sp]
   b4530:	4620      	mov	r0, r4
            bool thread) {
   b4532:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b4536:	463b      	mov	r3, r7
   b4538:	462a      	mov	r2, r5
   b453a:	4631      	mov	r1, r6
   b453c:	f7ff ffb2 	bl	b44a4 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b4540:	4620      	mov	r0, r4
   b4542:	b004      	add	sp, #16
   b4544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4548:	000b94be 	.word	0x000b94be

000b454c <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b454c:	b510      	push	{r4, lr}
   b454e:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b4550:	4620      	mov	r0, r4
   b4552:	f003 ffd5 	bl	b8500 <_ZN9TCPClient9availableEv>
   b4556:	2800      	cmp	r0, #0
   b4558:	d0fa      	beq.n	b4550 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b455a:	4620      	mov	r0, r4
   b455c:	f003 fdde 	bl	b811c <_ZN9TCPClient4readEv>
}
   b4560:	b2c0      	uxtb	r0, r0
   b4562:	bd10      	pop	{r4, pc}

000b4564 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b4564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4568:	4605      	mov	r5, r0
   b456a:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b456c:	f7ff ffee 	bl	b454c <_ZN4MQTT8readByteEv>
   b4570:	69eb      	ldr	r3, [r5, #28]
   b4572:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b4574:	69eb      	ldr	r3, [r5, #28]
   b4576:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b457a:	f04f 0901 	mov.w	r9, #1
   b457e:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b4582:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b4584:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b4586:	4628      	mov	r0, r5
   b4588:	f7ff ffe0 	bl	b454c <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b458c:	4626      	mov	r6, r4
   b458e:	69eb      	ldr	r3, [r5, #28]
   b4590:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b4592:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b4596:	fb13 f309 	smulbb	r3, r3, r9
   b459a:	441f      	add	r7, r3
        buffer[len++] = digit;
   b459c:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b459e:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b45a0:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b45a2:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b45a4:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b45a8:	d4ed      	bmi.n	b4586 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b45aa:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b45ac:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b45b0:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b45b4:	d11e      	bne.n	b45f4 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b45b6:	4628      	mov	r0, r5
   b45b8:	f7ff ffc8 	bl	b454c <_ZN4MQTT8readByteEv>
   b45bc:	69eb      	ldr	r3, [r5, #28]
   b45be:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b45c0:	4628      	mov	r0, r5
   b45c2:	f7ff ffc3 	bl	b454c <_ZN4MQTT8readByteEv>
   b45c6:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b45c8:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b45ca:	b2b6      	uxth	r6, r6
   b45cc:	69eb      	ldr	r3, [r5, #28]
   b45ce:	b2a4      	uxth	r4, r4
   b45d0:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b45d2:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b45d4:	b2b6      	uxth	r6, r6
   b45d6:	42be      	cmp	r6, r7
   b45d8:	d20e      	bcs.n	b45f8 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b45da:	4628      	mov	r0, r5
   b45dc:	f7ff ffb6 	bl	b454c <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b45e0:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b45e4:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b45e6:	bf84      	itt	hi
   b45e8:	69eb      	ldrhi	r3, [r5, #28]
   b45ea:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b45ec:	3401      	adds	r4, #1
   b45ee:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b45f0:	3601      	adds	r6, #1
   b45f2:	e7ef      	b.n	b45d4 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b45f4:	2600      	movs	r6, #0
   b45f6:	e7ed      	b.n	b45d4 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b45f8:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b45fc:	42a3      	cmp	r3, r4
   b45fe:	bf2c      	ite	cs
   b4600:	4620      	movcs	r0, r4
   b4602:	2000      	movcc	r0, #0
   b4604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b4608 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b4608:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b460c:	4615      	mov	r5, r2
   b460e:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b4610:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b4612:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b4614:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b4616:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b4618:	a802      	add	r0, sp, #8
        digit = len % 128;
   b461a:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b461e:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b4622:	f103 0401 	add.w	r4, r3, #1
   b4626:	4403      	add	r3, r0
            digit |= 0x80;
   b4628:	bf88      	it	hi
   b462a:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b462e:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b4632:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b4636:	b2e4      	uxtb	r4, r4
   b4638:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b463c:	d81e      	bhi.n	b467c <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b463e:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b4642:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b4646:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b4648:	4622      	mov	r2, r4
   b464a:	a901      	add	r1, sp, #4
   b464c:	4428      	add	r0, r5
    buf[4-llen] = header;
   b464e:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b4652:	f004 fc4d 	bl	b8ef0 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b4656:	1c72      	adds	r2, r6, #1
   b4658:	4422      	add	r2, r4
   b465a:	4641      	mov	r1, r8
   b465c:	4638      	mov	r0, r7
   b465e:	f003 fd48 	bl	b80f2 <_ZN9TCPClient5writeEPKhj>
   b4662:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4664:	f000 fb40 	bl	b4ce8 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b4668:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b466a:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b466c:	4432      	add	r2, r6
   b466e:	b2a8      	uxth	r0, r5
}
   b4670:	1a13      	subs	r3, r2, r0
   b4672:	4258      	negs	r0, r3
   b4674:	4158      	adcs	r0, r3
   b4676:	b002      	add	sp, #8
   b4678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b467c:	4623      	mov	r3, r4
   b467e:	e7ca      	b.n	b4616 <_ZN4MQTT5writeEhPht+0xe>

000b4680 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b4680:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b4682:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4684:	4605      	mov	r5, r0
    pos += 2;
   b4686:	b298      	uxth	r0, r3
   b4688:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b468a:	5cce      	ldrb	r6, [r1, r3]
   b468c:	b29c      	uxth	r4, r3
   b468e:	b156      	cbz	r6, b46a6 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b4690:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b4694:	4584      	cmp	ip, r0
   b4696:	f103 0701 	add.w	r7, r3, #1
   b469a:	d904      	bls.n	b46a6 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b469c:	1c44      	adds	r4, r0, #1
   b469e:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b46a0:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b46a2:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b46a4:	e7f1      	b.n	b468a <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b46a6:	b299      	uxth	r1, r3
   b46a8:	1a41      	subs	r1, r0, r1
   b46aa:	440a      	add	r2, r1
   b46ac:	0a21      	lsrs	r1, r4, #8
   b46ae:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b46b2:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b46b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b46b8 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b46b8:	b538      	push	{r3, r4, r5, lr}
   b46ba:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b46bc:	f003 fe42 	bl	b8344 <_ZN9TCPClient9connectedEv>
   b46c0:	2800      	cmp	r0, #0
   b46c2:	bf14      	ite	ne
   b46c4:	2501      	movne	r5, #1
   b46c6:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b46c8:	d102      	bne.n	b46d0 <_ZN4MQTT11isConnectedEv+0x18>
   b46ca:	4620      	mov	r0, r4
   b46cc:	f003 ff72 	bl	b85b4 <_ZN9TCPClient4stopEv>
    return rc;
}
   b46d0:	4628      	mov	r0, r5
   b46d2:	bd38      	pop	{r3, r4, r5, pc}

000b46d4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b46d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b46d8:	b088      	sub	sp, #32
   b46da:	4604      	mov	r4, r0
   b46dc:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b46e0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b46e4:	4689      	mov	r9, r1
   b46e6:	4617      	mov	r7, r2
   b46e8:	461e      	mov	r6, r3
    if (!isConnected()) {
   b46ea:	f7ff ffe5 	bl	b46b8 <_ZN4MQTT11isConnectedEv>
   b46ee:	4605      	mov	r5, r0
   b46f0:	2800      	cmp	r0, #0
   b46f2:	f040 80cd 	bne.w	b4890 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b46f6:	4621      	mov	r1, r4
   b46f8:	a801      	add	r0, sp, #4
   b46fa:	f7ff febd 	bl	b4478 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b46fe:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4700:	2900      	cmp	r1, #0
   b4702:	f040 8088 	bne.w	b4816 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b4706:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b470a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b470c:	462b      	mov	r3, r5
   b470e:	4620      	mov	r0, r4
   b4710:	f003 fd9a 	bl	b8248 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b4714:	2800      	cmp	r0, #0
   b4716:	d07a      	beq.n	b480e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b4718:	2301      	movs	r3, #1
   b471a:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b471c:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b4720:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b4722:	2b04      	cmp	r3, #4
   b4724:	4b5b      	ldr	r3, [pc, #364]	; (b4894 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b4726:	f040 8081 	bne.w	b482c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b472a:	6818      	ldr	r0, [r3, #0]
   b472c:	8899      	ldrh	r1, [r3, #4]
   b472e:	799b      	ldrb	r3, [r3, #6]
   b4730:	f8ad 100c 	strh.w	r1, [sp, #12]
   b4734:	f88d 300e 	strb.w	r3, [sp, #14]
   b4738:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b473a:	f8c2 0005 	str.w	r0, [r2, #5]
   b473e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b4742:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b4746:	f8a2 1009 	strh.w	r1, [r2, #9]
   b474a:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b474c:	230c      	movs	r3, #12
            if (willTopic) {
   b474e:	f1b8 0f00 	cmp.w	r8, #0
   b4752:	f000 8081 	beq.w	b4858 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b4756:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b475a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b475e:	0140      	lsls	r0, r0, #5
   b4760:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b4764:	f040 0006 	orr.w	r0, r0, #6
   b4768:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b476a:	f1ba 0f00 	cmp.w	sl, #0
   b476e:	d101      	bne.n	b4774 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b4770:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b4774:	b11f      	cbz	r7, b477e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b4776:	2e00      	cmp	r6, #0
   b4778:	d170      	bne.n	b485c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b477a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b477e:	69e2      	ldr	r2, [r4, #28]
   b4780:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b4782:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b4784:	69e1      	ldr	r1, [r4, #28]
   b4786:	1c58      	adds	r0, r3, #1
   b4788:	1212      	asrs	r2, r2, #8
   b478a:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b478c:	1c9a      	adds	r2, r3, #2
   b478e:	69e1      	ldr	r1, [r4, #28]
   b4790:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b4792:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b4794:	3303      	adds	r3, #3
   b4796:	69e2      	ldr	r2, [r4, #28]
   b4798:	4649      	mov	r1, r9
   b479a:	4620      	mov	r0, r4
   b479c:	f7ff ff70 	bl	b4680 <_ZN4MQTT11writeStringEPKcPht>
   b47a0:	4603      	mov	r3, r0
            if (willTopic) {
   b47a2:	f1b8 0f00 	cmp.w	r8, #0
   b47a6:	d00b      	beq.n	b47c0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b47a8:	69e2      	ldr	r2, [r4, #28]
   b47aa:	4641      	mov	r1, r8
   b47ac:	4620      	mov	r0, r4
   b47ae:	f7ff ff67 	bl	b4680 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b47b2:	69e2      	ldr	r2, [r4, #28]
   b47b4:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b47b6:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b47b8:	4620      	mov	r0, r4
   b47ba:	f7ff ff61 	bl	b4680 <_ZN4MQTT11writeStringEPKcPht>
   b47be:	4603      	mov	r3, r0
            if(user != NULL) {
   b47c0:	b167      	cbz	r7, b47dc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b47c2:	69e2      	ldr	r2, [r4, #28]
   b47c4:	4639      	mov	r1, r7
   b47c6:	4620      	mov	r0, r4
   b47c8:	f7ff ff5a 	bl	b4680 <_ZN4MQTT11writeStringEPKcPht>
   b47cc:	4603      	mov	r3, r0
                if(pass != NULL) {
   b47ce:	b12e      	cbz	r6, b47dc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b47d0:	69e2      	ldr	r2, [r4, #28]
   b47d2:	4631      	mov	r1, r6
   b47d4:	4620      	mov	r0, r4
   b47d6:	f7ff ff53 	bl	b4680 <_ZN4MQTT11writeStringEPKcPht>
   b47da:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b47dc:	3b05      	subs	r3, #5
   b47de:	69e2      	ldr	r2, [r4, #28]
   b47e0:	b29b      	uxth	r3, r3
   b47e2:	2110      	movs	r1, #16
   b47e4:	4620      	mov	r0, r4
   b47e6:	f7ff ff0f 	bl	b4608 <_ZN4MQTT5writeEhPht>
   b47ea:	f000 fa7d 	bl	b4ce8 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b47ee:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b47f2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b47f6:	4620      	mov	r0, r4
   b47f8:	f003 fe82 	bl	b8500 <_ZN9TCPClient9availableEv>
   b47fc:	bb88      	cbnz	r0, b4862 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b47fe:	f000 fa73 	bl	b4ce8 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b4802:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4804:	1ac0      	subs	r0, r0, r3
   b4806:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b4808:	4373      	muls	r3, r6
   b480a:	4298      	cmp	r0, r3
   b480c:	d9f3      	bls.n	b47f6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b480e:	4620      	mov	r0, r4
   b4810:	f003 fed0 	bl	b85b4 <_ZN9TCPClient4stopEv>
   b4814:	e035      	b.n	b4882 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b4816:	a802      	add	r0, sp, #8
   b4818:	f003 fb6a 	bl	b7ef0 <_ZN9IPAddressC1EPKh>
   b481c:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b4820:	462b      	mov	r3, r5
   b4822:	a902      	add	r1, sp, #8
   b4824:	4620      	mov	r0, r4
   b4826:	f003 fdef 	bl	b8408 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b482a:	e773      	b.n	b4714 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b482c:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b4830:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b4834:	7bdb      	ldrb	r3, [r3, #15]
   b4836:	f10d 0c08 	add.w	ip, sp, #8
   b483a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b483e:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b4842:	ab02      	add	r3, sp, #8
   b4844:	cb03      	ldmia	r3!, {r0, r1}
   b4846:	f8c2 0005 	str.w	r0, [r2, #5]
   b484a:	f8c2 1009 	str.w	r1, [r2, #9]
   b484e:	f89c 3000 	ldrb.w	r3, [ip]
   b4852:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b4854:	230e      	movs	r3, #14
   b4856:	e77a      	b.n	b474e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b4858:	2002      	movs	r0, #2
   b485a:	e786      	b.n	b476a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b485c:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b4860:	e78d      	b.n	b477e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b4862:	a902      	add	r1, sp, #8
   b4864:	4620      	mov	r0, r4
   b4866:	f7ff fe7d 	bl	b4564 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b486a:	2804      	cmp	r0, #4
   b486c:	d1cf      	bne.n	b480e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b486e:	69e3      	ldr	r3, [r4, #28]
   b4870:	78de      	ldrb	r6, [r3, #3]
   b4872:	2e00      	cmp	r6, #0
   b4874:	d1cb      	bne.n	b480e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b4876:	f000 fa37 	bl	b4ce8 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b487a:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b487c:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b487e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b4882:	a801      	add	r0, sp, #4
   b4884:	f7ff fe03 	bl	b448e <_ZN4MQTT11MutexLockerD1Ev>
}
   b4888:	4628      	mov	r0, r5
   b488a:	b008      	add	sp, #32
   b488c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b4890:	2500      	movs	r5, #0
   b4892:	e7f9      	b.n	b4888 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b4894:	000b9238 	.word	0x000b9238

000b4898 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b4898:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b489a:	2301      	movs	r3, #1
   b489c:	2204      	movs	r2, #4
   b489e:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b48a2:	2300      	movs	r3, #0
   b48a4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b48a8:	e9cd 3300 	strd	r3, r3, [sp]
   b48ac:	461a      	mov	r2, r3
   b48ae:	f7ff ff11 	bl	b46d4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b48b2:	b007      	add	sp, #28
   b48b4:	f85d fb04 	ldr.w	pc, [sp], #4

000b48b8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b48b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b48bc:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b48c0:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b48c4:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b48c8:	4604      	mov	r4, r0
   b48ca:	468b      	mov	fp, r1
   b48cc:	4616      	mov	r6, r2
   b48ce:	461f      	mov	r7, r3
    if (isConnected()) {
   b48d0:	f7ff fef2 	bl	b46b8 <_ZN4MQTT11isConnectedEv>
   b48d4:	4682      	mov	sl, r0
   b48d6:	2800      	cmp	r0, #0
   b48d8:	d051      	beq.n	b497e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b48da:	4621      	mov	r1, r4
   b48dc:	a801      	add	r0, sp, #4
   b48de:	f7ff fdcb 	bl	b4478 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b48e2:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b48e6:	69e0      	ldr	r0, [r4, #28]
   b48e8:	2100      	movs	r1, #0
   b48ea:	f004 fb29 	bl	b8f40 <memset>
        length = writeString(topic, buffer, length);
   b48ee:	2305      	movs	r3, #5
   b48f0:	69e2      	ldr	r2, [r4, #28]
   b48f2:	4659      	mov	r1, fp
   b48f4:	4620      	mov	r0, r4
   b48f6:	f7ff fec3 	bl	b4680 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b48fa:	1e6b      	subs	r3, r5, #1
   b48fc:	2b01      	cmp	r3, #1
   b48fe:	d815      	bhi.n	b492c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b4900:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4902:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b4904:	3101      	adds	r1, #1
   b4906:	b289      	uxth	r1, r1
   b4908:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b490a:	0a09      	lsrs	r1, r1, #8
   b490c:	5419      	strb	r1, [r3, r0]
   b490e:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b4910:	69e3      	ldr	r3, [r4, #28]
   b4912:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b4914:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b4916:	3002      	adds	r0, #2
   b4918:	5499      	strb	r1, [r3, r2]
   b491a:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b491c:	f1b8 0f00 	cmp.w	r8, #0
   b4920:	d004      	beq.n	b492c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b4922:	8c23      	ldrh	r3, [r4, #32]
   b4924:	1c5a      	adds	r2, r3, #1
   b4926:	8422      	strh	r2, [r4, #32]
   b4928:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b492c:	2100      	movs	r1, #0
   b492e:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4930:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b4932:	69e2      	ldr	r2, [r4, #28]
   b4934:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4936:	d90a      	bls.n	b494e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b4938:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b493c:	459c      	cmp	ip, r3
   b493e:	d906      	bls.n	b494e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b4940:	f816 c001 	ldrb.w	ip, [r6, r1]
   b4944:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b4948:	3101      	adds	r1, #1
   b494a:	b289      	uxth	r1, r1
   b494c:	e7ef      	b.n	b492e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b494e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b4952:	2900      	cmp	r1, #0
   b4954:	bf0c      	ite	eq
   b4956:	2130      	moveq	r1, #48	; 0x30
   b4958:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b495a:	f1b9 0f00 	cmp.w	r9, #0
   b495e:	d001      	beq.n	b4964 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b4960:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b4964:	2d02      	cmp	r5, #2
   b4966:	d10e      	bne.n	b4986 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b4968:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b496c:	3b05      	subs	r3, #5
   b496e:	b29b      	uxth	r3, r3
   b4970:	4620      	mov	r0, r4
   b4972:	f7ff fe49 	bl	b4608 <_ZN4MQTT5writeEhPht>
   b4976:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b4978:	a801      	add	r0, sp, #4
   b497a:	f7ff fd88 	bl	b448e <_ZN4MQTT11MutexLockerD1Ev>
}
   b497e:	4650      	mov	r0, sl
   b4980:	b003      	add	sp, #12
   b4982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b4986:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b4988:	bf08      	it	eq
   b498a:	f041 0102 	orreq.w	r1, r1, #2
   b498e:	e7ed      	b.n	b496c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b4990 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b4990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b4992:	9c08      	ldr	r4, [sp, #32]
   b4994:	9403      	str	r4, [sp, #12]
   b4996:	2400      	movs	r4, #0
   b4998:	9402      	str	r4, [sp, #8]
   b499a:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b499e:	9401      	str	r4, [sp, #4]
   b49a0:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b49a4:	9400      	str	r4, [sp, #0]
   b49a6:	f7ff ff87 	bl	b48b8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b49aa:	b004      	add	sp, #16
   b49ac:	bd10      	pop	{r4, pc}

000b49ae <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b49ae:	b530      	push	{r4, r5, lr}
   b49b0:	b087      	sub	sp, #28
   b49b2:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b49b4:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b49b6:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b49b8:	9204      	str	r2, [sp, #16]
   b49ba:	f7ff fb39 	bl	b4030 <strlen>
   b49be:	2500      	movs	r5, #0
   b49c0:	4603      	mov	r3, r0
   b49c2:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b49c6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b49ca:	9500      	str	r5, [sp, #0]
   b49cc:	4620      	mov	r0, r4
   b49ce:	f7ff ffdf 	bl	b4990 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b49d2:	b007      	add	sp, #28
   b49d4:	bd30      	pop	{r4, r5, pc}

000b49d6 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b49d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b49d8:	4604      	mov	r4, r0
   b49da:	460e      	mov	r6, r1
    if (isConnected()) {
   b49dc:	f7ff fe6c 	bl	b46b8 <_ZN4MQTT11isConnectedEv>
   b49e0:	4605      	mov	r5, r0
   b49e2:	b1c8      	cbz	r0, b4a18 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b49e4:	4621      	mov	r1, r4
   b49e6:	a801      	add	r0, sp, #4
   b49e8:	f7ff fd46 	bl	b4478 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b49ec:	69e3      	ldr	r3, [r4, #28]
   b49ee:	2262      	movs	r2, #98	; 0x62
   b49f0:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b49f2:	69e3      	ldr	r3, [r4, #28]
   b49f4:	2202      	movs	r2, #2
   b49f6:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b49f8:	69e3      	ldr	r3, [r4, #28]
   b49fa:	0a32      	lsrs	r2, r6, #8
   b49fc:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b49fe:	69e3      	ldr	r3, [r4, #28]
   b4a00:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b4a02:	69e1      	ldr	r1, [r4, #28]
   b4a04:	2204      	movs	r2, #4
   b4a06:	4620      	mov	r0, r4
   b4a08:	f003 fb73 	bl	b80f2 <_ZN9TCPClient5writeEPKhj>
   b4a0c:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b4a0e:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b4a10:	bf18      	it	ne
   b4a12:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b4a14:	f7ff fd3b 	bl	b448e <_ZN4MQTT11MutexLockerD1Ev>
}
   b4a18:	4628      	mov	r0, r5
   b4a1a:	b002      	add	sp, #8
   b4a1c:	bd70      	pop	{r4, r5, r6, pc}

000b4a1e <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b4a1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4a20:	4604      	mov	r4, r0
   b4a22:	460e      	mov	r6, r1
    if (isConnected()) {
   b4a24:	f7ff fe48 	bl	b46b8 <_ZN4MQTT11isConnectedEv>
   b4a28:	4605      	mov	r5, r0
   b4a2a:	b1c8      	cbz	r0, b4a60 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b4a2c:	4621      	mov	r1, r4
   b4a2e:	a801      	add	r0, sp, #4
   b4a30:	f7ff fd22 	bl	b4478 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b4a34:	69e3      	ldr	r3, [r4, #28]
   b4a36:	2272      	movs	r2, #114	; 0x72
   b4a38:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b4a3a:	69e3      	ldr	r3, [r4, #28]
   b4a3c:	2202      	movs	r2, #2
   b4a3e:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b4a40:	69e3      	ldr	r3, [r4, #28]
   b4a42:	0a32      	lsrs	r2, r6, #8
   b4a44:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b4a46:	69e3      	ldr	r3, [r4, #28]
   b4a48:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b4a4a:	69e1      	ldr	r1, [r4, #28]
   b4a4c:	2204      	movs	r2, #4
   b4a4e:	4620      	mov	r0, r4
   b4a50:	f003 fb4f 	bl	b80f2 <_ZN9TCPClient5writeEPKhj>
   b4a54:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b4a56:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b4a58:	bf18      	it	ne
   b4a5a:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b4a5c:	f7ff fd17 	bl	b448e <_ZN4MQTT11MutexLockerD1Ev>
}
   b4a60:	4628      	mov	r0, r5
   b4a62:	b002      	add	sp, #8
   b4a64:	bd70      	pop	{r4, r5, r6, pc}

000b4a66 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b4a66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4a6a:	ed2d 8b02 	vpush	{d8}
   b4a6e:	b087      	sub	sp, #28
   b4a70:	af00      	add	r7, sp, #0
   b4a72:	4604      	mov	r4, r0
    if (isConnected()) {
   b4a74:	f7ff fe20 	bl	b46b8 <_ZN4MQTT11isConnectedEv>
   b4a78:	4681      	mov	r9, r0
   b4a7a:	b1f8      	cbz	r0, b4abc <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b4a7c:	4621      	mov	r1, r4
   b4a7e:	f107 0014 	add.w	r0, r7, #20
   b4a82:	f7ff fcf9 	bl	b4478 <_ZN4MQTT11MutexLockerC1EPS_>
   b4a86:	f000 f92f 	bl	b4ce8 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b4a8a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b4a8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4a90:	4353      	muls	r3, r2
   b4a92:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b4a94:	1a82      	subs	r2, r0, r2
   b4a96:	429a      	cmp	r2, r3
   b4a98:	4606      	mov	r6, r0
   b4a9a:	d803      	bhi.n	b4aa4 <_ZN4MQTT4loopEv+0x3e>
   b4a9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b4a9e:	1a82      	subs	r2, r0, r2
   b4aa0:	4293      	cmp	r3, r2
   b4aa2:	d221      	bcs.n	b4ae8 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b4aa4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b4aa8:	b17b      	cbz	r3, b4aca <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b4aaa:	4620      	mov	r0, r4
   b4aac:	f003 fd82 	bl	b85b4 <_ZN9TCPClient4stopEv>
                return false;
   b4ab0:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b4ab4:	f107 0014 	add.w	r0, r7, #20
   b4ab8:	f7ff fce9 	bl	b448e <_ZN4MQTT11MutexLockerD1Ev>
}
   b4abc:	4648      	mov	r0, r9
   b4abe:	371c      	adds	r7, #28
   b4ac0:	46bd      	mov	sp, r7
   b4ac2:	ecbd 8b02 	vpop	{d8}
   b4ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b4aca:	69e2      	ldr	r2, [r4, #28]
   b4acc:	21c0      	movs	r1, #192	; 0xc0
   b4ace:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b4ad0:	69e2      	ldr	r2, [r4, #28]
   b4ad2:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b4ad4:	69e1      	ldr	r1, [r4, #28]
   b4ad6:	2202      	movs	r2, #2
   b4ad8:	4620      	mov	r0, r4
   b4ada:	f003 fb0a 	bl	b80f2 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b4ade:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b4ae2:	2301      	movs	r3, #1
   b4ae4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b4ae8:	4620      	mov	r0, r4
   b4aea:	f003 fd09 	bl	b8500 <_ZN9TCPClient9availableEv>
   b4aee:	2800      	cmp	r0, #0
   b4af0:	d0e0      	beq.n	b4ab4 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b4af2:	f107 0113 	add.w	r1, r7, #19
   b4af6:	4620      	mov	r0, r4
   b4af8:	f7ff fd34 	bl	b4564 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b4afc:	4683      	mov	fp, r0
   b4afe:	2800      	cmp	r0, #0
   b4b00:	d0d8      	beq.n	b4ab4 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b4b02:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b4b04:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b4b06:	7819      	ldrb	r1, [r3, #0]
   b4b08:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b4b0c:	2a30      	cmp	r2, #48	; 0x30
   b4b0e:	d17f      	bne.n	b4c10 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b4b10:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b4b14:	f1ba 0f00 	cmp.w	sl, #0
   b4b18:	d0cc      	beq.n	b4ab4 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b4b1a:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b4b1e:	466a      	mov	r2, sp
   b4b20:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b4b24:	eb03 020c 	add.w	r2, r3, ip
   b4b28:	7851      	ldrb	r1, [r2, #1]
   b4b2a:	7895      	ldrb	r5, [r2, #2]
   b4b2c:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b4b30:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b4b32:	f105 0208 	add.w	r2, r5, #8
   b4b36:	4669      	mov	r1, sp
   b4b38:	08d2      	lsrs	r2, r2, #3
   b4b3a:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b4b3e:	4695      	mov	sp, r2
   b4b40:	f10c 0203 	add.w	r2, ip, #3
   b4b44:	60fa      	str	r2, [r7, #12]
   b4b46:	eb03 0e02 	add.w	lr, r3, r2
   b4b4a:	eb0d 0205 	add.w	r2, sp, r5
   b4b4e:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b4b50:	f8c7 d008 	str.w	sp, [r7, #8]
   b4b54:	607a      	str	r2, [r7, #4]
   b4b56:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b4b5a:	428a      	cmp	r2, r1
   b4b5c:	d006      	beq.n	b4b6c <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b4b5e:	460a      	mov	r2, r1
   b4b60:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b4b64:	f802 8b01 	strb.w	r8, [r2], #1
   b4b68:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b4b6a:	e7f4      	b.n	b4b56 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b4b6c:	2200      	movs	r2, #0
   b4b6e:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b4b70:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4b74:	68f9      	ldr	r1, [r7, #12]
   b4b76:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b4b7a:	ebab 020c 	sub.w	r2, fp, ip
   b4b7e:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b4b80:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b4b84:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4b88:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b4b8a:	d125      	bne.n	b4bd8 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4b8c:	f813 e001 	ldrb.w	lr, [r3, r1]
   b4b90:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b4b92:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4b94:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b4b98:	f10c 0105 	add.w	r1, ip, #5
   b4b9c:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b4b9e:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4ba0:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b4ba4:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b4ba6:	69e3      	ldr	r3, [r4, #28]
   b4ba8:	2240      	movs	r2, #64	; 0x40
   b4baa:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b4bac:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b4bae:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b4bb2:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b4bb6:	69e3      	ldr	r3, [r4, #28]
   b4bb8:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b4bbc:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b4bbe:	69e3      	ldr	r3, [r4, #28]
   b4bc0:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b4bc4:	69e1      	ldr	r1, [r4, #28]
   b4bc6:	2204      	movs	r2, #4
   b4bc8:	4620      	mov	r0, r4
   b4bca:	f003 fa92 	bl	b80f2 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b4bce:	6266      	str	r6, [r4, #36]	; 0x24
   b4bd0:	ee18 3a10 	vmov	r3, s16
   b4bd4:	469d      	mov	sp, r3
   b4bd6:	e76d      	b.n	b4ab4 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b4bd8:	f1b8 0f04 	cmp.w	r8, #4
   b4bdc:	d115      	bne.n	b4c0a <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4bde:	f813 e001 	ldrb.w	lr, [r3, r1]
   b4be2:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4be4:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4be6:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b4bea:	f10c 0105 	add.w	r1, ip, #5
   b4bee:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4bf0:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4bf2:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b4bf6:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b4bf8:	69e3      	ldr	r3, [r4, #28]
   b4bfa:	2250      	movs	r2, #80	; 0x50
   b4bfc:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b4bfe:	69e3      	ldr	r3, [r4, #28]
   b4c00:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b4c02:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b4c06:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b4c08:	e7d5      	b.n	b4bb6 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b4c0a:	4419      	add	r1, r3
   b4c0c:	47d0      	blx	sl
   b4c0e:	e7df      	b.n	b4bd0 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b4c10:	2a50      	cmp	r2, #80	; 0x50
   b4c12:	d108      	bne.n	b4c26 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b4c14:	789a      	ldrb	r2, [r3, #2]
   b4c16:	78d9      	ldrb	r1, [r3, #3]
   b4c18:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b4c1c:	b289      	uxth	r1, r1
   b4c1e:	4620      	mov	r0, r4
   b4c20:	f7ff fed9 	bl	b49d6 <_ZN4MQTT14publishReleaseEt>
   b4c24:	e746      	b.n	b4ab4 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b4c26:	2a40      	cmp	r2, #64	; 0x40
   b4c28:	d112      	bne.n	b4c50 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b4c2a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b4c2c:	2a00      	cmp	r2, #0
   b4c2e:	f43f af41 	beq.w	b4ab4 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b4c32:	f1bb 0f04 	cmp.w	fp, #4
   b4c36:	f47f af3d 	bne.w	b4ab4 <_ZN4MQTT4loopEv+0x4e>
   b4c3a:	f011 0f06 	tst.w	r1, #6
   b4c3e:	f47f af39 	bne.w	b4ab4 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b4c42:	7899      	ldrb	r1, [r3, #2]
   b4c44:	78d8      	ldrb	r0, [r3, #3]
   b4c46:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b4c4a:	b280      	uxth	r0, r0
   b4c4c:	4790      	blx	r2
   b4c4e:	e731      	b.n	b4ab4 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b4c50:	2a60      	cmp	r2, #96	; 0x60
   b4c52:	d108      	bne.n	b4c66 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b4c54:	789a      	ldrb	r2, [r3, #2]
   b4c56:	78d9      	ldrb	r1, [r3, #3]
   b4c58:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b4c5c:	b289      	uxth	r1, r1
   b4c5e:	4620      	mov	r0, r4
   b4c60:	f7ff fedd 	bl	b4a1e <_ZN4MQTT15publishCompleteEt>
   b4c64:	e726      	b.n	b4ab4 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b4c66:	2a70      	cmp	r2, #112	; 0x70
   b4c68:	d0df      	beq.n	b4c2a <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b4c6a:	2a90      	cmp	r2, #144	; 0x90
   b4c6c:	f43f af22 	beq.w	b4ab4 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b4c70:	2ac0      	cmp	r2, #192	; 0xc0
   b4c72:	d10a      	bne.n	b4c8a <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b4c74:	22d0      	movs	r2, #208	; 0xd0
   b4c76:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b4c78:	69e3      	ldr	r3, [r4, #28]
   b4c7a:	2200      	movs	r2, #0
   b4c7c:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b4c7e:	69e1      	ldr	r1, [r4, #28]
   b4c80:	2202      	movs	r2, #2
   b4c82:	4620      	mov	r0, r4
   b4c84:	f003 fa35 	bl	b80f2 <_ZN9TCPClient5writeEPKhj>
   b4c88:	e714      	b.n	b4ab4 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b4c8a:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b4c8c:	bf04      	itt	eq
   b4c8e:	2300      	moveq	r3, #0
   b4c90:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b4c94:	e70e      	b.n	b4ab4 <_ZN4MQTT4loopEv+0x4e>
	...

000b4c98 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4c98:	b508      	push	{r3, lr}
   b4c9a:	4b02      	ldr	r3, [pc, #8]	; (b4ca4 <netdb_freeaddrinfo+0xc>)
   b4c9c:	681b      	ldr	r3, [r3, #0]
   b4c9e:	689b      	ldr	r3, [r3, #8]
   b4ca0:	9301      	str	r3, [sp, #4]
   b4ca2:	bd08      	pop	{r3, pc}
   b4ca4:	00030268 	.word	0x00030268

000b4ca8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4ca8:	b508      	push	{r3, lr}
   b4caa:	4b02      	ldr	r3, [pc, #8]	; (b4cb4 <netdb_getaddrinfo+0xc>)
   b4cac:	681b      	ldr	r3, [r3, #0]
   b4cae:	68db      	ldr	r3, [r3, #12]
   b4cb0:	9301      	str	r3, [sp, #4]
   b4cb2:	bd08      	pop	{r3, pc}
   b4cb4:	00030268 	.word	0x00030268

000b4cb8 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b4cb8:	b508      	push	{r3, lr}
   b4cba:	4b02      	ldr	r3, [pc, #8]	; (b4cc4 <if_index_to_name+0xc>)
   b4cbc:	681b      	ldr	r3, [r3, #0]
   b4cbe:	695b      	ldr	r3, [r3, #20]
   b4cc0:	9301      	str	r3, [sp, #4]
   b4cc2:	bd08      	pop	{r3, pc}
   b4cc4:	0003026c 	.word	0x0003026c

000b4cc8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4cc8:	b508      	push	{r3, lr}
   b4cca:	4b02      	ldr	r3, [pc, #8]	; (b4cd4 <HAL_RNG_GetRandomNumber+0xc>)
   b4ccc:	681b      	ldr	r3, [r3, #0]
   b4cce:	685b      	ldr	r3, [r3, #4]
   b4cd0:	9301      	str	r3, [sp, #4]
   b4cd2:	bd08      	pop	{r3, pc}
   b4cd4:	00030218 	.word	0x00030218

000b4cd8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4cd8:	b508      	push	{r3, lr}
   b4cda:	4b02      	ldr	r3, [pc, #8]	; (b4ce4 <HAL_Delay_Microseconds+0xc>)
   b4cdc:	681b      	ldr	r3, [r3, #0]
   b4cde:	68db      	ldr	r3, [r3, #12]
   b4ce0:	9301      	str	r3, [sp, #4]
   b4ce2:	bd08      	pop	{r3, pc}
   b4ce4:	00030218 	.word	0x00030218

000b4ce8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4ce8:	b508      	push	{r3, lr}
   b4cea:	4b02      	ldr	r3, [pc, #8]	; (b4cf4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4cec:	681b      	ldr	r3, [r3, #0]
   b4cee:	695b      	ldr	r3, [r3, #20]
   b4cf0:	9301      	str	r3, [sp, #4]
   b4cf2:	bd08      	pop	{r3, pc}
   b4cf4:	00030218 	.word	0x00030218

000b4cf8 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b4cf8:	b508      	push	{r3, lr}
   b4cfa:	4b02      	ldr	r3, [pc, #8]	; (b4d04 <hal_ble_stack_init+0xc>)
   b4cfc:	681b      	ldr	r3, [r3, #0]
   b4cfe:	689b      	ldr	r3, [r3, #8]
   b4d00:	9301      	str	r3, [sp, #4]
   b4d02:	bd08      	pop	{r3, pc}
   b4d04:	00030278 	.word	0x00030278

000b4d08 <hal_ble_gap_set_advertising_parameters>:
DYNALIB_FN(13, hal_ble, hal_ble_gap_get_ppcp, int(hal_ble_conn_params_t*, void*))
DYNALIB_FN(14, hal_ble, hal_ble_gap_add_whitelist, int(const hal_ble_addr_t*, size_t, void*))
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
   b4d08:	b508      	push	{r3, lr}
   b4d0a:	4b02      	ldr	r3, [pc, #8]	; (b4d14 <hal_ble_gap_set_advertising_parameters+0xc>)
   b4d0c:	681b      	ldr	r3, [r3, #0]
   b4d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4d10:	9301      	str	r3, [sp, #4]
   b4d12:	bd08      	pop	{r3, pc}
   b4d14:	00030278 	.word	0x00030278

000b4d18 <hal_ble_gap_get_advertising_parameters>:
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
   b4d18:	b508      	push	{r3, lr}
   b4d1a:	4b02      	ldr	r3, [pc, #8]	; (b4d24 <hal_ble_gap_get_advertising_parameters+0xc>)
   b4d1c:	681b      	ldr	r3, [r3, #0]
   b4d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4d20:	9301      	str	r3, [sp, #4]
   b4d22:	bd08      	pop	{r3, pc}
   b4d24:	00030278 	.word	0x00030278

000b4d28 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b4d28:	b508      	push	{r3, lr}
   b4d2a:	4b02      	ldr	r3, [pc, #8]	; (b4d34 <hal_ble_gap_start_scan+0xc>)
   b4d2c:	681b      	ldr	r3, [r3, #0]
   b4d2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b4d30:	9301      	str	r3, [sp, #4]
   b4d32:	bd08      	pop	{r3, pc}
   b4d34:	00030278 	.word	0x00030278

000b4d38 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b4d38:	b508      	push	{r3, lr}
   b4d3a:	4b03      	ldr	r3, [pc, #12]	; (b4d48 <hal_ble_gap_stop_scan+0x10>)
   b4d3c:	681b      	ldr	r3, [r3, #0]
   b4d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b4d42:	9301      	str	r3, [sp, #4]
   b4d44:	bd08      	pop	{r3, pc}
   b4d46:	0000      	.short	0x0000
   b4d48:	00030278 	.word	0x00030278

000b4d4c <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b4d4c:	b508      	push	{r3, lr}
   b4d4e:	4b03      	ldr	r3, [pc, #12]	; (b4d5c <hal_ble_gap_disconnect+0x10>)
   b4d50:	681b      	ldr	r3, [r3, #0]
   b4d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b4d56:	9301      	str	r3, [sp, #4]
   b4d58:	bd08      	pop	{r3, pc}
   b4d5a:	0000      	.short	0x0000
   b4d5c:	00030278 	.word	0x00030278

000b4d60 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b4d60:	b508      	push	{r3, lr}
   b4d62:	4b03      	ldr	r3, [pc, #12]	; (b4d70 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b4d64:	681b      	ldr	r3, [r3, #0]
   b4d66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b4d6a:	9301      	str	r3, [sp, #4]
   b4d6c:	bd08      	pop	{r3, pc}
   b4d6e:	0000      	.short	0x0000
   b4d70:	00030278 	.word	0x00030278

000b4d74 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b4d74:	b508      	push	{r3, lr}
   b4d76:	4b02      	ldr	r3, [pc, #8]	; (b4d80 <os_mutex_create+0xc>)
   b4d78:	681b      	ldr	r3, [r3, #0]
   b4d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4d7c:	9301      	str	r3, [sp, #4]
   b4d7e:	bd08      	pop	{r3, pc}
   b4d80:	00030248 	.word	0x00030248

000b4d84 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b4d84:	b508      	push	{r3, lr}
   b4d86:	4b02      	ldr	r3, [pc, #8]	; (b4d90 <os_mutex_lock+0xc>)
   b4d88:	681b      	ldr	r3, [r3, #0]
   b4d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4d8c:	9301      	str	r3, [sp, #4]
   b4d8e:	bd08      	pop	{r3, pc}
   b4d90:	00030248 	.word	0x00030248

000b4d94 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b4d94:	b508      	push	{r3, lr}
   b4d96:	4b02      	ldr	r3, [pc, #8]	; (b4da0 <os_mutex_unlock+0xc>)
   b4d98:	681b      	ldr	r3, [r3, #0]
   b4d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d9c:	9301      	str	r3, [sp, #4]
   b4d9e:	bd08      	pop	{r3, pc}
   b4da0:	00030248 	.word	0x00030248

000b4da4 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4da4:	b508      	push	{r3, lr}
   b4da6:	4b02      	ldr	r3, [pc, #8]	; (b4db0 <os_mutex_recursive_create+0xc>)
   b4da8:	681b      	ldr	r3, [r3, #0]
   b4daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4dac:	9301      	str	r3, [sp, #4]
   b4dae:	bd08      	pop	{r3, pc}
   b4db0:	00030248 	.word	0x00030248

000b4db4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b4db4:	b508      	push	{r3, lr}
   b4db6:	4b02      	ldr	r3, [pc, #8]	; (b4dc0 <os_mutex_recursive_destroy+0xc>)
   b4db8:	681b      	ldr	r3, [r3, #0]
   b4dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4dbc:	9301      	str	r3, [sp, #4]
   b4dbe:	bd08      	pop	{r3, pc}
   b4dc0:	00030248 	.word	0x00030248

000b4dc4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4dc4:	b508      	push	{r3, lr}
   b4dc6:	4b02      	ldr	r3, [pc, #8]	; (b4dd0 <os_mutex_recursive_lock+0xc>)
   b4dc8:	681b      	ldr	r3, [r3, #0]
   b4dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4dcc:	9301      	str	r3, [sp, #4]
   b4dce:	bd08      	pop	{r3, pc}
   b4dd0:	00030248 	.word	0x00030248

000b4dd4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b4dd4:	b508      	push	{r3, lr}
   b4dd6:	4b02      	ldr	r3, [pc, #8]	; (b4de0 <os_mutex_recursive_unlock+0xc>)
   b4dd8:	681b      	ldr	r3, [r3, #0]
   b4dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4ddc:	9301      	str	r3, [sp, #4]
   b4dde:	bd08      	pop	{r3, pc}
   b4de0:	00030248 	.word	0x00030248

000b4de4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4de4:	b508      	push	{r3, lr}
   b4de6:	4b02      	ldr	r3, [pc, #8]	; (b4df0 <inet_inet_ntop+0xc>)
   b4de8:	681b      	ldr	r3, [r3, #0]
   b4dea:	695b      	ldr	r3, [r3, #20]
   b4dec:	9301      	str	r3, [sp, #4]
   b4dee:	bd08      	pop	{r3, pc}
   b4df0:	00030264 	.word	0x00030264

000b4df4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b4df4:	b508      	push	{r3, lr}
   b4df6:	4b02      	ldr	r3, [pc, #8]	; (b4e00 <inet_htonl+0xc>)
   b4df8:	681b      	ldr	r3, [r3, #0]
   b4dfa:	6a1b      	ldr	r3, [r3, #32]
   b4dfc:	9301      	str	r3, [sp, #4]
   b4dfe:	bd08      	pop	{r3, pc}
   b4e00:	00030264 	.word	0x00030264

000b4e04 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b4e04:	b508      	push	{r3, lr}
   b4e06:	4b02      	ldr	r3, [pc, #8]	; (b4e10 <inet_htons+0xc>)
   b4e08:	681b      	ldr	r3, [r3, #0]
   b4e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4e0c:	9301      	str	r3, [sp, #4]
   b4e0e:	bd08      	pop	{r3, pc}
   b4e10:	00030264 	.word	0x00030264

000b4e14 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b4e14:	b508      	push	{r3, lr}
   b4e16:	4b02      	ldr	r3, [pc, #8]	; (b4e20 <hal_usart_end+0xc>)
   b4e18:	681b      	ldr	r3, [r3, #0]
   b4e1a:	689b      	ldr	r3, [r3, #8]
   b4e1c:	9301      	str	r3, [sp, #4]
   b4e1e:	bd08      	pop	{r3, pc}
   b4e20:	0003023c 	.word	0x0003023c

000b4e24 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4e24:	b508      	push	{r3, lr}
   b4e26:	4b02      	ldr	r3, [pc, #8]	; (b4e30 <hal_usart_write+0xc>)
   b4e28:	681b      	ldr	r3, [r3, #0]
   b4e2a:	68db      	ldr	r3, [r3, #12]
   b4e2c:	9301      	str	r3, [sp, #4]
   b4e2e:	bd08      	pop	{r3, pc}
   b4e30:	0003023c 	.word	0x0003023c

000b4e34 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4e34:	b508      	push	{r3, lr}
   b4e36:	4b02      	ldr	r3, [pc, #8]	; (b4e40 <hal_usart_available+0xc>)
   b4e38:	681b      	ldr	r3, [r3, #0]
   b4e3a:	691b      	ldr	r3, [r3, #16]
   b4e3c:	9301      	str	r3, [sp, #4]
   b4e3e:	bd08      	pop	{r3, pc}
   b4e40:	0003023c 	.word	0x0003023c

000b4e44 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4e44:	b508      	push	{r3, lr}
   b4e46:	4b02      	ldr	r3, [pc, #8]	; (b4e50 <hal_usart_read+0xc>)
   b4e48:	681b      	ldr	r3, [r3, #0]
   b4e4a:	695b      	ldr	r3, [r3, #20]
   b4e4c:	9301      	str	r3, [sp, #4]
   b4e4e:	bd08      	pop	{r3, pc}
   b4e50:	0003023c 	.word	0x0003023c

000b4e54 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4e54:	b508      	push	{r3, lr}
   b4e56:	4b02      	ldr	r3, [pc, #8]	; (b4e60 <hal_usart_peek+0xc>)
   b4e58:	681b      	ldr	r3, [r3, #0]
   b4e5a:	699b      	ldr	r3, [r3, #24]
   b4e5c:	9301      	str	r3, [sp, #4]
   b4e5e:	bd08      	pop	{r3, pc}
   b4e60:	0003023c 	.word	0x0003023c

000b4e64 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4e64:	b508      	push	{r3, lr}
   b4e66:	4b02      	ldr	r3, [pc, #8]	; (b4e70 <hal_usart_flush+0xc>)
   b4e68:	681b      	ldr	r3, [r3, #0]
   b4e6a:	69db      	ldr	r3, [r3, #28]
   b4e6c:	9301      	str	r3, [sp, #4]
   b4e6e:	bd08      	pop	{r3, pc}
   b4e70:	0003023c 	.word	0x0003023c

000b4e74 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4e74:	b508      	push	{r3, lr}
   b4e76:	4b02      	ldr	r3, [pc, #8]	; (b4e80 <hal_usart_available_data_for_write+0xc>)
   b4e78:	681b      	ldr	r3, [r3, #0]
   b4e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4e7c:	9301      	str	r3, [sp, #4]
   b4e7e:	bd08      	pop	{r3, pc}
   b4e80:	0003023c 	.word	0x0003023c

000b4e84 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4e84:	b508      	push	{r3, lr}
   b4e86:	4b02      	ldr	r3, [pc, #8]	; (b4e90 <hal_usart_begin_config+0xc>)
   b4e88:	681b      	ldr	r3, [r3, #0]
   b4e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4e8c:	9301      	str	r3, [sp, #4]
   b4e8e:	bd08      	pop	{r3, pc}
   b4e90:	0003023c 	.word	0x0003023c

000b4e94 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4e94:	b508      	push	{r3, lr}
   b4e96:	4b02      	ldr	r3, [pc, #8]	; (b4ea0 <hal_usart_init_ex+0xc>)
   b4e98:	681b      	ldr	r3, [r3, #0]
   b4e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4e9c:	9301      	str	r3, [sp, #4]
   b4e9e:	bd08      	pop	{r3, pc}
   b4ea0:	0003023c 	.word	0x0003023c

000b4ea4 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b4ea4:	b508      	push	{r3, lr}
   b4ea6:	4b02      	ldr	r3, [pc, #8]	; (b4eb0 <sock_setsockopt+0xc>)
   b4ea8:	681b      	ldr	r3, [r3, #0]
   b4eaa:	699b      	ldr	r3, [r3, #24]
   b4eac:	9301      	str	r3, [sp, #4]
   b4eae:	bd08      	pop	{r3, pc}
   b4eb0:	00030238 	.word	0x00030238

000b4eb4 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b4eb4:	b508      	push	{r3, lr}
   b4eb6:	4b02      	ldr	r3, [pc, #8]	; (b4ec0 <sock_close+0xc>)
   b4eb8:	681b      	ldr	r3, [r3, #0]
   b4eba:	69db      	ldr	r3, [r3, #28]
   b4ebc:	9301      	str	r3, [sp, #4]
   b4ebe:	bd08      	pop	{r3, pc}
   b4ec0:	00030238 	.word	0x00030238

000b4ec4 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b4ec4:	b508      	push	{r3, lr}
   b4ec6:	4b02      	ldr	r3, [pc, #8]	; (b4ed0 <sock_connect+0xc>)
   b4ec8:	681b      	ldr	r3, [r3, #0]
   b4eca:	6a1b      	ldr	r3, [r3, #32]
   b4ecc:	9301      	str	r3, [sp, #4]
   b4ece:	bd08      	pop	{r3, pc}
   b4ed0:	00030238 	.word	0x00030238

000b4ed4 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b4ed4:	b508      	push	{r3, lr}
   b4ed6:	4b02      	ldr	r3, [pc, #8]	; (b4ee0 <sock_recv+0xc>)
   b4ed8:	681b      	ldr	r3, [r3, #0]
   b4eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4edc:	9301      	str	r3, [sp, #4]
   b4ede:	bd08      	pop	{r3, pc}
   b4ee0:	00030238 	.word	0x00030238

000b4ee4 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b4ee4:	b508      	push	{r3, lr}
   b4ee6:	4b02      	ldr	r3, [pc, #8]	; (b4ef0 <sock_send+0xc>)
   b4ee8:	681b      	ldr	r3, [r3, #0]
   b4eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4eec:	9301      	str	r3, [sp, #4]
   b4eee:	bd08      	pop	{r3, pc}
   b4ef0:	00030238 	.word	0x00030238

000b4ef4 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b4ef4:	b508      	push	{r3, lr}
   b4ef6:	4b02      	ldr	r3, [pc, #8]	; (b4f00 <sock_socket+0xc>)
   b4ef8:	681b      	ldr	r3, [r3, #0]
   b4efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4efc:	9301      	str	r3, [sp, #4]
   b4efe:	bd08      	pop	{r3, pc}
   b4f00:	00030238 	.word	0x00030238

000b4f04 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4f04:	b508      	push	{r3, lr}
   b4f06:	4b02      	ldr	r3, [pc, #8]	; (b4f10 <HAL_USB_USART_Init+0xc>)
   b4f08:	681b      	ldr	r3, [r3, #0]
   b4f0a:	681b      	ldr	r3, [r3, #0]
   b4f0c:	9301      	str	r3, [sp, #4]
   b4f0e:	bd08      	pop	{r3, pc}
   b4f10:	0003024c 	.word	0x0003024c

000b4f14 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4f14:	b508      	push	{r3, lr}
   b4f16:	4b02      	ldr	r3, [pc, #8]	; (b4f20 <HAL_USB_USART_Begin+0xc>)
   b4f18:	681b      	ldr	r3, [r3, #0]
   b4f1a:	685b      	ldr	r3, [r3, #4]
   b4f1c:	9301      	str	r3, [sp, #4]
   b4f1e:	bd08      	pop	{r3, pc}
   b4f20:	0003024c 	.word	0x0003024c

000b4f24 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b4f24:	b508      	push	{r3, lr}
   b4f26:	4b02      	ldr	r3, [pc, #8]	; (b4f30 <HAL_USB_USART_End+0xc>)
   b4f28:	681b      	ldr	r3, [r3, #0]
   b4f2a:	689b      	ldr	r3, [r3, #8]
   b4f2c:	9301      	str	r3, [sp, #4]
   b4f2e:	bd08      	pop	{r3, pc}
   b4f30:	0003024c 	.word	0x0003024c

000b4f34 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4f34:	b508      	push	{r3, lr}
   b4f36:	4b02      	ldr	r3, [pc, #8]	; (b4f40 <HAL_USB_USART_Available_Data+0xc>)
   b4f38:	681b      	ldr	r3, [r3, #0]
   b4f3a:	691b      	ldr	r3, [r3, #16]
   b4f3c:	9301      	str	r3, [sp, #4]
   b4f3e:	bd08      	pop	{r3, pc}
   b4f40:	0003024c 	.word	0x0003024c

000b4f44 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4f44:	b508      	push	{r3, lr}
   b4f46:	4b02      	ldr	r3, [pc, #8]	; (b4f50 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4f48:	681b      	ldr	r3, [r3, #0]
   b4f4a:	695b      	ldr	r3, [r3, #20]
   b4f4c:	9301      	str	r3, [sp, #4]
   b4f4e:	bd08      	pop	{r3, pc}
   b4f50:	0003024c 	.word	0x0003024c

000b4f54 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4f54:	b508      	push	{r3, lr}
   b4f56:	4b02      	ldr	r3, [pc, #8]	; (b4f60 <HAL_USB_USART_Receive_Data+0xc>)
   b4f58:	681b      	ldr	r3, [r3, #0]
   b4f5a:	699b      	ldr	r3, [r3, #24]
   b4f5c:	9301      	str	r3, [sp, #4]
   b4f5e:	bd08      	pop	{r3, pc}
   b4f60:	0003024c 	.word	0x0003024c

000b4f64 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4f64:	b508      	push	{r3, lr}
   b4f66:	4b02      	ldr	r3, [pc, #8]	; (b4f70 <HAL_USB_USART_Send_Data+0xc>)
   b4f68:	681b      	ldr	r3, [r3, #0]
   b4f6a:	69db      	ldr	r3, [r3, #28]
   b4f6c:	9301      	str	r3, [sp, #4]
   b4f6e:	bd08      	pop	{r3, pc}
   b4f70:	0003024c 	.word	0x0003024c

000b4f74 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4f74:	b508      	push	{r3, lr}
   b4f76:	4b02      	ldr	r3, [pc, #8]	; (b4f80 <HAL_USB_USART_Flush_Data+0xc>)
   b4f78:	681b      	ldr	r3, [r3, #0]
   b4f7a:	6a1b      	ldr	r3, [r3, #32]
   b4f7c:	9301      	str	r3, [sp, #4]
   b4f7e:	bd08      	pop	{r3, pc}
   b4f80:	0003024c 	.word	0x0003024c

000b4f84 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4f84:	b508      	push	{r3, lr}
   b4f86:	4b02      	ldr	r3, [pc, #8]	; (b4f90 <panic_+0xc>)
   b4f88:	681b      	ldr	r3, [r3, #0]
   b4f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4f8c:	9301      	str	r3, [sp, #4]
   b4f8e:	bd08      	pop	{r3, pc}
   b4f90:	00030260 	.word	0x00030260

000b4f94 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4f94:	b508      	push	{r3, lr}
   b4f96:	4b02      	ldr	r3, [pc, #8]	; (b4fa0 <log_message+0xc>)
   b4f98:	681b      	ldr	r3, [r3, #0]
   b4f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4f9c:	9301      	str	r3, [sp, #4]
   b4f9e:	bd08      	pop	{r3, pc}
   b4fa0:	00030260 	.word	0x00030260

000b4fa4 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b4fa4:	b508      	push	{r3, lr}
   b4fa6:	4b02      	ldr	r3, [pc, #8]	; (b4fb0 <log_message_v+0xc>)
   b4fa8:	681b      	ldr	r3, [r3, #0]
   b4faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4fac:	9301      	str	r3, [sp, #4]
   b4fae:	bd08      	pop	{r3, pc}
   b4fb0:	00030260 	.word	0x00030260

000b4fb4 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b4fb4:	b508      	push	{r3, lr}
   b4fb6:	4b02      	ldr	r3, [pc, #8]	; (b4fc0 <log_level_name+0xc>)
   b4fb8:	681b      	ldr	r3, [r3, #0]
   b4fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b4fbc:	9301      	str	r3, [sp, #4]
   b4fbe:	bd08      	pop	{r3, pc}
   b4fc0:	00030260 	.word	0x00030260

000b4fc4 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b4fc4:	b508      	push	{r3, lr}
   b4fc6:	4b02      	ldr	r3, [pc, #8]	; (b4fd0 <log_set_callbacks+0xc>)
   b4fc8:	681b      	ldr	r3, [r3, #0]
   b4fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b4fcc:	9301      	str	r3, [sp, #4]
   b4fce:	bd08      	pop	{r3, pc}
   b4fd0:	00030260 	.word	0x00030260

000b4fd4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4fd4:	b508      	push	{r3, lr}
   b4fd6:	4b02      	ldr	r3, [pc, #8]	; (b4fe0 <set_system_mode+0xc>)
   b4fd8:	681b      	ldr	r3, [r3, #0]
   b4fda:	685b      	ldr	r3, [r3, #4]
   b4fdc:	9301      	str	r3, [sp, #4]
   b4fde:	bd08      	pop	{r3, pc}
   b4fe0:	00030220 	.word	0x00030220

000b4fe4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4fe4:	b508      	push	{r3, lr}
   b4fe6:	4b02      	ldr	r3, [pc, #8]	; (b4ff0 <system_thread_set_state+0xc>)
   b4fe8:	681b      	ldr	r3, [r3, #0]
   b4fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4fec:	9301      	str	r3, [sp, #4]
   b4fee:	bd08      	pop	{r3, pc}
   b4ff0:	00030220 	.word	0x00030220

000b4ff4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4ff4:	b508      	push	{r3, lr}
   b4ff6:	4b03      	ldr	r3, [pc, #12]	; (b5004 <system_ctrl_set_app_request_handler+0x10>)
   b4ff8:	681b      	ldr	r3, [r3, #0]
   b4ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4ffe:	9301      	str	r3, [sp, #4]
   b5000:	bd08      	pop	{r3, pc}
   b5002:	0000      	.short	0x0000
   b5004:	00030220 	.word	0x00030220

000b5008 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5008:	b508      	push	{r3, lr}
   b500a:	4b03      	ldr	r3, [pc, #12]	; (b5018 <system_ctrl_set_result+0x10>)
   b500c:	681b      	ldr	r3, [r3, #0]
   b500e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5012:	9301      	str	r3, [sp, #4]
   b5014:	bd08      	pop	{r3, pc}
   b5016:	0000      	.short	0x0000
   b5018:	00030220 	.word	0x00030220

000b501c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b501c:	b508      	push	{r3, lr}
   b501e:	4b02      	ldr	r3, [pc, #8]	; (b5028 <network_connect+0xc>)
   b5020:	681b      	ldr	r3, [r3, #0]
   b5022:	685b      	ldr	r3, [r3, #4]
   b5024:	9301      	str	r3, [sp, #4]
   b5026:	bd08      	pop	{r3, pc}
   b5028:	00030240 	.word	0x00030240

000b502c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b502c:	b508      	push	{r3, lr}
   b502e:	4b02      	ldr	r3, [pc, #8]	; (b5038 <network_connecting+0xc>)
   b5030:	681b      	ldr	r3, [r3, #0]
   b5032:	689b      	ldr	r3, [r3, #8]
   b5034:	9301      	str	r3, [sp, #4]
   b5036:	bd08      	pop	{r3, pc}
   b5038:	00030240 	.word	0x00030240

000b503c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b503c:	b508      	push	{r3, lr}
   b503e:	4b02      	ldr	r3, [pc, #8]	; (b5048 <network_disconnect+0xc>)
   b5040:	681b      	ldr	r3, [r3, #0]
   b5042:	68db      	ldr	r3, [r3, #12]
   b5044:	9301      	str	r3, [sp, #4]
   b5046:	bd08      	pop	{r3, pc}
   b5048:	00030240 	.word	0x00030240

000b504c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b504c:	b508      	push	{r3, lr}
   b504e:	4b02      	ldr	r3, [pc, #8]	; (b5058 <network_ready+0xc>)
   b5050:	681b      	ldr	r3, [r3, #0]
   b5052:	691b      	ldr	r3, [r3, #16]
   b5054:	9301      	str	r3, [sp, #4]
   b5056:	bd08      	pop	{r3, pc}
   b5058:	00030240 	.word	0x00030240

000b505c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b505c:	b508      	push	{r3, lr}
   b505e:	4b02      	ldr	r3, [pc, #8]	; (b5068 <network_on+0xc>)
   b5060:	681b      	ldr	r3, [r3, #0]
   b5062:	695b      	ldr	r3, [r3, #20]
   b5064:	9301      	str	r3, [sp, #4]
   b5066:	bd08      	pop	{r3, pc}
   b5068:	00030240 	.word	0x00030240

000b506c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b506c:	b508      	push	{r3, lr}
   b506e:	4b02      	ldr	r3, [pc, #8]	; (b5078 <network_off+0xc>)
   b5070:	681b      	ldr	r3, [r3, #0]
   b5072:	699b      	ldr	r3, [r3, #24]
   b5074:	9301      	str	r3, [sp, #4]
   b5076:	bd08      	pop	{r3, pc}
   b5078:	00030240 	.word	0x00030240

000b507c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b507c:	b508      	push	{r3, lr}
   b507e:	4b02      	ldr	r3, [pc, #8]	; (b5088 <network_listen+0xc>)
   b5080:	681b      	ldr	r3, [r3, #0]
   b5082:	69db      	ldr	r3, [r3, #28]
   b5084:	9301      	str	r3, [sp, #4]
   b5086:	bd08      	pop	{r3, pc}
   b5088:	00030240 	.word	0x00030240

000b508c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b508c:	b508      	push	{r3, lr}
   b508e:	4b02      	ldr	r3, [pc, #8]	; (b5098 <network_listening+0xc>)
   b5090:	681b      	ldr	r3, [r3, #0]
   b5092:	6a1b      	ldr	r3, [r3, #32]
   b5094:	9301      	str	r3, [sp, #4]
   b5096:	bd08      	pop	{r3, pc}
   b5098:	00030240 	.word	0x00030240

000b509c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b509c:	b508      	push	{r3, lr}
   b509e:	4b02      	ldr	r3, [pc, #8]	; (b50a8 <network_set_listen_timeout+0xc>)
   b50a0:	681b      	ldr	r3, [r3, #0]
   b50a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b50a4:	9301      	str	r3, [sp, #4]
   b50a6:	bd08      	pop	{r3, pc}
   b50a8:	00030240 	.word	0x00030240

000b50ac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b50ac:	b508      	push	{r3, lr}
   b50ae:	4b02      	ldr	r3, [pc, #8]	; (b50b8 <network_get_listen_timeout+0xc>)
   b50b0:	681b      	ldr	r3, [r3, #0]
   b50b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b50b4:	9301      	str	r3, [sp, #4]
   b50b6:	bd08      	pop	{r3, pc}
   b50b8:	00030240 	.word	0x00030240

000b50bc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b50bc:	b508      	push	{r3, lr}
   b50be:	4b02      	ldr	r3, [pc, #8]	; (b50c8 <network_is_on+0xc>)
   b50c0:	681b      	ldr	r3, [r3, #0]
   b50c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b50c4:	9301      	str	r3, [sp, #4]
   b50c6:	bd08      	pop	{r3, pc}
   b50c8:	00030240 	.word	0x00030240

000b50cc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b50cc:	b508      	push	{r3, lr}
   b50ce:	4b02      	ldr	r3, [pc, #8]	; (b50d8 <network_is_off+0xc>)
   b50d0:	681b      	ldr	r3, [r3, #0]
   b50d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b50d4:	9301      	str	r3, [sp, #4]
   b50d6:	bd08      	pop	{r3, pc}
   b50d8:	00030240 	.word	0x00030240

000b50dc <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b50dc:	b508      	push	{r3, lr}
   b50de:	4b02      	ldr	r3, [pc, #8]	; (b50e8 <spark_deviceID+0xc>)
   b50e0:	681b      	ldr	r3, [r3, #0]
   b50e2:	69db      	ldr	r3, [r3, #28]
   b50e4:	9301      	str	r3, [sp, #4]
   b50e6:	bd08      	pop	{r3, pc}
   b50e8:	00030244 	.word	0x00030244

000b50ec <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b50ec:	b508      	push	{r3, lr}
   b50ee:	4b02      	ldr	r3, [pc, #8]	; (b50f8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b50f0:	681b      	ldr	r3, [r3, #0]
   b50f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b50f4:	9301      	str	r3, [sp, #4]
   b50f6:	bd08      	pop	{r3, pc}
   b50f8:	00030244 	.word	0x00030244

000b50fc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b50fc:	b508      	push	{r3, lr}
   b50fe:	4b02      	ldr	r3, [pc, #8]	; (b5108 <malloc+0xc>)
   b5100:	681b      	ldr	r3, [r3, #0]
   b5102:	681b      	ldr	r3, [r3, #0]
   b5104:	9301      	str	r3, [sp, #4]
   b5106:	bd08      	pop	{r3, pc}
   b5108:	0003021c 	.word	0x0003021c

000b510c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b510c:	b508      	push	{r3, lr}
   b510e:	4b02      	ldr	r3, [pc, #8]	; (b5118 <free+0xc>)
   b5110:	681b      	ldr	r3, [r3, #0]
   b5112:	685b      	ldr	r3, [r3, #4]
   b5114:	9301      	str	r3, [sp, #4]
   b5116:	bd08      	pop	{r3, pc}
   b5118:	0003021c 	.word	0x0003021c

000b511c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b511c:	b508      	push	{r3, lr}
   b511e:	4b02      	ldr	r3, [pc, #8]	; (b5128 <realloc+0xc>)
   b5120:	681b      	ldr	r3, [r3, #0]
   b5122:	689b      	ldr	r3, [r3, #8]
   b5124:	9301      	str	r3, [sp, #4]
   b5126:	bd08      	pop	{r3, pc}
   b5128:	0003021c 	.word	0x0003021c

000b512c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b512c:	b508      	push	{r3, lr}
   b512e:	4b02      	ldr	r3, [pc, #8]	; (b5138 <vsnprintf+0xc>)
   b5130:	681b      	ldr	r3, [r3, #0]
   b5132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5134:	9301      	str	r3, [sp, #4]
   b5136:	bd08      	pop	{r3, pc}
   b5138:	0003021c 	.word	0x0003021c

000b513c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b513c:	b508      	push	{r3, lr}
   b513e:	4b02      	ldr	r3, [pc, #8]	; (b5148 <abort+0xc>)
   b5140:	681b      	ldr	r3, [r3, #0]
   b5142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5144:	9301      	str	r3, [sp, #4]
   b5146:	bd08      	pop	{r3, pc}
   b5148:	0003021c 	.word	0x0003021c

000b514c <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b514c:	b508      	push	{r3, lr}
   b514e:	4b02      	ldr	r3, [pc, #8]	; (b5158 <__errno+0xc>)
   b5150:	681b      	ldr	r3, [r3, #0]
   b5152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5154:	9301      	str	r3, [sp, #4]
   b5156:	bd08      	pop	{r3, pc}
   b5158:	0003021c 	.word	0x0003021c

000b515c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b515c:	b508      	push	{r3, lr}
   b515e:	4b02      	ldr	r3, [pc, #8]	; (b5168 <__assert_func+0xc>)
   b5160:	681b      	ldr	r3, [r3, #0]
   b5162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5164:	9301      	str	r3, [sp, #4]
   b5166:	bd08      	pop	{r3, pc}
   b5168:	0003021c 	.word	0x0003021c

000b516c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b516c:	b508      	push	{r3, lr}
   b516e:	4b02      	ldr	r3, [pc, #8]	; (b5178 <newlib_impure_ptr_callback+0xc>)
   b5170:	681b      	ldr	r3, [r3, #0]
   b5172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5174:	9301      	str	r3, [sp, #4]
   b5176:	bd08      	pop	{r3, pc}
   b5178:	0003021c 	.word	0x0003021c

000b517c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b517c:	2200      	movs	r2, #0
   b517e:	6840      	ldr	r0, [r0, #4]
   b5180:	4611      	mov	r1, r2
   b5182:	f7ff bf83 	b.w	b508c <network_listening>

000b5186 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5186:	2200      	movs	r2, #0
   b5188:	6840      	ldr	r0, [r0, #4]
   b518a:	4611      	mov	r1, r2
   b518c:	f7ff bf8e 	b.w	b50ac <network_get_listen_timeout>

000b5190 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5190:	6840      	ldr	r0, [r0, #4]
   b5192:	2200      	movs	r2, #0
   b5194:	f7ff bf82 	b.w	b509c <network_set_listen_timeout>

000b5198 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5198:	6840      	ldr	r0, [r0, #4]
   b519a:	2200      	movs	r2, #0
   b519c:	f081 0101 	eor.w	r1, r1, #1
   b51a0:	f7ff bf6c 	b.w	b507c <network_listen>

000b51a4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b51a4:	2300      	movs	r3, #0
   b51a6:	6840      	ldr	r0, [r0, #4]
   b51a8:	461a      	mov	r2, r3
   b51aa:	4619      	mov	r1, r3
   b51ac:	f7ff bf5e 	b.w	b506c <network_off>

000b51b0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b51b0:	2300      	movs	r3, #0
   b51b2:	6840      	ldr	r0, [r0, #4]
   b51b4:	461a      	mov	r2, r3
   b51b6:	4619      	mov	r1, r3
   b51b8:	f7ff bf50 	b.w	b505c <network_on>

000b51bc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b51bc:	2200      	movs	r2, #0
   b51be:	6840      	ldr	r0, [r0, #4]
   b51c0:	4611      	mov	r1, r2
   b51c2:	f7ff bf43 	b.w	b504c <network_ready>

000b51c6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b51c6:	2200      	movs	r2, #0
   b51c8:	6840      	ldr	r0, [r0, #4]
   b51ca:	4611      	mov	r1, r2
   b51cc:	f7ff bf2e 	b.w	b502c <network_connecting>

000b51d0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b51d0:	6840      	ldr	r0, [r0, #4]
   b51d2:	2200      	movs	r2, #0
   b51d4:	2102      	movs	r1, #2
   b51d6:	f7ff bf31 	b.w	b503c <network_disconnect>

000b51da <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b51da:	2300      	movs	r3, #0
   b51dc:	6840      	ldr	r0, [r0, #4]
   b51de:	461a      	mov	r2, r3
   b51e0:	f7ff bf1c 	b.w	b501c <network_connect>

000b51e4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b51e4:	4b02      	ldr	r3, [pc, #8]	; (b51f0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b51e6:	2203      	movs	r2, #3
   b51e8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b51ea:	4a02      	ldr	r2, [pc, #8]	; (b51f4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b51ec:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b51ee:	4770      	bx	lr
   b51f0:	2003e6a0 	.word	0x2003e6a0
   b51f4:	000b9334 	.word	0x000b9334

000b51f8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b51f8:	4b05      	ldr	r3, [pc, #20]	; (b5210 <_GLOBAL__sub_I_System+0x18>)
   b51fa:	2202      	movs	r2, #2
   b51fc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b51fe:	4b05      	ldr	r3, [pc, #20]	; (b5214 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5200:	4a05      	ldr	r2, [pc, #20]	; (b5218 <_GLOBAL__sub_I_System+0x20>)
   b5202:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5204:	2000      	movs	r0, #0
   b5206:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b520a:	f7ff bee3 	b.w	b4fd4 <set_system_mode>
   b520e:	bf00      	nop
   b5210:	2003e6b4 	.word	0x2003e6b4
   b5214:	2003e6a8 	.word	0x2003e6a8
   b5218:	ffff0000 	.word	0xffff0000

000b521c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b521c:	b510      	push	{r4, lr}
   b521e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b5220:	f7fe ff06 	bl	b4030 <strlen>
   b5224:	3801      	subs	r0, #1
   b5226:	1823      	adds	r3, r4, r0
   b5228:	4620      	mov	r0, r4
	while(i<j){
   b522a:	4283      	cmp	r3, r0
   b522c:	d906      	bls.n	b523c <_Z11str_reversePc+0x20>
		c = *i;
   b522e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b5230:	7819      	ldrb	r1, [r3, #0]
   b5232:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b5236:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b523a:	e7f6      	b.n	b522a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b523c:	bd10      	pop	{r4, pc}

000b523e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b523e:	b570      	push	{r4, r5, r6, lr}
   b5240:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b5242:	1e91      	subs	r1, r2, #2
   b5244:	2922      	cmp	r1, #34	; 0x22
   b5246:	d81d      	bhi.n	b5284 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b5248:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b524a:	b930      	cbnz	r0, b525a <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b524c:	4423      	add	r3, r4
            *ptr++ = '0';
   b524e:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b5250:	429d      	cmp	r5, r3
   b5252:	d210      	bcs.n	b5276 <ultoa+0x38>
            *ptr++ = '0';
   b5254:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b5258:	e7fa      	b.n	b5250 <ultoa+0x12>
            result.quot = a/radix;
   b525a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b525e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b5262:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b5264:	2809      	cmp	r0, #9
                *ptr += '0';
   b5266:	bf94      	ite	ls
   b5268:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b526a:	3157      	addhi	r1, #87	; 0x57
   b526c:	b2c9      	uxtb	r1, r1
   b526e:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b5272:	4630      	mov	r0, r6
	while(a){
   b5274:	e7e9      	b.n	b524a <ultoa+0xc>

	*ptr = '\0';
   b5276:	2300      	movs	r3, #0
	str_reverse(buffer);
   b5278:	4620      	mov	r0, r4
	*ptr = '\0';
   b527a:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b527c:	f7ff ffce 	bl	b521c <_Z11str_reversePc>
	return buffer;
   b5280:	4620      	mov	r0, r4
}
   b5282:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b5284:	2000      	movs	r0, #0
   b5286:	e7fc      	b.n	b5282 <ultoa+0x44>

000b5288 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b5288:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b528a:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b528c:	460c      	mov	r4, r1
   b528e:	4615      	mov	r5, r2
	if(a<0){
   b5290:	da0e      	bge.n	b52b0 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b5292:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b5296:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b529a:	bf14      	ite	ne
   b529c:	4258      	negne	r0, r3
   b529e:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b52a0:	2301      	movs	r3, #1
		*buffer = '-';
   b52a2:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b52a4:	462a      	mov	r2, r5
   b52a6:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b52a8:	f7ff ffc9 	bl	b523e <ultoa>
	}
	return buffer;
}
   b52ac:	4620      	mov	r0, r4
   b52ae:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b52b0:	2301      	movs	r3, #1
   b52b2:	e7f9      	b.n	b52a8 <itoa+0x20>

000b52b4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b52b4:	b510      	push	{r4, lr}
   b52b6:	4604      	mov	r4, r0
{
	free(buffer);
   b52b8:	6800      	ldr	r0, [r0, #0]
   b52ba:	f7ff ff27 	bl	b510c <free>
}
   b52be:	4620      	mov	r0, r4
   b52c0:	bd10      	pop	{r4, pc}

000b52c2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b52c2:	b510      	push	{r4, lr}
   b52c4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b52c6:	6800      	ldr	r0, [r0, #0]
   b52c8:	b108      	cbz	r0, b52ce <_ZN6String10invalidateEv+0xc>
   b52ca:	f7ff ff1f 	bl	b510c <free>
	buffer = NULL;
   b52ce:	2300      	movs	r3, #0
	capacity = len = 0;
   b52d0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b52d4:	6023      	str	r3, [r4, #0]
}
   b52d6:	bd10      	pop	{r4, pc}

000b52d8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b52d8:	b538      	push	{r3, r4, r5, lr}
   b52da:	4604      	mov	r4, r0
   b52dc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b52de:	6800      	ldr	r0, [r0, #0]
   b52e0:	3101      	adds	r1, #1
   b52e2:	f7ff ff1b 	bl	b511c <realloc>
	if (newbuffer) {
   b52e6:	b110      	cbz	r0, b52ee <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b52e8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b52ec:	2001      	movs	r0, #1
	}
	return 0;
}
   b52ee:	bd38      	pop	{r3, r4, r5, pc}

000b52f0 <_ZN6String7reserveEj>:
{
   b52f0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b52f2:	6803      	ldr	r3, [r0, #0]
{
   b52f4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b52f6:	b123      	cbz	r3, b5302 <_ZN6String7reserveEj+0x12>
   b52f8:	6843      	ldr	r3, [r0, #4]
   b52fa:	428b      	cmp	r3, r1
   b52fc:	d301      	bcc.n	b5302 <_ZN6String7reserveEj+0x12>
   b52fe:	2001      	movs	r0, #1
}
   b5300:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5302:	4620      	mov	r0, r4
   b5304:	f7ff ffe8 	bl	b52d8 <_ZN6String12changeBufferEj>
   b5308:	2800      	cmp	r0, #0
   b530a:	d0f9      	beq.n	b5300 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b530c:	68a3      	ldr	r3, [r4, #8]
   b530e:	2b00      	cmp	r3, #0
   b5310:	d1f5      	bne.n	b52fe <_ZN6String7reserveEj+0xe>
   b5312:	6822      	ldr	r2, [r4, #0]
   b5314:	7013      	strb	r3, [r2, #0]
   b5316:	e7f2      	b.n	b52fe <_ZN6String7reserveEj+0xe>

000b5318 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5318:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b531a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b531c:	4611      	mov	r1, r2
   b531e:	9201      	str	r2, [sp, #4]
{
   b5320:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b5322:	f7ff ffe5 	bl	b52f0 <_ZN6String7reserveEj>
   b5326:	9a01      	ldr	r2, [sp, #4]
   b5328:	b928      	cbnz	r0, b5336 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b532a:	4620      	mov	r0, r4
   b532c:	f7ff ffc9 	bl	b52c2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5330:	4620      	mov	r0, r4
   b5332:	b003      	add	sp, #12
   b5334:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5336:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5338:	4629      	mov	r1, r5
   b533a:	6820      	ldr	r0, [r4, #0]
   b533c:	f003 fdd8 	bl	b8ef0 <memcpy>
	buffer[len] = 0;
   b5340:	6822      	ldr	r2, [r4, #0]
   b5342:	68a3      	ldr	r3, [r4, #8]
   b5344:	2100      	movs	r1, #0
   b5346:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5348:	e7f2      	b.n	b5330 <_ZN6String4copyEPKcj+0x18>

000b534a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b534a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b534c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b534e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5352:	4604      	mov	r4, r0
	len = 0;
   b5354:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5356:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5358:	b141      	cbz	r1, b536c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b535a:	4608      	mov	r0, r1
   b535c:	9101      	str	r1, [sp, #4]
   b535e:	f7fe fe67 	bl	b4030 <strlen>
   b5362:	9901      	ldr	r1, [sp, #4]
   b5364:	4602      	mov	r2, r0
   b5366:	4620      	mov	r0, r4
   b5368:	f7ff ffd6 	bl	b5318 <_ZN6String4copyEPKcj>
}
   b536c:	4620      	mov	r0, r4
   b536e:	b002      	add	sp, #8
   b5370:	bd10      	pop	{r4, pc}

000b5372 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b5372:	b538      	push	{r3, r4, r5, lr}
   b5374:	4605      	mov	r5, r0
	if (buffer) {
   b5376:	6800      	ldr	r0, [r0, #0]
{
   b5378:	460c      	mov	r4, r1
	if (buffer) {
   b537a:	b168      	cbz	r0, b5398 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b537c:	686a      	ldr	r2, [r5, #4]
   b537e:	688b      	ldr	r3, [r1, #8]
   b5380:	429a      	cmp	r2, r3
   b5382:	d307      	bcc.n	b5394 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b5384:	6809      	ldr	r1, [r1, #0]
   b5386:	f003 fe28 	bl	b8fda <strcpy>
			len = rhs.len;
   b538a:	68a3      	ldr	r3, [r4, #8]
   b538c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b538e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b5390:	60a3      	str	r3, [r4, #8]
}
   b5392:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b5394:	f7ff feba 	bl	b510c <free>
	buffer = rhs.buffer;
   b5398:	6823      	ldr	r3, [r4, #0]
   b539a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b539c:	6863      	ldr	r3, [r4, #4]
   b539e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b53a0:	68a3      	ldr	r3, [r4, #8]
   b53a2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b53a4:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b53a6:	e9c4 3300 	strd	r3, r3, [r4]
   b53aa:	e7f1      	b.n	b5390 <_ZN6String4moveERS_+0x1e>

000b53ac <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b53ac:	b510      	push	{r4, lr}
	buffer = NULL;
   b53ae:	2300      	movs	r3, #0
	capacity = 0;
   b53b0:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b53b4:	4604      	mov	r4, r0
	len = 0;
   b53b6:	6083      	str	r3, [r0, #8]
	flags = 0;
   b53b8:	7303      	strb	r3, [r0, #12]
	move(rval);
   b53ba:	f7ff ffda 	bl	b5372 <_ZN6String4moveERS_>
}
   b53be:	4620      	mov	r0, r4
   b53c0:	bd10      	pop	{r4, pc}

000b53c2 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b53c2:	4288      	cmp	r0, r1
{
   b53c4:	b510      	push	{r4, lr}
   b53c6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b53c8:	d005      	beq.n	b53d6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b53ca:	680b      	ldr	r3, [r1, #0]
   b53cc:	b12b      	cbz	r3, b53da <_ZN6StringaSERKS_+0x18>
   b53ce:	688a      	ldr	r2, [r1, #8]
   b53d0:	4619      	mov	r1, r3
   b53d2:	f7ff ffa1 	bl	b5318 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b53d6:	4620      	mov	r0, r4
   b53d8:	bd10      	pop	{r4, pc}
	else invalidate();
   b53da:	f7ff ff72 	bl	b52c2 <_ZN6String10invalidateEv>
   b53de:	e7fa      	b.n	b53d6 <_ZN6StringaSERKS_+0x14>

000b53e0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b53e0:	b510      	push	{r4, lr}
	buffer = NULL;
   b53e2:	2300      	movs	r3, #0
String::String(const String &value)
   b53e4:	4604      	mov	r4, r0
	capacity = 0;
   b53e6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b53ea:	6083      	str	r3, [r0, #8]
	flags = 0;
   b53ec:	7303      	strb	r3, [r0, #12]
	*this = value;
   b53ee:	f7ff ffe8 	bl	b53c2 <_ZN6StringaSERKS_>
}
   b53f2:	4620      	mov	r0, r4
   b53f4:	bd10      	pop	{r4, pc}

000b53f6 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b53f6:	4288      	cmp	r0, r1
{
   b53f8:	b510      	push	{r4, lr}
   b53fa:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b53fc:	d001      	beq.n	b5402 <_ZN6StringaSEOS_+0xc>
   b53fe:	f7ff ffb8 	bl	b5372 <_ZN6String4moveERS_>
	return *this;
}
   b5402:	4620      	mov	r0, r4
   b5404:	bd10      	pop	{r4, pc}

000b5406 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b5406:	b513      	push	{r0, r1, r4, lr}
   b5408:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b540a:	b159      	cbz	r1, b5424 <_ZN6StringaSEPKc+0x1e>
   b540c:	4608      	mov	r0, r1
   b540e:	9101      	str	r1, [sp, #4]
   b5410:	f7fe fe0e 	bl	b4030 <strlen>
   b5414:	9901      	ldr	r1, [sp, #4]
   b5416:	4602      	mov	r2, r0
   b5418:	4620      	mov	r0, r4
   b541a:	f7ff ff7d 	bl	b5318 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b541e:	4620      	mov	r0, r4
   b5420:	b002      	add	sp, #8
   b5422:	bd10      	pop	{r4, pc}
	else invalidate();
   b5424:	f7ff ff4d 	bl	b52c2 <_ZN6String10invalidateEv>
   b5428:	e7f9      	b.n	b541e <_ZN6StringaSEPKc+0x18>

000b542a <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b542a:	b510      	push	{r4, lr}
   b542c:	4604      	mov	r4, r0
   b542e:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b5430:	2300      	movs	r3, #0
	capacity = 0;
   b5432:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b5436:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b5438:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b543a:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b543c:	a901      	add	r1, sp, #4
   b543e:	f7ff ff23 	bl	b5288 <itoa>
	*this = buf;
   b5442:	a901      	add	r1, sp, #4
   b5444:	4620      	mov	r0, r4
   b5446:	f7ff ffde 	bl	b5406 <_ZN6StringaSEPKc>
}
   b544a:	4620      	mov	r0, r4
   b544c:	b00a      	add	sp, #40	; 0x28
   b544e:	bd10      	pop	{r4, pc}

000b5450 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b5450:	b570      	push	{r4, r5, r6, lr}
   b5452:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b5454:	460e      	mov	r6, r1
   b5456:	b909      	cbnz	r1, b545c <_ZN6String6concatEPKcj+0xc>
   b5458:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b545a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b545c:	b16a      	cbz	r2, b547a <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b545e:	6884      	ldr	r4, [r0, #8]
   b5460:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b5462:	4621      	mov	r1, r4
   b5464:	f7ff ff44 	bl	b52f0 <_ZN6String7reserveEj>
   b5468:	2800      	cmp	r0, #0
   b546a:	d0f5      	beq.n	b5458 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b546c:	6828      	ldr	r0, [r5, #0]
   b546e:	68ab      	ldr	r3, [r5, #8]
   b5470:	4631      	mov	r1, r6
   b5472:	4418      	add	r0, r3
   b5474:	f003 fdb1 	bl	b8fda <strcpy>
	len = newlen;
   b5478:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b547a:	2001      	movs	r0, #1
   b547c:	e7ed      	b.n	b545a <_ZN6String6concatEPKcj+0xa>

000b547e <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b547e:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b5480:	2300      	movs	r3, #0
	buf[0] = c;
   b5482:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b5486:	2201      	movs	r2, #1
   b5488:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b548a:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b548e:	f7ff ffdf 	bl	b5450 <_ZN6String6concatEPKcj>
}
   b5492:	b003      	add	sp, #12
   b5494:	f85d fb04 	ldr.w	pc, [sp], #4

000b5498 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b5498:	6802      	ldr	r2, [r0, #0]
{
   b549a:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b549c:	6809      	ldr	r1, [r1, #0]
   b549e:	b162      	cbz	r2, b54ba <_ZNK6String9compareToERKS_+0x22>
   b54a0:	b941      	cbnz	r1, b54b4 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b54a2:	6880      	ldr	r0, [r0, #8]
   b54a4:	b160      	cbz	r0, b54c0 <_ZNK6String9compareToERKS_+0x28>
   b54a6:	7810      	ldrb	r0, [r2, #0]
   b54a8:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b54aa:	6898      	ldr	r0, [r3, #8]
   b54ac:	b140      	cbz	r0, b54c0 <_ZNK6String9compareToERKS_+0x28>
   b54ae:	7809      	ldrb	r1, [r1, #0]
   b54b0:	4248      	negs	r0, r1
   b54b2:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b54b4:	4610      	mov	r0, r2
   b54b6:	f7fe bdb1 	b.w	b401c <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b54ba:	2900      	cmp	r1, #0
   b54bc:	d1f5      	bne.n	b54aa <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b54be:	4608      	mov	r0, r1
}
   b54c0:	4770      	bx	lr

000b54c2 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b54c2:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b54c4:	6882      	ldr	r2, [r0, #8]
   b54c6:	688b      	ldr	r3, [r1, #8]
   b54c8:	429a      	cmp	r2, r3
   b54ca:	d105      	bne.n	b54d8 <_ZNK6String6equalsERKS_+0x16>
   b54cc:	f7ff ffe4 	bl	b5498 <_ZNK6String9compareToERKS_>
   b54d0:	fab0 f080 	clz	r0, r0
   b54d4:	0940      	lsrs	r0, r0, #5
}
   b54d6:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b54d8:	2000      	movs	r0, #0
   b54da:	e7fc      	b.n	b54d6 <_ZNK6String6equalsERKS_+0x14>

000b54dc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
	      std::forward<_Args>(__args)...); // might throw
	}

      ~_Sp_counted_ptr_inplace() noexcept { }
   b54dc:	4770      	bx	lr
	...

000b54e0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	// Check for the fake type_info first, so we don't try to access it
	// as a real type_info object. Otherwise, check if it's the real
	// type_info for this class. With RTTI enabled we can check directly,
	// or call a library function to do it.
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
	    ||
   b54e0:	4b06      	ldr	r3, [pc, #24]	; (b54fc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b54e2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b54e4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b54e6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b54ea:	d005      	beq.n	b54f8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
#if __cpp_rtti
	    __ti == typeid(_Sp_make_shared_tag)
#else
	    _Sp_make_shared_tag::_S_eq(__ti)
   b54ec:	4608      	mov	r0, r1
   b54ee:	f003 fbcf 	bl	b8c90 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
#endif
	   )
	  return __ptr;
	return nullptr;
   b54f2:	2800      	cmp	r0, #0
   b54f4:	bf08      	it	eq
   b54f6:	2400      	moveq	r4, #0
      }
   b54f8:	4620      	mov	r0, r4
   b54fa:	bd10      	pop	{r4, pc}
   b54fc:	000b945c 	.word	0x000b945c

000b5500 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5500:	b510      	push	{r4, lr}
   b5502:	2130      	movs	r1, #48	; 0x30
   b5504:	4604      	mov	r4, r0
   b5506:	f7fe fddc 	bl	b40c2 <_ZdlPvj>
   b550a:	4620      	mov	r0, r4
   b550c:	bd10      	pop	{r4, pc}

000b550e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b550e:	2130      	movs	r1, #48	; 0x30
   b5510:	f7fe bdd7 	b.w	b40c2 <_ZdlPvj>

000b5514 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b5514:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b5516:	2500      	movs	r5, #0
   b5518:	1cec      	adds	r4, r5, #3
   b551a:	428c      	cmp	r4, r1
   b551c:	d80d      	bhi.n	b553a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b551e:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b5520:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b5522:	5d87      	ldrb	r7, [r0, r6]
   b5524:	4297      	cmp	r7, r2
   b5526:	d105      	bne.n	b5534 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b5528:	4426      	add	r6, r4
   b552a:	42b1      	cmp	r1, r6
   b552c:	d305      	bcc.n	b553a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b552e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b5530:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b5532:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b5534:	3401      	adds	r4, #1
   b5536:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b5538:	e7ee      	b.n	b5518 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b553a:	2000      	movs	r0, #0
   b553c:	e7f9      	b.n	b5532 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000b553e <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataOS3_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b553e:	b410      	push	{r4}
   b5540:	460c      	mov	r4, r1
	    return __source._M_access<_Functor*>();
   b5542:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5544:	6820      	ldr	r0, [r4, #0]
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b5546:	f85d 4b04 	ldr.w	r4, [sp], #4
   b554a:	e9d3 2100 	ldrd	r2, r1, [r3]
   b554e:	4710      	bx	r2

000b5550 <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b5550:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5552:	b538      	push	{r3, r4, r5, lr}
   b5554:	4604      	mov	r4, r0
	switch (__op)
   b5556:	d102      	bne.n	b555e <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b5558:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b555a:	6023      	str	r3, [r4, #0]
	}
   b555c:	e003      	b.n	b5566 <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b555e:	2a02      	cmp	r2, #2
   b5560:	d003      	beq.n	b556a <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b5562:	2a03      	cmp	r2, #3
   b5564:	d00d      	beq.n	b5582 <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b5566:	2000      	movs	r0, #0
   b5568:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b556a:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b556c:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b556e:	f7fe fda2 	bl	b40b6 <_Znwj>
   b5572:	4603      	mov	r3, r0
   b5574:	2800      	cmp	r0, #0
   b5576:	d0f0      	beq.n	b555a <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b5578:	e895 0003 	ldmia.w	r5, {r0, r1}
   b557c:	e883 0003 	stmia.w	r3, {r0, r1}
   b5580:	e7eb      	b.n	b555a <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b5582:	6800      	ldr	r0, [r0, #0]
   b5584:	2800      	cmp	r0, #0
   b5586:	d0ee      	beq.n	b5566 <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b5588:	2108      	movs	r1, #8
   b558a:	f7fe fd9a 	bl	b40c2 <_ZdlPvj>
   b558e:	e7ea      	b.n	b5566 <_ZNSt17_Function_handlerIFvPKN8particle13BleScanResultEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b5590 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
       *  @returns @c *this
       *
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
   b5590:	b510      	push	{r4, lr}
      {
	if (_M_manager)
   b5592:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b5594:	4604      	mov	r4, r0
	if (_M_manager)
   b5596:	b12b      	cbz	r3, b55a4 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b5598:	2203      	movs	r2, #3
   b559a:	4601      	mov	r1, r0
   b559c:	4798      	blx	r3
	    _M_manager = nullptr;
   b559e:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b55a0:	e9c4 3302 	strd	r3, r3, [r4, #8]
	  }
	return *this;
      }
   b55a4:	bd10      	pop	{r4, pc}

000b55a6 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b55a6:	b510      	push	{r4, lr}
      if (_M_manager)
   b55a8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b55aa:	4604      	mov	r4, r0
      if (_M_manager)
   b55ac:	b113      	cbz	r3, b55b4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b55ae:	2203      	movs	r2, #3
   b55b0:	4601      	mov	r1, r0
   b55b2:	4798      	blx	r3
    }
   b55b4:	4620      	mov	r0, r4
   b55b6:	bd10      	pop	{r4, pc}

000b55b8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b55b8:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b55ba:	6843      	ldr	r3, [r0, #4]
   b55bc:	3b01      	subs	r3, #1
    {
   b55be:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b55c0:	6043      	str	r3, [r0, #4]
   b55c2:	b963      	cbnz	r3, b55de <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b55c4:	6803      	ldr	r3, [r0, #0]
   b55c6:	689b      	ldr	r3, [r3, #8]
   b55c8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b55ca:	68a3      	ldr	r3, [r4, #8]
   b55cc:	3b01      	subs	r3, #1
   b55ce:	60a3      	str	r3, [r4, #8]
   b55d0:	b92b      	cbnz	r3, b55de <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b55d2:	6823      	ldr	r3, [r4, #0]
   b55d4:	4620      	mov	r0, r4
   b55d6:	68db      	ldr	r3, [r3, #12]
    }
   b55d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b55dc:	4718      	bx	r3
    }
   b55de:	bd10      	pop	{r4, pc}

000b55e0 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b55e0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b55e4:	b2da      	uxtb	r2, r3
   b55e6:	2a09      	cmp	r2, #9
   b55e8:	d801      	bhi.n	b55ee <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b55ea:	4618      	mov	r0, r3
   b55ec:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b55ee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b55f2:	2b05      	cmp	r3, #5
   b55f4:	d801      	bhi.n	b55fa <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b55f6:	3857      	subs	r0, #87	; 0x57
   b55f8:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b55fa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b55fe:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b5600:	bf94      	ite	ls
   b5602:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b5604:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b5608:	4770      	bx	lr
	...

000b560c <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b560c:	b510      	push	{r4, lr}
            locked_(false) {
   b560e:	2300      	movs	r3, #0
   b5610:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b5612:	4b04      	ldr	r3, [pc, #16]	; (b5624 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b5614:	4604      	mov	r4, r0
   b5616:	6818      	ldr	r0, [r3, #0]
   b5618:	f7ff fbd4 	bl	b4dc4 <os_mutex_recursive_lock>
        locked_ = true;
   b561c:	2301      	movs	r3, #1
   b561e:	7023      	strb	r3, [r4, #0]
    }
   b5620:	4620      	mov	r0, r4
   b5622:	bd10      	pop	{r4, pc}
   b5624:	2003e6bc 	.word	0x2003e6bc

000b5628 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b5628:	b510      	push	{r4, lr}
        if (locked_) {
   b562a:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b562c:	4604      	mov	r4, r0
        if (locked_) {
   b562e:	b11b      	cbz	r3, b5638 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b5630:	4b02      	ldr	r3, [pc, #8]	; (b563c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b5632:	6818      	ldr	r0, [r3, #0]
   b5634:	f7ff fbce 	bl	b4dd4 <os_mutex_recursive_unlock>
    }
   b5638:	4620      	mov	r0, r4
   b563a:	bd10      	pop	{r4, pc}
   b563c:	2003e6bc 	.word	0x2003e6bc

000b5640 <_ZNK8particle10BleAddressixEh>:
    if (i >= BLE_SIG_ADDR_LEN) {
   b5640:	2905      	cmp	r1, #5
    return address_.addr[i];
   b5642:	bf94      	ite	ls
   b5644:	5c40      	ldrbls	r0, [r0, r1]
        return 0;
   b5646:	2000      	movhi	r0, #0
}
   b5648:	4770      	bx	lr

000b564a <_ZN8particle10BleAddressaSERKS0_>:
    address_ = addr.address_;
   b564a:	680a      	ldr	r2, [r1, #0]
   b564c:	6002      	str	r2, [r0, #0]
   b564e:	684a      	ldr	r2, [r1, #4]
   b5650:	6042      	str	r2, [r0, #4]
}
   b5652:	4770      	bx	lr

000b5654 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b5654:	b082      	sub	sp, #8
   b5656:	4603      	mov	r3, r0
    address_ = addr;
   b5658:	6808      	ldr	r0, [r1, #0]
   b565a:	6849      	ldr	r1, [r1, #4]
   b565c:	466a      	mov	r2, sp
   b565e:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b5660:	466a      	mov	r2, sp
   b5662:	ca03      	ldmia	r2!, {r0, r1}
   b5664:	6018      	str	r0, [r3, #0]
}
   b5666:	4618      	mov	r0, r3
    address_ = addr.address_;
   b5668:	6059      	str	r1, [r3, #4]
}
   b566a:	b002      	add	sp, #8
   b566c:	4770      	bx	lr

000b566e <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b566e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b5670:	7982      	ldrb	r2, [r0, #6]
   b5672:	798b      	ldrb	r3, [r1, #6]
   b5674:	429a      	cmp	r2, r3
   b5676:	d106      	bne.n	b5686 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b5678:	2206      	movs	r2, #6
   b567a:	f003 fc29 	bl	b8ed0 <memcmp>
   b567e:	fab0 f080 	clz	r0, r0
   b5682:	0940      	lsrs	r0, r0, #5
}
   b5684:	bd08      	pop	{r3, pc}
    return false;
   b5686:	2000      	movs	r0, #0
   b5688:	e7fc      	b.n	b5684 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b568a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b568a:	f04f 33ff 	mov.w	r3, #4294967295
   b568e:	6003      	str	r3, [r0, #0]
   b5690:	8083      	strh	r3, [r0, #4]
}
   b5692:	2000      	movs	r0, #0
   b5694:	4770      	bx	lr

000b5696 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b5696:	b508      	push	{r3, lr}
   b5698:	4602      	mov	r2, r0
        : address_{} {
   b569a:	2100      	movs	r1, #0
   b569c:	6001      	str	r1, [r0, #0]
   b569e:	6041      	str	r1, [r0, #4]
    clear();
   b56a0:	f7ff fff3 	bl	b568a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b56a4:	7191      	strb	r1, [r2, #6]
}
   b56a6:	4610      	mov	r0, r2
   b56a8:	bd08      	pop	{r3, pc}
	...

000b56ac <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b56ac:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b56ae:	2301      	movs	r3, #1
   b56b0:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b56b2:	4b05      	ldr	r3, [pc, #20]	; (b56c8 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b56b4:	4602      	mov	r2, r0
   b56b6:	f103 0110 	add.w	r1, r3, #16
   b56ba:	f853 4b04 	ldr.w	r4, [r3], #4
   b56be:	f842 4b04 	str.w	r4, [r2], #4
   b56c2:	428b      	cmp	r3, r1
   b56c4:	d1f9      	bne.n	b56ba <_ZN8particle7BleUuidC1Ev+0xe>
}
   b56c6:	bd10      	pop	{r4, pc}
   b56c8:	000b924e 	.word	0x000b924e

000b56cc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b56cc:	b510      	push	{r4, lr}
    if (uuid128) {
   b56ce:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b56d0:	4604      	mov	r4, r0
    if (uuid128) {
   b56d2:	b1b1      	cbz	r1, b5702 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b56d4:	2a01      	cmp	r2, #1
   b56d6:	f101 0210 	add.w	r2, r1, #16
   b56da:	d10a      	bne.n	b56f2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b56dc:	4601      	mov	r1, r0
   b56de:	f853 0b04 	ldr.w	r0, [r3], #4
   b56e2:	f841 0b04 	str.w	r0, [r1], #4
   b56e6:	4293      	cmp	r3, r2
   b56e8:	d1f9      	bne.n	b56de <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b56ea:	2301      	movs	r3, #1
   b56ec:	6123      	str	r3, [r4, #16]
}
   b56ee:	4620      	mov	r0, r4
   b56f0:	bd10      	pop	{r4, pc}
   b56f2:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b56f4:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b56f8:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b56fc:	429a      	cmp	r2, r3
   b56fe:	d1f9      	bne.n	b56f4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b5700:	e7f3      	b.n	b56ea <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b5702:	2210      	movs	r2, #16
   b5704:	f003 fc1c 	bl	b8f40 <memset>
   b5708:	e7f1      	b.n	b56ee <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b570a <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b570a:	b538      	push	{r3, r4, r5, lr}
   b570c:	4604      	mov	r4, r0
   b570e:	460d      	mov	r5, r1
        : BleUuid() {
   b5710:	f7ff ffcc 	bl	b56ac <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b5714:	2300      	movs	r3, #0
   b5716:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b5718:	81a5      	strh	r5, [r4, #12]
}
   b571a:	4620      	mov	r0, r4
   b571c:	bd38      	pop	{r3, r4, r5, pc}

000b571e <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b571e:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b5720:	6902      	ldr	r2, [r0, #16]
   b5722:	690b      	ldr	r3, [r1, #16]
   b5724:	429a      	cmp	r2, r3
   b5726:	d106      	bne.n	b5736 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b5728:	2210      	movs	r2, #16
   b572a:	f003 fbd1 	bl	b8ed0 <memcmp>
   b572e:	fab0 f080 	clz	r0, r0
   b5732:	0940      	lsrs	r0, r0, #5
}
   b5734:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b5736:	2000      	movs	r0, #0
   b5738:	e7fc      	b.n	b5734 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b573c <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b573c:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b573e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b5742:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5744:	4b34      	ldr	r3, [pc, #208]	; (b5818 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b5746:	460c      	mov	r4, r1
   b5748:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b574a:	4602      	mov	r2, r0
   b574c:	f103 0110 	add.w	r1, r3, #16
   b5750:	f853 0b04 	ldr.w	r0, [r3], #4
   b5754:	f842 0b04 	str.w	r0, [r2], #4
   b5758:	428b      	cmp	r3, r1
   b575a:	d1f9      	bne.n	b5750 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b575c:	b344      	cbz	r4, b57b0 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b575e:	2124      	movs	r1, #36	; 0x24
   b5760:	4620      	mov	r0, r4
   b5762:	f003 fc56 	bl	b9012 <strnlen>
   b5766:	2804      	cmp	r0, #4
   b5768:	f04f 0500 	mov.w	r5, #0
   b576c:	d123      	bne.n	b57b6 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b576e:	f8ad 5004 	strh.w	r5, [sp, #4]
   b5772:	af01      	add	r7, sp, #4
   b5774:	1ca5      	adds	r5, r4, #2
   b5776:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b5778:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b577c:	f7ff ff30 	bl	b55e0 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b5780:	f1b0 0800 	subs.w	r8, r0, #0
   b5784:	db12      	blt.n	b57ac <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b5786:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b578a:	f7ff ff29 	bl	b55e0 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b578e:	2800      	cmp	r0, #0
   b5790:	db0c      	blt.n	b57ac <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b5792:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b5794:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b5798:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b579a:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b579e:	d1eb      	bne.n	b5778 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b57a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b57a4:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b57a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b57aa:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b57ac:	2300      	movs	r3, #0
   b57ae:	6133      	str	r3, [r6, #16]
}
   b57b0:	b002      	add	sp, #8
   b57b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b57b6:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b57ba:	2124      	movs	r1, #36	; 0x24
   b57bc:	4620      	mov	r0, r4
   b57be:	f003 fc28 	bl	b9012 <strnlen>
   b57c2:	42a8      	cmp	r0, r5
   b57c4:	d807      	bhi.n	b57d6 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b57c6:	4642      	mov	r2, r8
   b57c8:	2100      	movs	r1, #0
   b57ca:	4630      	mov	r0, r6
}
   b57cc:	b002      	add	sp, #8
   b57ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b57d2:	f003 bbb5 	b.w	b8f40 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b57d6:	f1b8 0f00 	cmp.w	r8, #0
   b57da:	d0e9      	beq.n	b57b0 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b57dc:	5d60      	ldrb	r0, [r4, r5]
   b57de:	f7ff feff 	bl	b55e0 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b57e2:	0603      	lsls	r3, r0, #24
   b57e4:	d415      	bmi.n	b5812 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b57e6:	0100      	lsls	r0, r0, #4
   b57e8:	f108 38ff 	add.w	r8, r8, #4294967295
   b57ec:	b2c7      	uxtb	r7, r0
   b57ee:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b57f2:	2124      	movs	r1, #36	; 0x24
   b57f4:	4620      	mov	r0, r4
   b57f6:	f003 fc0c 	bl	b9012 <strnlen>
   b57fa:	3501      	adds	r5, #1
   b57fc:	42a8      	cmp	r0, r5
   b57fe:	d908      	bls.n	b5812 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b5800:	5d60      	ldrb	r0, [r4, r5]
   b5802:	f7ff feed 	bl	b55e0 <_ZN8particle11hexToNibbleEc>
   b5806:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b5808:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b580a:	bfa4      	itt	ge
   b580c:	4338      	orrge	r0, r7
   b580e:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b5812:	3501      	adds	r5, #1
   b5814:	e7d1      	b.n	b57ba <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b5816:	bf00      	nop
   b5818:	000b924e 	.word	0x000b924e

000b581c <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b581c:	b513      	push	{r0, r1, r4, lr}
   b581e:	4604      	mov	r4, r0
   b5820:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b5822:	f7ff ff43 	bl	b56ac <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b5826:	4620      	mov	r0, r4
   b5828:	9901      	ldr	r1, [sp, #4]
   b582a:	f7ff ff87 	bl	b573c <_ZN8particle7BleUuid9constructEPKc>
}
   b582e:	4620      	mov	r0, r4
   b5830:	b002      	add	sp, #8
   b5832:	bd10      	pop	{r4, pc}

000b5834 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b5834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5836:	4605      	mov	r5, r0
   b5838:	4616      	mov	r6, r2
   b583a:	461f      	mov	r7, r3
   b583c:	460a      	mov	r2, r1
   b583e:	ab01      	add	r3, sp, #4
   b5840:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5844:	f7ff fe66 	bl	b5514 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b5848:	f030 0402 	bics.w	r4, r0, #2
   b584c:	d00c      	beq.n	b5868 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b584e:	1e84      	subs	r4, r0, #2
   b5850:	42bc      	cmp	r4, r7
   b5852:	bf28      	it	cs
   b5854:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b5856:	b13e      	cbz	r6, b5868 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b5858:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b585a:	682b      	ldr	r3, [r5, #0]
   b585c:	3102      	adds	r1, #2
   b585e:	4622      	mov	r2, r4
   b5860:	4419      	add	r1, r3
   b5862:	4630      	mov	r0, r6
   b5864:	f003 fb44 	bl	b8ef0 <memcpy>
}
   b5868:	4620      	mov	r0, r4
   b586a:	b003      	add	sp, #12
   b586c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b586e <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b586e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5870:	4613      	mov	r3, r2
   b5872:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b5874:	9201      	str	r2, [sp, #4]
   b5876:	460a      	mov	r2, r1
   b5878:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b587a:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b587c:	f7ff ffda 	bl	b5834 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b5880:	b940      	cbnz	r0, b5894 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b5882:	9b01      	ldr	r3, [sp, #4]
   b5884:	4622      	mov	r2, r4
   b5886:	2109      	movs	r1, #9
   b5888:	4628      	mov	r0, r5
}
   b588a:	b003      	add	sp, #12
   b588c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b5890:	f7ff bfd0 	b.w	b5834 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b5894:	b003      	add	sp, #12
   b5896:	bd30      	pop	{r4, r5, pc}

000b5898 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b5898:	b5f0      	push	{r4, r5, r6, r7, lr}
   b589a:	460c      	mov	r4, r1
   b589c:	b089      	sub	sp, #36	; 0x24
    String name;
   b589e:	490c      	ldr	r1, [pc, #48]	; (b58d0 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b58a0:	4605      	mov	r5, r0
    String name;
   b58a2:	f7ff fd52 	bl	b534a <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b58a6:	221f      	movs	r2, #31
   b58a8:	4669      	mov	r1, sp
   b58aa:	4620      	mov	r0, r4
   b58ac:	f7ff ffdf 	bl	b586e <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b58b0:	4606      	mov	r6, r0
   b58b2:	b150      	cbz	r0, b58ca <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b58b4:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b58b6:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b58b8:	f814 1b01 	ldrb.w	r1, [r4], #1
   b58bc:	4628      	mov	r0, r5
   b58be:	f7ff fdde 	bl	b547e <_ZN6String6concatEc>
   b58c2:	b110      	cbz	r0, b58ca <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b58c4:	3701      	adds	r7, #1
   b58c6:	42be      	cmp	r6, r7
   b58c8:	d1f6      	bne.n	b58b8 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b58ca:	4628      	mov	r0, r5
   b58cc:	b009      	add	sp, #36	; 0x24
   b58ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b58d0:	000b94be 	.word	0x000b94be

000b58d4 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b58d4:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b58d6:	2302      	movs	r3, #2
   b58d8:	aa01      	add	r2, sp, #4
   b58da:	2119      	movs	r1, #25
   b58dc:	f7ff ffaa 	bl	b5834 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b58e0:	b108      	cbz	r0, b58e6 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b58e2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b58e6:	b003      	add	sp, #12
   b58e8:	f85d fb04 	ldr.w	pc, [sp], #4

000b58ec <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:

    void onAttMtuExchangedCallback(const BleOnAttMtuExchangedStdFunction& callback) {
        attMtuExchangedCallback_ = callback;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b58ec:	b510      	push	{r4, lr}
    return data_ + size_;
   b58ee:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b58f2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b58f6:	4293      	cmp	r3, r2
   b58f8:	4618      	mov	r0, r3
   b58fa:	d006      	beq.n	b590a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b58fc:	6804      	ldr	r4, [r0, #0]
   b58fe:	8824      	ldrh	r4, [r4, #0]
   b5900:	428c      	cmp	r4, r1
   b5902:	f103 0308 	add.w	r3, r3, #8
   b5906:	d1f6      	bne.n	b58f6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
                return &peer;
            }
        }
        return nullptr;
    }
   b5908:	bd10      	pop	{r4, pc}
        return nullptr;
   b590a:	2000      	movs	r0, #0
   b590c:	e7fc      	b.n	b5908 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b5910 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b5910:	b570      	push	{r4, r5, r6, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5912:	2500      	movs	r5, #0
   b5914:	6005      	str	r5, [r0, #0]
   b5916:	4606      	mov	r6, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5918:	2030      	movs	r0, #48	; 0x30
   b591a:	f7fe fbcc 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b591e:	4604      	mov	r4, r0
   b5920:	b188      	cbz	r0, b5946 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b5922:	2301      	movs	r3, #1
   b5924:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b5928:	4b09      	ldr	r3, [pc, #36]	; (b5950 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b592a:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b592c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5930:	8183      	strh	r3, [r0, #12]
   b5932:	300e      	adds	r0, #14
   b5934:	f7ff feaf 	bl	b5696 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b5938:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b593c:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b5940:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b5944:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b5946:	6074      	str	r4, [r6, #4]
   b5948:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b594a:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b594c:	4630      	mov	r0, r6
   b594e:	bd70      	pop	{r4, r5, r6, pc}
   b5950:	000b9448 	.word	0x000b9448

000b5954 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b5954:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5956:	460d      	mov	r5, r1
   b5958:	4604      	mov	r4, r0
    WiringBleLock lk;
   b595a:	a801      	add	r0, sp, #4
   b595c:	f7ff fe56 	bl	b560c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b5960:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b5962:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b5966:	6023      	str	r3, [r4, #0]
   b5968:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b596c:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b596e:	a801      	add	r0, sp, #4
   b5970:	f7ff fe5a 	bl	b5628 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b5974:	4620      	mov	r0, r4
   b5976:	b003      	add	sp, #12
   b5978:	bd30      	pop	{r4, r5, pc}

000b597a <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b597a:	b530      	push	{r4, r5, lr}
   b597c:	4605      	mov	r5, r0
   b597e:	b087      	sub	sp, #28
   b5980:	460c      	mov	r4, r1
    WiringBleLock lk;
   b5982:	a801      	add	r0, sp, #4
   b5984:	f7ff fe42 	bl	b560c <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b5988:	682a      	ldr	r2, [r5, #0]
   b598a:	6823      	ldr	r3, [r4, #0]
   b598c:	8812      	ldrh	r2, [r2, #0]
   b598e:	881b      	ldrh	r3, [r3, #0]
   b5990:	429a      	cmp	r2, r3
   b5992:	d10d      	bne.n	b59b0 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b5994:	4629      	mov	r1, r5
   b5996:	a802      	add	r0, sp, #8
   b5998:	f7ff ffdc 	bl	b5954 <_ZNK8particle13BlePeerDevice7addressEv>
   b599c:	4621      	mov	r1, r4
   b599e:	a804      	add	r0, sp, #16
   b59a0:	f7ff ffd8 	bl	b5954 <_ZNK8particle13BlePeerDevice7addressEv>
   b59a4:	a904      	add	r1, sp, #16
   b59a6:	a802      	add	r0, sp, #8
   b59a8:	f7ff fe61 	bl	b566e <_ZNK8particle10BleAddresseqERKS0_>
   b59ac:	4604      	mov	r4, r0
   b59ae:	b900      	cbnz	r0, b59b2 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b59b0:	2400      	movs	r4, #0
    WiringBleLock lk;
   b59b2:	a801      	add	r0, sp, #4
   b59b4:	f7ff fe38 	bl	b5628 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b59b8:	4620      	mov	r0, r4
   b59ba:	b007      	add	sp, #28
   b59bc:	bd30      	pop	{r4, r5, pc}
	...

000b59c0 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b59c0:	b510      	push	{r4, lr}
   b59c2:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b59c4:	2064      	movs	r0, #100	; 0x64
   b59c6:	f7fe fb76 	bl	b40b6 <_Znwj>
   b59ca:	b168      	cbz	r0, b59e8 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b59cc:	2300      	movs	r3, #0
   b59ce:	e9c0 3300 	strd	r3, r3, [r0]
   b59d2:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b59d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b59da:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b59de:	6203      	str	r3, [r0, #32]
    _Function_base() : _M_manager(nullptr) { }
   b59e0:	62c3      	str	r3, [r0, #44]	; 0x2c
   b59e2:	63c3      	str	r3, [r0, #60]	; 0x3c
   b59e4:	64c3      	str	r3, [r0, #76]	; 0x4c
   b59e6:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b59e8:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b59ea:	b920      	cbnz	r0, b59f6 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b59ec:	4a0a      	ldr	r2, [pc, #40]	; (b5a18 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b59ee:	490b      	ldr	r1, [pc, #44]	; (b5a1c <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b59f0:	200a      	movs	r0, #10
   b59f2:	f7ff fac7 	bl	b4f84 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b59f6:	2000      	movs	r0, #0
   b59f8:	f7ff f97e 	bl	b4cf8 <hal_ble_stack_init>
   b59fc:	b120      	cbz	r0, b5a08 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b59fe:	4a06      	ldr	r2, [pc, #24]	; (b5a18 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b5a00:	4907      	ldr	r1, [pc, #28]	; (b5a20 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b5a02:	200a      	movs	r0, #10
   b5a04:	f7ff fabe 	bl	b4f84 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b5a08:	6821      	ldr	r1, [r4, #0]
   b5a0a:	4806      	ldr	r0, [pc, #24]	; (b5a24 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b5a0c:	2200      	movs	r2, #0
   b5a0e:	f7ff f9a7 	bl	b4d60 <hal_ble_set_callback_on_periph_link_events>
}
   b5a12:	4620      	mov	r0, r4
   b5a14:	bd10      	pop	{r4, pc}
   b5a16:	bf00      	nop
   b5a18:	000b4cd9 	.word	0x000b4cd9
   b5a1c:	000b9368 	.word	0x000b9368
   b5a20:	000b93a6 	.word	0x000b93a6
   b5a24:	000b632d 	.word	0x000b632d

000b5a28 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b5a28:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b5a2a:	4c0a      	ldr	r4, [pc, #40]	; (b5a54 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b5a2c:	7823      	ldrb	r3, [r4, #0]
   b5a2e:	f3bf 8f5b 	dmb	ish
   b5a32:	07db      	lsls	r3, r3, #31
   b5a34:	d40c      	bmi.n	b5a50 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b5a36:	4620      	mov	r0, r4
   b5a38:	f7fe fb52 	bl	b40e0 <__cxa_guard_acquire>
   b5a3c:	b140      	cbz	r0, b5a50 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b5a3e:	4806      	ldr	r0, [pc, #24]	; (b5a58 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b5a40:	f7ff ffbe 	bl	b59c0 <_ZN8particle14BleLocalDeviceC1Ev>
   b5a44:	4620      	mov	r0, r4
   b5a46:	f7fe fb50 	bl	b40ea <__cxa_guard_release>
   b5a4a:	4804      	ldr	r0, [pc, #16]	; (b5a5c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b5a4c:	f003 fa32 	bl	b8eb4 <atexit>
    return instance;
}
   b5a50:	4801      	ldr	r0, [pc, #4]	; (b5a58 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b5a52:	bd10      	pop	{r4, pc}
   b5a54:	2003e6b8 	.word	0x2003e6b8
   b5a58:	2003e6c0 	.word	0x2003e6c0
   b5a5c:	000b5c31 	.word	0x000b5c31

000b5a60 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b5a60:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b5a62:	2000      	movs	r0, #0
   b5a64:	f7ff f948 	bl	b4cf8 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b5a68:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b5a6c:	bd08      	pop	{r3, pc}

000b5a6e <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt>:

bool BleLocalDevice::getProvisioningStatus() const {
    return system_ble_prov_get_status(nullptr);
}

int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
   b5a6e:	b530      	push	{r4, r5, lr}
   b5a70:	b085      	sub	sp, #20
    hal_ble_adv_params_t advParams = {};
   b5a72:	2400      	movs	r4, #0
    advParams.size = sizeof(hal_ble_adv_params_t);
   b5a74:	230c      	movs	r3, #12
   b5a76:	f8ad 3006 	strh.w	r3, [sp, #6]
int BleLocalDevice::setAdvertisingInterval(uint16_t interval) const {
   b5a7a:	460d      	mov	r5, r1
    advParams.version = BLE_API_VERSION;
   b5a7c:	2303      	movs	r3, #3
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   b5a7e:	4621      	mov	r1, r4
   b5a80:	a801      	add	r0, sp, #4
    hal_ble_adv_params_t advParams = {};
   b5a82:	e9cd 4402 	strd	r4, r4, [sp, #8]
    advParams.version = BLE_API_VERSION;
   b5a86:	f8ad 3004 	strh.w	r3, [sp, #4]
    CHECK(hal_ble_gap_get_advertising_parameters(&advParams, nullptr));
   b5a8a:	f7ff f945 	bl	b4d18 <hal_ble_gap_get_advertising_parameters>
   b5a8e:	2800      	cmp	r0, #0
   b5a90:	db05      	blt.n	b5a9e <_ZNK8particle14BleLocalDevice22setAdvertisingIntervalEt+0x30>
    advParams.interval = interval;
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   b5a92:	4621      	mov	r1, r4
   b5a94:	a801      	add	r0, sp, #4
    advParams.interval = interval;
   b5a96:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_advertising_parameters(&advParams, nullptr);
   b5a9a:	f7ff f935 	bl	b4d08 <hal_ble_gap_set_advertising_parameters>
}
   b5a9e:	b005      	add	sp, #20
   b5aa0:	bd30      	pop	{r4, r5, pc}

000b5aa2 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   b5aa2:	b510      	push	{r4, lr}
   b5aa4:	4604      	mov	r4, r0
    ::free(ptr);
   b5aa6:	6940      	ldr	r0, [r0, #20]
   b5aa8:	f7ff fb30 	bl	b510c <free>
   b5aac:	68a0      	ldr	r0, [r4, #8]
   b5aae:	f7ff fb2d 	bl	b510c <free>
   b5ab2:	4620      	mov	r0, r4
   b5ab4:	bd10      	pop	{r4, pc}

000b5ab6 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   b5ab6:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   b5ab8:	f647 717f 	movw	r1, #32639	; 0x7f7f
   b5abc:	e9c0 2200 	strd	r2, r2, [r0]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              scanResultCallback_(nullptr),
              scanResultCallbackRef_(nullptr) {
   b5ac0:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b5ac4:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b5ac8:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   b5acc:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   b5ad0:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   b5ad4:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   b5ad8:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   b5adc:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   b5ae0:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
   b5ae4:	6202      	str	r2, [r0, #32]
   b5ae6:	6302      	str	r2, [r0, #48]	; 0x30
   b5ae8:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
        resultsVector_.clear();
    }
   b5aec:	4770      	bx	lr

000b5aee <_ZNK8particle14BleLocalDevice12stopScanningEv>:
    BleScanDelegator scanner;
    return scanner.setScanFilter(filter).start();
}

int BleLocalDevice::stopScanning() const {
    return hal_ble_gap_stop_scan(nullptr);
   b5aee:	2000      	movs	r0, #0
   b5af0:	f7ff b922 	b.w	b4d38 <hal_ble_gap_stop_scan>

000b5af4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5af4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5af6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5afa:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5afc:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b5b00:	42ae      	cmp	r6, r5
   b5b02:	d004      	beq.n	b5b0e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b5b04:	4628      	mov	r0, r5
   b5b06:	f7ff fbd5 	bl	b52b4 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b5b0a:	3510      	adds	r5, #16
   b5b0c:	e7f8      	b.n	b5b00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5b0e:	6820      	ldr	r0, [r4, #0]
   b5b10:	f7ff fafc 	bl	b510c <free>
}
   b5b14:	4620      	mov	r0, r4
   b5b16:	bd70      	pop	{r4, r5, r6, pc}

000b5b18 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5b18:	b510      	push	{r4, lr}
   b5b1a:	4604      	mov	r4, r0
    ::free(ptr);
   b5b1c:	6800      	ldr	r0, [r0, #0]
   b5b1e:	f7ff faf5 	bl	b510c <free>
}
   b5b22:	4620      	mov	r0, r4
   b5b24:	bd10      	pop	{r4, pc}

000b5b26 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   b5b26:	b570      	push	{r4, r5, r6, lr}
   b5b28:	4604      	mov	r4, r0
    ::free(ptr);
   b5b2a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b5b2c:	f7ff faee 	bl	b510c <free>
   b5b30:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b5b32:	f7ff faeb 	bl	b510c <free>
    }
    ~BleScanFilter() = default;
   b5b36:	f104 0538 	add.w	r5, r4, #56	; 0x38
   b5b3a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b5b3e:	f7ff ffeb 	bl	b5b18 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b5b42:	4628      	mov	r0, r5
   b5b44:	f7ff ffd6 	bl	b5af4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   b5b48:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b5b4c:	f7ff fd2b 	bl	b55a6 <_ZNSt14_Function_baseD1Ev>
   b5b50:	f104 0018 	add.w	r0, r4, #24
   b5b54:	f7ff fd27 	bl	b55a6 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b5b58:	e9d4 5300 	ldrd	r5, r3, [r4]
   b5b5c:	2624      	movs	r6, #36	; 0x24
   b5b5e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5b62:	42ae      	cmp	r6, r5
   b5b64:	d004      	beq.n	b5b70 <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   b5b66:	4628      	mov	r0, r5
   b5b68:	f7ff ff9b 	bl	b5aa2 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b5b6c:	3524      	adds	r5, #36	; 0x24
   b5b6e:	e7f8      	b.n	b5b62 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   b5b70:	6820      	ldr	r0, [r4, #0]
   b5b72:	f7ff facb 	bl	b510c <free>
   b5b76:	4620      	mov	r0, r4
   b5b78:	bd70      	pop	{r4, r5, r6, pc}

000b5b7a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b5b7a:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b5b7c:	1e14      	subs	r4, r2, #0
   b5b7e:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b5b80:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b5b82:	db02      	blt.n	b5b8a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b5b84:	1862      	adds	r2, r4, r1
   b5b86:	429a      	cmp	r2, r3
   b5b88:	dd00      	ble.n	b5b8c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b5b8a:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b5b8c:	682a      	ldr	r2, [r5, #0]
   b5b8e:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b5b90:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b5b92:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5b94:	1a52      	subs	r2, r2, r1
   b5b96:	f003 f9b9 	bl	b8f0c <memmove>
    size_ -= n;
   b5b9a:	686a      	ldr	r2, [r5, #4]
   b5b9c:	1b12      	subs	r2, r2, r4
   b5b9e:	606a      	str	r2, [r5, #4]
}
   b5ba0:	bd38      	pop	{r3, r4, r5, pc}

000b5ba2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b5ba2:	680b      	ldr	r3, [r1, #0]
   b5ba4:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b5ba6:	b113      	cbz	r3, b5bae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b5ba8:	685a      	ldr	r2, [r3, #4]
   b5baa:	3201      	adds	r2, #1
   b5bac:	605a      	str	r2, [r3, #4]
      }
   b5bae:	4770      	bx	lr

000b5bb0 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5bb0:	b510      	push	{r4, lr}
   b5bb2:	f851 3b04 	ldr.w	r3, [r1], #4
   b5bb6:	4604      	mov	r4, r0
   b5bb8:	f840 3b04 	str.w	r3, [r0], #4
   b5bbc:	f7ff fff1 	bl	b5ba2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b5bc0:	4620      	mov	r0, r4
   b5bc2:	bd10      	pop	{r4, pc}

000b5bc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b5bc4:	b510      	push	{r4, lr}
   b5bc6:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b5bc8:	6800      	ldr	r0, [r0, #0]
   b5bca:	b108      	cbz	r0, b5bd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b5bcc:	f7ff fcf4 	bl	b55b8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b5bd0:	4620      	mov	r0, r4
   b5bd2:	bd10      	pop	{r4, pc}

000b5bd4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5bd4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5bd6:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5bda:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5bdc:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5be0:	42ae      	cmp	r6, r5
   b5be2:	d004      	beq.n	b5bee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
      ~__shared_ptr() = default;
   b5be4:	1d28      	adds	r0, r5, #4
   b5be6:	f7ff ffed 	bl	b5bc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5bea:	3508      	adds	r5, #8
   b5bec:	e7f8      	b.n	b5be0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5bee:	6820      	ldr	r0, [r4, #0]
   b5bf0:	f7ff fa8c 	bl	b510c <free>
}
   b5bf4:	4620      	mov	r0, r4
   b5bf6:	bd70      	pop	{r4, r5, r6, pc}

000b5bf8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5bf8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5bfa:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5bfe:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5c00:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5c04:	42ae      	cmp	r6, r5
   b5c06:	d004      	beq.n	b5c12 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b5c08:	1d28      	adds	r0, r5, #4
   b5c0a:	f7ff ffdb 	bl	b5bc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5c0e:	3508      	adds	r5, #8
   b5c10:	e7f8      	b.n	b5c04 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5c12:	6820      	ldr	r0, [r4, #0]
   b5c14:	f7ff fa7a 	bl	b510c <free>
}
   b5c18:	4620      	mov	r0, r4
   b5c1a:	bd70      	pop	{r4, r5, r6, pc}

000b5c1c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5c1c:	b510      	push	{r4, lr}
   b5c1e:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b5c20:	3024      	adds	r0, #36	; 0x24
   b5c22:	f7ff ffe9 	bl	b5bf8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b5c26:	f104 0018 	add.w	r0, r4, #24
   b5c2a:	f7ff ffd3 	bl	b5bd4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b5c2e:	bd10      	pop	{r4, pc}

000b5c30 <__tcf_0>:
    static BleLocalDevice instance;
   b5c30:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b5c32:	4b17      	ldr	r3, [pc, #92]	; (b5c90 <__tcf_0+0x60>)
   b5c34:	681c      	ldr	r4, [r3, #0]
   b5c36:	b354      	cbz	r4, b5c8e <__tcf_0+0x5e>
   b5c38:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b5c3c:	f7ff fcb3 	bl	b55a6 <_ZNSt14_Function_baseD1Ev>
   b5c40:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b5c44:	f7ff fcaf 	bl	b55a6 <_ZNSt14_Function_baseD1Ev>
   b5c48:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b5c4c:	f7ff fcab 	bl	b55a6 <_ZNSt14_Function_baseD1Ev>
   b5c50:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5c54:	f7ff fca7 	bl	b55a6 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b5c58:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b5c5c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5c60:	42ae      	cmp	r6, r5
   b5c62:	d004      	beq.n	b5c6e <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b5c64:	1d28      	adds	r0, r5, #4
   b5c66:	f7ff ffad 	bl	b5bc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5c6a:	3508      	adds	r5, #8
   b5c6c:	e7f8      	b.n	b5c60 <__tcf_0+0x30>
    ::free(ptr);
   b5c6e:	69a0      	ldr	r0, [r4, #24]
   b5c70:	f7ff fa4c 	bl	b510c <free>
    ~BleLocalDeviceImpl() = default;
   b5c74:	f104 000c 	add.w	r0, r4, #12
   b5c78:	f7ff ffbe 	bl	b5bf8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b5c7c:	4620      	mov	r0, r4
   b5c7e:	f7ff ffa9 	bl	b5bd4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b5c82:	4620      	mov	r0, r4
   b5c84:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b5c86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5c8a:	f7fe ba1a 	b.w	b40c2 <_ZdlPvj>
   b5c8e:	bd70      	pop	{r4, r5, r6, pc}
   b5c90:	2003e6c0 	.word	0x2003e6c0

000b5c94 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b5c94:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5c96:	b510      	push	{r4, lr}
      if (_M_empty())
   b5c98:	b90a      	cbnz	r2, b5c9e <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b5c9a:	f002 fff5 	bl	b8c88 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b5c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5ca2:	68c3      	ldr	r3, [r0, #12]
   b5ca4:	4718      	bx	r3

000b5ca6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5ca6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   b5caa:	2300      	movs	r3, #0
   b5cac:	e9c0 3300 	strd	r3, r3, [r0]
   b5cb0:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5cb2:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b5cb6:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5cb8:	4605      	mov	r5, r0
   b5cba:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5cbc:	dd4a      	ble.n	b5d54 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   b5cbe:	ea4f 1008 	mov.w	r0, r8, lsl #4
   b5cc2:	f7ff fa1b 	bl	b50fc <malloc>
            if (!d) {
   b5cc6:	4606      	mov	r6, r0
   b5cc8:	2800      	cmp	r0, #0
   b5cca:	d043      	beq.n	b5d54 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   b5ccc:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   b5cd0:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   b5cd2:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   b5cd6:	d916      	bls.n	b5d06 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   b5cd8:	4550      	cmp	r0, sl
   b5cda:	d215      	bcs.n	b5d08 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   b5cdc:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   b5ce0:	f1a4 0910 	sub.w	r9, r4, #16
   b5ce4:	ebaa 0404 	sub.w	r4, sl, r4
   b5ce8:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b5cea:	45d1      	cmp	r9, sl
   b5cec:	d01d      	beq.n	b5d2a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   b5cee:	b11c      	cbz	r4, b5cf8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   b5cf0:	4651      	mov	r1, sl
   b5cf2:	4620      	mov	r0, r4
   b5cf4:	f7ff fb5a 	bl	b53ac <_ZN6StringC1EOS_>
                end->~T();
   b5cf8:	4650      	mov	r0, sl
   b5cfa:	f7ff fadb 	bl	b52b4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5cfe:	f1aa 0a10 	sub.w	sl, sl, #16
   b5d02:	3c10      	subs	r4, #16
   b5d04:	e7f1      	b.n	b5cea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   b5d06:	d010      	beq.n	b5d2a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   b5d08:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   b5d0a:	45a2      	cmp	sl, r4
   b5d0c:	d00d      	beq.n	b5d2a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   b5d0e:	f1b9 0f00 	cmp.w	r9, #0
   b5d12:	d003      	beq.n	b5d1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   b5d14:	4621      	mov	r1, r4
   b5d16:	4648      	mov	r0, r9
   b5d18:	f7ff fb48 	bl	b53ac <_ZN6StringC1EOS_>
                p->~T();
   b5d1c:	4620      	mov	r0, r4
   b5d1e:	f7ff fac9 	bl	b52b4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5d22:	3410      	adds	r4, #16
   b5d24:	f109 0910 	add.w	r9, r9, #16
   b5d28:	e7ef      	b.n	b5d0a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   b5d2a:	6828      	ldr	r0, [r5, #0]
   b5d2c:	f7ff f9ee 	bl	b510c <free>
        capacity_ = n;
   b5d30:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   b5d34:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5d36:	e9d7 4300 	ldrd	r4, r3, [r7]
   b5d3a:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   b5d3e:	45a0      	cmp	r8, r4
   b5d40:	d006      	beq.n	b5d50 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   b5d42:	4621      	mov	r1, r4
   b5d44:	4630      	mov	r0, r6
   b5d46:	f7ff fb4b 	bl	b53e0 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   b5d4a:	3410      	adds	r4, #16
   b5d4c:	3610      	adds	r6, #16
   b5d4e:	e7f6      	b.n	b5d3e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   b5d50:	687b      	ldr	r3, [r7, #4]
   b5d52:	606b      	str	r3, [r5, #4]
}
   b5d54:	4628      	mov	r0, r5
   b5d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5d5a <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   b5d5a:	b530      	push	{r4, r5, lr}
   b5d5c:	b08d      	sub	sp, #52	; 0x34
   b5d5e:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   b5d60:	f100 0138 	add.w	r1, r0, #56	; 0x38
   b5d64:	a801      	add	r0, sp, #4
   b5d66:	f7ff ff9e 	bl	b5ca6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   b5d6a:	9b02      	ldr	r3, [sp, #8]
   b5d6c:	2b00      	cmp	r3, #0
   b5d6e:	dd2f      	ble.n	b5dd0 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   b5d70:	f104 0114 	add.w	r1, r4, #20
   b5d74:	a804      	add	r0, sp, #16
   b5d76:	f7ff fd8f 	bl	b5898 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   b5d7a:	f104 0108 	add.w	r1, r4, #8
   b5d7e:	a808      	add	r0, sp, #32
   b5d80:	f7ff fd8a 	bl	b5898 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   b5d84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5d86:	9b06      	ldr	r3, [sp, #24]
   b5d88:	4313      	orrs	r3, r2
   b5d8a:	d01f      	beq.n	b5dcc <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   b5d8c:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   b5d90:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   b5d94:	42ac      	cmp	r4, r5
   b5d96:	d019      	beq.n	b5dcc <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b5d98:	a904      	add	r1, sp, #16
   b5d9a:	4620      	mov	r0, r4
   b5d9c:	f7ff fb91 	bl	b54c2 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b5da0:	b160      	cbz	r0, b5dbc <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   b5da2:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   b5da4:	a808      	add	r0, sp, #32
   b5da6:	f7ff fa85 	bl	b52b4 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   b5daa:	a804      	add	r0, sp, #16
   b5dac:	f7ff fa82 	bl	b52b4 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   b5db0:	a801      	add	r0, sp, #4
   b5db2:	f7ff fe9f 	bl	b5af4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   b5db6:	4620      	mov	r0, r4
   b5db8:	b00d      	add	sp, #52	; 0x34
   b5dba:	bd30      	pop	{r4, r5, pc}
   b5dbc:	4620      	mov	r0, r4
   b5dbe:	a908      	add	r1, sp, #32
   b5dc0:	f7ff fb7f 	bl	b54c2 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b5dc4:	3410      	adds	r4, #16
   b5dc6:	2800      	cmp	r0, #0
   b5dc8:	d0e4      	beq.n	b5d94 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   b5dca:	e7ea      	b.n	b5da2 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   b5dcc:	2400      	movs	r4, #0
   b5dce:	e7e9      	b.n	b5da4 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   b5dd0:	2401      	movs	r4, #1
   b5dd2:	e7ed      	b.n	b5db0 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000b5dd4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   b5dd6:	2300      	movs	r3, #0
   b5dd8:	e9c0 3300 	strd	r3, r3, [r0]
   b5ddc:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5dde:	684f      	ldr	r7, [r1, #4]
   b5de0:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5de2:	4605      	mov	r5, r0
   b5de4:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5de6:	dd3e      	ble.n	b5e66 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   b5de8:	00f8      	lsls	r0, r7, #3
   b5dea:	f7ff f987 	bl	b50fc <malloc>
            if (!d) {
   b5dee:	4604      	mov	r4, r0
   b5df0:	b3c8      	cbz	r0, b5e66 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   b5df2:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   b5df6:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   b5df8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   b5dfc:	d910      	bls.n	b5e20 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b5dfe:	429c      	cmp	r4, r3
   b5e00:	d20f      	bcs.n	b5e22 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   b5e02:	3b08      	subs	r3, #8
            dest += end - p - 1;
   b5e04:	1a1a      	subs	r2, r3, r0
   b5e06:	f1a0 0c08 	sub.w	ip, r0, #8
   b5e0a:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   b5e0c:	459c      	cmp	ip, r3
   b5e0e:	d018      	beq.n	b5e42 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   b5e10:	b11a      	cbz	r2, b5e1a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   b5e12:	6819      	ldr	r1, [r3, #0]
   b5e14:	6011      	str	r1, [r2, #0]
   b5e16:	6859      	ldr	r1, [r3, #4]
   b5e18:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   b5e1a:	3b08      	subs	r3, #8
   b5e1c:	3a08      	subs	r2, #8
   b5e1e:	e7f5      	b.n	b5e0c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   b5e20:	d00f      	beq.n	b5e42 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   b5e22:	4601      	mov	r1, r0
   b5e24:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   b5e26:	428b      	cmp	r3, r1
   b5e28:	d00b      	beq.n	b5e42 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   b5e2a:	b13a      	cbz	r2, b5e3c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   b5e2c:	f8d1 c000 	ldr.w	ip, [r1]
   b5e30:	f8c2 c000 	str.w	ip, [r2]
   b5e34:	f8d1 c004 	ldr.w	ip, [r1, #4]
   b5e38:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   b5e3c:	3108      	adds	r1, #8
   b5e3e:	3208      	adds	r2, #8
   b5e40:	e7f1      	b.n	b5e26 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   b5e42:	f7ff f963 	bl	b510c <free>
        data_ = d;
   b5e46:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5e48:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5e4a:	e9d6 3100 	ldrd	r3, r1, [r6]
   b5e4e:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   b5e52:	4298      	cmp	r0, r3
   b5e54:	d006      	beq.n	b5e64 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   b5e56:	681a      	ldr	r2, [r3, #0]
   b5e58:	6022      	str	r2, [r4, #0]
   b5e5a:	685a      	ldr	r2, [r3, #4]
   b5e5c:	6062      	str	r2, [r4, #4]
   b5e5e:	3308      	adds	r3, #8
   b5e60:	3408      	adds	r4, #8
   b5e62:	e7f6      	b.n	b5e52 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   b5e64:	6069      	str	r1, [r5, #4]
}
   b5e66:	4628      	mov	r0, r5
   b5e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5e6a <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5e6a:	b570      	push	{r4, r5, r6, lr}
   b5e6c:	4604      	mov	r4, r0
        capacity_(0) {
   b5e6e:	2000      	movs	r0, #0
   b5e70:	e9c4 0000 	strd	r0, r0, [r4]
   b5e74:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5e76:	684e      	ldr	r6, [r1, #4]
   b5e78:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5e7a:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b5e7c:	dd12      	ble.n	b5ea4 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   b5e7e:	0071      	lsls	r1, r6, #1
   b5e80:	f7ff f94c 	bl	b511c <realloc>
            if (!d) {
   b5e84:	b170      	cbz	r0, b5ea4 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   b5e86:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5e88:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b5e8a:	e9d5 3200 	ldrd	r3, r2, [r5]
   b5e8e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   b5e92:	429a      	cmp	r2, r3
   b5e94:	d004      	beq.n	b5ea0 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   b5e96:	f833 1b02 	ldrh.w	r1, [r3], #2
   b5e9a:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   b5e9e:	e7f8      	b.n	b5e92 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   b5ea0:	686b      	ldr	r3, [r5, #4]
   b5ea2:	6063      	str	r3, [r4, #4]
}
   b5ea4:	4620      	mov	r0, r4
   b5ea6:	bd70      	pop	{r4, r5, r6, pc}

000b5ea8 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   b5ea8:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b5eaa:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b5eac:	4604      	mov	r4, r0
        if (!dismissed_) {
   b5eae:	b923      	cbnz	r3, b5eba <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   b5eb0:	6803      	ldr	r3, [r0, #0]
   b5eb2:	6818      	ldr	r0, [r3, #0]
   b5eb4:	b108      	cbz	r0, b5eba <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   b5eb6:	f7ff f929 	bl	b510c <free>
            func_();
        }
    }
   b5eba:	4620      	mov	r0, r4
   b5ebc:	bd10      	pop	{r4, pc}

000b5ebe <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   b5ebe:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b5ec0:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b5ec2:	4604      	mov	r4, r0
        if (!dismissed_) {
   b5ec4:	b923      	cbnz	r3, b5ed0 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   b5ec6:	6803      	ldr	r3, [r0, #0]
   b5ec8:	6818      	ldr	r0, [r3, #0]
   b5eca:	b108      	cbz	r0, b5ed0 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   b5ecc:	f7ff f91e 	bl	b510c <free>
    }
   b5ed0:	4620      	mov	r0, r4
   b5ed2:	bd10      	pop	{r4, pc}

000b5ed4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   b5ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   b5ed8:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   b5edc:	b08f      	sub	sp, #60	; 0x3c
   b5ede:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   b5ee0:	f1b8 0f00 	cmp.w	r8, #0
   b5ee4:	d072      	beq.n	b5fcc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   b5ee6:	6f05      	ldr	r5, [r0, #112]	; 0x70
   b5ee8:	2d00      	cmp	r5, #0
   b5eea:	d06f      	beq.n	b5fcc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   b5eec:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b5ef0:	231f      	movs	r3, #31
   b5ef2:	2200      	movs	r2, #0
   b5ef4:	21ff      	movs	r1, #255	; 0xff
   b5ef6:	4648      	mov	r0, r9
   b5ef8:	f7ff fc9c 	bl	b5834 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   b5efc:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b5efe:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b5f00:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b5f02:	2200      	movs	r2, #0
   b5f04:	4619      	mov	r1, r3
   b5f06:	4638      	mov	r0, r7
   b5f08:	f7ff fc94 	bl	b5834 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b5f0c:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b5f0e:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b5f10:	d006      	beq.n	b5f20 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   b5f12:	42ae      	cmp	r6, r5
   b5f14:	d030      	beq.n	b5f78 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   b5f16:	2400      	movs	r4, #0
    }
   b5f18:	4620      	mov	r0, r4
   b5f1a:	b00f      	add	sp, #60	; 0x3c
   b5f1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   b5f20:	4620      	mov	r0, r4
   b5f22:	f7ff f8eb 	bl	b50fc <malloc>
            dismissed_(false) {
   b5f26:	ab03      	add	r3, sp, #12
   b5f28:	9304      	str	r3, [sp, #16]
   b5f2a:	2300      	movs	r3, #0
   b5f2c:	4604      	mov	r4, r0
   b5f2e:	9003      	str	r0, [sp, #12]
   b5f30:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   b5f34:	b970      	cbnz	r0, b5f54 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   b5f36:	2320      	movs	r3, #32
   b5f38:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b5f3c:	4b24      	ldr	r3, [pc, #144]	; (b5fd0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b5f3e:	9300      	str	r3, [sp, #0]
   b5f40:	4924      	ldr	r1, [pc, #144]	; (b5fd4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b5f42:	4603      	mov	r3, r0
   b5f44:	aa06      	add	r2, sp, #24
   b5f46:	2032      	movs	r0, #50	; 0x32
   b5f48:	f7ff f824 	bl	b4f94 <log_message>
                    return false;
   b5f4c:	a804      	add	r0, sp, #16
   b5f4e:	f7ff ffab 	bl	b5ea8 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   b5f52:	e7e1      	b.n	b5f18 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   b5f54:	4602      	mov	r2, r0
   b5f56:	21ff      	movs	r1, #255	; 0xff
   b5f58:	462b      	mov	r3, r5
   b5f5a:	4648      	mov	r0, r9
   b5f5c:	f7ff fc6a 	bl	b5834 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   b5f60:	9803      	ldr	r0, [sp, #12]
   b5f62:	462a      	mov	r2, r5
   b5f64:	4641      	mov	r1, r8
   b5f66:	f002 ffb3 	bl	b8ed0 <memcmp>
   b5f6a:	b118      	cbz	r0, b5f74 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   b5f6c:	a804      	add	r0, sp, #16
   b5f6e:	f7ff ff9b 	bl	b5ea8 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   b5f72:	e7ce      	b.n	b5f12 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   b5f74:	2401      	movs	r4, #1
   b5f76:	e7e9      	b.n	b5f4c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   b5f78:	4628      	mov	r0, r5
   b5f7a:	f7ff f8bf 	bl	b50fc <malloc>
   b5f7e:	2400      	movs	r4, #0
   b5f80:	ab03      	add	r3, sp, #12
   b5f82:	4606      	mov	r6, r0
   b5f84:	9003      	str	r0, [sp, #12]
   b5f86:	9304      	str	r3, [sp, #16]
   b5f88:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   b5f8c:	b978      	cbnz	r0, b5fae <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   b5f8e:	2320      	movs	r3, #32
   b5f90:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b5f94:	4b0e      	ldr	r3, [pc, #56]	; (b5fd0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b5f96:	9300      	str	r3, [sp, #0]
   b5f98:	490e      	ldr	r1, [pc, #56]	; (b5fd4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b5f9a:	4603      	mov	r3, r0
   b5f9c:	aa06      	add	r2, sp, #24
   b5f9e:	2032      	movs	r0, #50	; 0x32
   b5fa0:	f7fe fff8 	bl	b4f94 <log_message>
                    return false;
   b5fa4:	4634      	mov	r4, r6
   b5fa6:	a804      	add	r0, sp, #16
   b5fa8:	f7ff ff89 	bl	b5ebe <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   b5fac:	e7b4      	b.n	b5f18 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   b5fae:	4602      	mov	r2, r0
   b5fb0:	21ff      	movs	r1, #255	; 0xff
   b5fb2:	462b      	mov	r3, r5
   b5fb4:	4638      	mov	r0, r7
   b5fb6:	f7ff fc3d 	bl	b5834 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   b5fba:	9803      	ldr	r0, [sp, #12]
   b5fbc:	462a      	mov	r2, r5
   b5fbe:	4641      	mov	r1, r8
   b5fc0:	f002 ff86 	bl	b8ed0 <memcmp>
   b5fc4:	2800      	cmp	r0, #0
   b5fc6:	d1ee      	bne.n	b5fa6 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   b5fc8:	2401      	movs	r4, #1
   b5fca:	e7ec      	b.n	b5fa6 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   b5fcc:	2401      	movs	r4, #1
   b5fce:	e7a3      	b.n	b5f18 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   b5fd0:	000b93e8 	.word	0x000b93e8
   b5fd4:	000b937f 	.word	0x000b937f

000b5fd8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b5fd8:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b5fda:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b5fdc:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b5fde:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5fe0:	dd03      	ble.n	b5fea <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b5fe2:	f7ff f89b 	bl	b511c <realloc>
            if (!d) {
   b5fe6:	b918      	cbnz	r0, b5ff0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b5fe8:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b5fea:	f7ff f88f 	bl	b510c <free>
        T* d = nullptr;
   b5fee:	2000      	movs	r0, #0
        data_ = d;
   b5ff0:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5ff2:	60a5      	str	r5, [r4, #8]
        return true;
   b5ff4:	2001      	movs	r0, #1
   b5ff6:	e7f7      	b.n	b5fe8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b5ff8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b5ff8:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b5ffa:	6883      	ldr	r3, [r0, #8]
   b5ffc:	428b      	cmp	r3, r1
   b5ffe:	da02      	bge.n	b6006 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b6000:	f7ff ffea 	bl	b5fd8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b6004:	bd08      	pop	{r3, pc}
    return true;
   b6006:	2001      	movs	r0, #1
   b6008:	e7fc      	b.n	b6004 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b600a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b600a:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b600c:	2300      	movs	r3, #0
   b600e:	e9c0 3300 	strd	r3, r3, [r0]
   b6012:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6014:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6016:	6849      	ldr	r1, [r1, #4]
   b6018:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b601a:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b601c:	dd10      	ble.n	b6040 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   b601e:	f7ff ffdb 	bl	b5fd8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b6022:	b168      	cbz	r0, b6040 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6024:	e9d5 3100 	ldrd	r3, r1, [r5]
   b6028:	6822      	ldr	r2, [r4, #0]
   b602a:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   b602c:	4299      	cmp	r1, r3
   b602e:	d005      	beq.n	b603c <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   b6030:	b10a      	cbz	r2, b6036 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   b6032:	7818      	ldrb	r0, [r3, #0]
   b6034:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   b6036:	3301      	adds	r3, #1
   b6038:	3201      	adds	r2, #1
   b603a:	e7f7      	b.n	b602c <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   b603c:	686b      	ldr	r3, [r5, #4]
   b603e:	6063      	str	r3, [r4, #4]
}
   b6040:	4620      	mov	r0, r4
   b6042:	bd38      	pop	{r3, r4, r5, pc}

000b6044 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   b6044:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   b6046:	680b      	ldr	r3, [r1, #0]
   b6048:	6003      	str	r3, [r0, #0]
   b604a:	684b      	ldr	r3, [r1, #4]
   b604c:	6043      	str	r3, [r0, #4]
   b604e:	4604      	mov	r4, r0
   b6050:	460d      	mov	r5, r1
class BleAdvertisingData {
   b6052:	3008      	adds	r0, #8
   b6054:	3108      	adds	r1, #8
   b6056:	f7ff ffd8 	bl	b600a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b605a:	f105 0114 	add.w	r1, r5, #20
   b605e:	f104 0014 	add.w	r0, r4, #20
   b6062:	f7ff ffd2 	bl	b600a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b6066:	f895 3020 	ldrb.w	r3, [r5, #32]
   b606a:	f884 3020 	strb.w	r3, [r4, #32]
   b606e:	4620      	mov	r0, r4
   b6070:	bd38      	pop	{r3, r4, r5, pc}

000b6072 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   b6072:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6074:	4604      	mov	r4, r0
   b6076:	a801      	add	r0, sp, #4
   b6078:	f7ff ffc7 	bl	b600a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b607c:	9b01      	ldr	r3, [sp, #4]
   b607e:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6080:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b6082:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6084:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6086:	6062      	str	r2, [r4, #4]
   b6088:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b608a:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b608c:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b608e:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6090:	9001      	str	r0, [sp, #4]
   b6092:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   b6094:	f7ff f83a 	bl	b510c <free>
   b6098:	b004      	add	sp, #16
   b609a:	bd10      	pop	{r4, pc}

000b609c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b609c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b60a0:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b60a2:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b60a4:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b60a6:	4419      	add	r1, r3
   b60a8:	6883      	ldr	r3, [r0, #8]
   b60aa:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b60ac:	4604      	mov	r4, r0
   b60ae:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b60b0:	dc12      	bgt.n	b60d8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b60b2:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b60b4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b60b6:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b60b8:	1bd2      	subs	r2, r2, r7
   b60ba:	4631      	mov	r1, r6
   b60bc:	1970      	adds	r0, r6, r5
   b60be:	f002 ff25 	bl	b8f0c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b60c2:	462a      	mov	r2, r5
   b60c4:	4641      	mov	r1, r8
   b60c6:	4630      	mov	r0, r6
   b60c8:	f002 ff12 	bl	b8ef0 <memcpy>
    size_ += n;
   b60cc:	6863      	ldr	r3, [r4, #4]
   b60ce:	442b      	add	r3, r5
   b60d0:	6063      	str	r3, [r4, #4]
    return true;
   b60d2:	2001      	movs	r0, #1
}
   b60d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b60d8:	f7ff ff7e 	bl	b5fd8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b60dc:	2800      	cmp	r0, #0
   b60de:	d1e8      	bne.n	b60b2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b60e0:	e7f8      	b.n	b60d4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b60e2 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b60e2:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   b60e4:	460a      	mov	r2, r1
   b60e6:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b60e8:	b510      	push	{r4, lr}
   b60ea:	4604      	mov	r4, r0
    size_ = 0;
   b60ec:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   b60ee:	b102      	cbz	r2, b60f2 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   b60f0:	b90b      	cbnz	r3, b60f6 <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   b60f2:	2000      	movs	r0, #0
}
   b60f4:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   b60f6:	2bff      	cmp	r3, #255	; 0xff
   b60f8:	bf28      	it	cs
   b60fa:	23ff      	movcs	r3, #255	; 0xff
   b60fc:	f7ff ffce 	bl	b609c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   b6100:	2800      	cmp	r0, #0
   b6102:	d0f7      	beq.n	b60f4 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   b6104:	6860      	ldr	r0, [r4, #4]
   b6106:	e7f5      	b.n	b60f4 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000b6108 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b610a:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b610c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b6110:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6112:	4604      	mov	r4, r0
   b6114:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6116:	da0b      	bge.n	b6130 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b6118:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b611a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b611c:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b611e:	1b52      	subs	r2, r2, r5
   b6120:	1c48      	adds	r0, r1, #1
   b6122:	f002 fef3 	bl	b8f0c <memmove>
    new(p) T(std::move(value));
   b6126:	557e      	strb	r6, [r7, r5]
    ++size_;
   b6128:	6863      	ldr	r3, [r4, #4]
   b612a:	3301      	adds	r3, #1
   b612c:	6063      	str	r3, [r4, #4]
}
   b612e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6130:	3101      	adds	r1, #1
   b6132:	f7ff ff51 	bl	b5fd8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b6136:	2800      	cmp	r0, #0
   b6138:	d1ee      	bne.n	b6118 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b613a:	e7f8      	b.n	b612e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b613c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b613c:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b613e:	6841      	ldr	r1, [r0, #4]
   b6140:	f7ff bfe2 	b.w	b6108 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b6144 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6144:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6148:	4604      	mov	r4, r0
   b614a:	461d      	mov	r5, r3
   b614c:	460f      	mov	r7, r1
   b614e:	ab01      	add	r3, sp, #4
   b6150:	4690      	mov	r8, r2
   b6152:	460a      	mov	r2, r1
   b6154:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6158:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b615c:	f7ff f9da 	bl	b5514 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b6160:	1cae      	adds	r6, r5, #2
   b6162:	6863      	ldr	r3, [r4, #4]
   b6164:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b6166:	f1b9 0f00 	cmp.w	r9, #0
   b616a:	d126      	bne.n	b61ba <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b616c:	b328      	cbz	r0, b61ba <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b616e:	4433      	add	r3, r6
   b6170:	1a1b      	subs	r3, r3, r0
   b6172:	2bff      	cmp	r3, #255	; 0xff
   b6174:	d809      	bhi.n	b618a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b6176:	9901      	ldr	r1, [sp, #4]
   b6178:	4620      	mov	r0, r4
   b617a:	f7ff fcfe 	bl	b5b7a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b617e:	6861      	ldr	r1, [r4, #4]
   b6180:	4620      	mov	r0, r4
   b6182:	4431      	add	r1, r6
   b6184:	f7ff ff38 	bl	b5ff8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b6188:	b918      	cbnz	r0, b6192 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b618a:	6860      	ldr	r0, [r4, #4]
}
   b618c:	b003      	add	sp, #12
   b618e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b6192:	1c6a      	adds	r2, r5, #1
   b6194:	9901      	ldr	r1, [sp, #4]
   b6196:	b2d2      	uxtb	r2, r2
   b6198:	4620      	mov	r0, r4
   b619a:	f7ff ffb5 	bl	b6108 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b619e:	9901      	ldr	r1, [sp, #4]
   b61a0:	463a      	mov	r2, r7
   b61a2:	3101      	adds	r1, #1
   b61a4:	4620      	mov	r0, r4
   b61a6:	f7ff ffaf 	bl	b6108 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b61aa:	9901      	ldr	r1, [sp, #4]
   b61ac:	462b      	mov	r3, r5
   b61ae:	4642      	mov	r2, r8
   b61b0:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b61b2:	4620      	mov	r0, r4
   b61b4:	f7ff ff72 	bl	b609c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b61b8:	e7e7      	b.n	b618a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b61ba:	18f1      	adds	r1, r6, r3
   b61bc:	29ff      	cmp	r1, #255	; 0xff
   b61be:	d8e4      	bhi.n	b618a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b61c0:	4620      	mov	r0, r4
   b61c2:	f7ff ff19 	bl	b5ff8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b61c6:	2800      	cmp	r0, #0
   b61c8:	d0df      	beq.n	b618a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b61ca:	1c69      	adds	r1, r5, #1
   b61cc:	b2c9      	uxtb	r1, r1
   b61ce:	4620      	mov	r0, r4
   b61d0:	f7ff ffb4 	bl	b613c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b61d4:	4639      	mov	r1, r7
   b61d6:	4620      	mov	r0, r4
   b61d8:	f7ff ffb0 	bl	b613c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b61dc:	6861      	ldr	r1, [r4, #4]
   b61de:	462b      	mov	r3, r5
   b61e0:	4642      	mov	r2, r8
   b61e2:	e7e6      	b.n	b61b2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b61e4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b61e4:	b430      	push	{r4, r5}
   b61e6:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b61ea:	b11a      	cbz	r2, b61f4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b61ec:	9502      	str	r5, [sp, #8]
}
   b61ee:	bc30      	pop	{r4, r5}
   b61f0:	f7ff bfa8 	b.w	b6144 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b61f4:	6840      	ldr	r0, [r0, #4]
}
   b61f6:	bc30      	pop	{r4, r5}
   b61f8:	4770      	bx	lr

000b61fa <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b61fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b61fc:	2300      	movs	r3, #0
   b61fe:	e9c0 3300 	strd	r3, r3, [r0]
   b6202:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b6204:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6206:	9300      	str	r3, [sp, #0]
   b6208:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b620a:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b620e:	4619      	mov	r1, r3
   b6210:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b6214:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6216:	f7ff ffe5 	bl	b61e4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b621a:	4620      	mov	r0, r4
   b621c:	b004      	add	sp, #16
   b621e:	bd10      	pop	{r4, pc}

000b6220 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6220:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6224:	4604      	mov	r4, r0
   b6226:	460d      	mov	r5, r1
   b6228:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b622a:	d914      	bls.n	b6256 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b622c:	4290      	cmp	r0, r2
   b622e:	d213      	bcs.n	b6258 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6230:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b6234:	1a75      	subs	r5, r6, r1
   b6236:	f1a1 0708 	sub.w	r7, r1, #8
   b623a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b623c:	42b7      	cmp	r7, r6
   b623e:	d018      	beq.n	b6272 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6240:	b11c      	cbz	r4, b624a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6242:	4631      	mov	r1, r6
   b6244:	4620      	mov	r0, r4
   b6246:	f7ff fcb3 	bl	b5bb0 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b624a:	1d30      	adds	r0, r6, #4
   b624c:	f7ff fcba 	bl	b5bc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6250:	3e08      	subs	r6, #8
   b6252:	3c08      	subs	r4, #8
   b6254:	e7f2      	b.n	b623c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6256:	d00c      	beq.n	b6272 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6258:	42b5      	cmp	r5, r6
   b625a:	d00a      	beq.n	b6272 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b625c:	b11c      	cbz	r4, b6266 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b625e:	4629      	mov	r1, r5
   b6260:	4620      	mov	r0, r4
   b6262:	f7ff fca5 	bl	b5bb0 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6266:	1d28      	adds	r0, r5, #4
   b6268:	f7ff fcac 	bl	b5bc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b626c:	3508      	adds	r5, #8
   b626e:	3408      	adds	r4, #8
   b6270:	e7f2      	b.n	b6258 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6274 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6276:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b6278:	6846      	ldr	r6, [r0, #4]
   b627a:	4668      	mov	r0, sp
   b627c:	f7ff fc98 	bl	b5bb0 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6280:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b6284:	429f      	cmp	r7, r3
   b6286:	db12      	blt.n	b62ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b6288:	3701      	adds	r7, #1
        if (n > 0) {
   b628a:	2f00      	cmp	r7, #0
   b628c:	dd29      	ble.n	b62e2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b628e:	00f8      	lsls	r0, r7, #3
   b6290:	f7fe ff34 	bl	b50fc <malloc>
            if (!d) {
   b6294:	4605      	mov	r5, r0
   b6296:	b1f0      	cbz	r0, b62d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b6298:	e9d4 1200 	ldrd	r1, r2, [r4]
   b629c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b62a0:	f7ff ffbe 	bl	b6220 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b62a4:	6820      	ldr	r0, [r4, #0]
   b62a6:	f7fe ff31 	bl	b510c <free>
        data_ = d;
   b62aa:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b62ac:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b62ae:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b62b0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b62b2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b62b6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b62ba:	4631      	mov	r1, r6
   b62bc:	f106 0008 	add.w	r0, r6, #8
   b62c0:	f7ff ffae 	bl	b6220 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b62c4:	b11e      	cbz	r6, b62ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b62c6:	4669      	mov	r1, sp
   b62c8:	4630      	mov	r0, r6
   b62ca:	f7ff fc71 	bl	b5bb0 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b62ce:	6863      	ldr	r3, [r4, #4]
   b62d0:	3301      	adds	r3, #1
   b62d2:	6063      	str	r3, [r4, #4]
    return true;
   b62d4:	2501      	movs	r5, #1
   b62d6:	a801      	add	r0, sp, #4
   b62d8:	f7ff fc74 	bl	b5bc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b62dc:	4628      	mov	r0, r5
   b62de:	b003      	add	sp, #12
   b62e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b62e2:	2500      	movs	r5, #0
   b62e4:	e7de      	b.n	b62a4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b62e6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b62e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b62e8:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b62ec:	4605      	mov	r5, r0
   b62ee:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b62f0:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b62f4:	42a6      	cmp	r6, r4
   b62f6:	d005      	beq.n	b6304 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b62f8:	4639      	mov	r1, r7
   b62fa:	4620      	mov	r0, r4
   b62fc:	f7ff fb3d 	bl	b597a <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b6300:	b108      	cbz	r0, b6306 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b6302:	b914      	cbnz	r4, b630a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b6304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b6306:	3408      	adds	r4, #8
   b6308:	e7f4      	b.n	b62f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b630a:	1d20      	adds	r0, r4, #4
   b630c:	f7ff fc5a 	bl	b5bc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b6310:	e9d5 3200 	ldrd	r3, r2, [r5]
   b6314:	f104 0108 	add.w	r1, r4, #8
   b6318:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b631c:	4620      	mov	r0, r4
   b631e:	f7ff ff7f 	bl	b6220 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b6322:	686b      	ldr	r3, [r5, #4]
   b6324:	3b01      	subs	r3, #1
   b6326:	606b      	str	r3, [r5, #4]
    return true;
   b6328:	e7ec      	b.n	b6304 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b632c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b632c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6330:	4605      	mov	r5, r0
   b6332:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b6334:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b6336:	460c      	mov	r4, r1
        WiringBleLock lk;
   b6338:	f7ff f968 	bl	b560c <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b633c:	682e      	ldr	r6, [r5, #0]
   b633e:	1ef3      	subs	r3, r6, #3
   b6340:	2b0d      	cmp	r3, #13
   b6342:	d83c      	bhi.n	b63be <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b6344:	e8df f013 	tbh	[pc, r3, lsl #1]
   b6348:	0057000e 	.word	0x0057000e
   b634c:	00d3003b 	.word	0x00d3003b
   b6350:	003b003b 	.word	0x003b003b
   b6354:	003b003b 	.word	0x003b003b
   b6358:	009d003b 	.word	0x009d003b
   b635c:	009d009d 	.word	0x009d009d
   b6360:	009d009d 	.word	0x009d009d
                    BlePeerDevice peer;
   b6364:	a804      	add	r0, sp, #16
   b6366:	f7ff fad3 	bl	b5910 <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
   b636a:	9b04      	ldr	r3, [sp, #16]
   b636c:	89aa      	ldrh	r2, [r5, #12]
   b636e:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
   b6370:	6869      	ldr	r1, [r5, #4]
   b6372:	9804      	ldr	r0, [sp, #16]
   b6374:	3108      	adds	r1, #8
   b6376:	3002      	adds	r0, #2
   b6378:	f7ff f96c 	bl	b5654 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b637c:	a904      	add	r1, sp, #16
   b637e:	a806      	add	r0, sp, #24
   b6380:	f7ff fc16 	bl	b5bb0 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
   b6384:	a906      	add	r1, sp, #24
   b6386:	f104 0018 	add.w	r0, r4, #24
   b638a:	f7ff ff73 	bl	b6274 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b638e:	4605      	mov	r5, r0
   b6390:	a807      	add	r0, sp, #28
   b6392:	f7ff fc17 	bl	b5bc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6396:	b9c5      	cbnz	r5, b63ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                        LOG(TRACE, "Failed to append peer Central device.");
   b6398:	2320      	movs	r3, #32
   b639a:	e9cd 3506 	strd	r3, r5, [sp, #24]
   b639e:	4b5e      	ldr	r3, [pc, #376]	; (b6518 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b63a0:	495e      	ldr	r1, [pc, #376]	; (b651c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b63a2:	9300      	str	r3, [sp, #0]
   b63a4:	aa06      	add	r2, sp, #24
   b63a6:	462b      	mov	r3, r5
   b63a8:	2001      	movs	r0, #1
   b63aa:	f7fe fdf3 	bl	b4f94 <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b63ae:	9b04      	ldr	r3, [sp, #16]
   b63b0:	4629      	mov	r1, r5
   b63b2:	8818      	ldrh	r0, [r3, #0]
   b63b4:	f7fe fcca 	bl	b4d4c <hal_ble_gap_disconnect>
   b63b8:	a805      	add	r0, sp, #20
   b63ba:	f7ff fc03 	bl	b5bc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b63be:	a803      	add	r0, sp, #12
   b63c0:	f7ff f932 	bl	b5628 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b63c4:	b00e      	add	sp, #56	; 0x38
   b63c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if (impl->connectedCallback_) {
   b63ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b63cc:	b123      	cbz	r3, b63d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
                        impl->connectedCallback_(peer);
   b63ce:	a904      	add	r1, sp, #16
   b63d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b63d4:	f7ff fc5e 	bl	b5c94 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b63d8:	a805      	add	r0, sp, #20
   b63da:	f7ff fbf3 	bl	b5bc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
   b63de:	2120      	movs	r1, #32
   b63e0:	2300      	movs	r3, #0
   b63e2:	e9cd 1306 	strd	r1, r3, [sp, #24]
   b63e6:	4a4e      	ldr	r2, [pc, #312]	; (b6520 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
                    LOG(TRACE, "Disconnected");
   b63e8:	9200      	str	r2, [sp, #0]
   b63ea:	494c      	ldr	r1, [pc, #304]	; (b651c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b63ec:	aa06      	add	r2, sp, #24
   b63ee:	2001      	movs	r0, #1
   b63f0:	f7fe fdd0 	bl	b4f94 <log_message>
   b63f4:	e7e3      	b.n	b63be <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b63f6:	89a9      	ldrh	r1, [r5, #12]
   b63f8:	4620      	mov	r0, r4
   b63fa:	f7ff fa77 	bl	b58ec <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b63fe:	4606      	mov	r6, r0
   b6400:	2800      	cmp	r0, #0
   b6402:	d0dc      	beq.n	b63be <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b6404:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b6406:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b640a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b640e:	8029      	strh	r1, [r5, #0]
   b6410:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b6414:	429a      	cmp	r2, r3
   b6416:	d003      	beq.n	b6420 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
   b6418:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b641c:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b641e:	e7f9      	b.n	b6414 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe8>
    destruct(data_, data_ + size_);
   b6420:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b6424:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b6428:	45b8      	cmp	r8, r7
   b642a:	d004      	beq.n	b6436 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10a>
      ~__shared_ptr() = default;
   b642c:	1d38      	adds	r0, r7, #4
   b642e:	f7ff fbc9 	bl	b5bc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6432:	3708      	adds	r7, #8
   b6434:	e7f8      	b.n	b6428 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfc>
    size_ = 0;
   b6436:	2300      	movs	r3, #0
   b6438:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b643a:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b643e:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b6442:	45b8      	cmp	r8, r7
   b6444:	d004      	beq.n	b6450 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
   b6446:	1d38      	adds	r0, r7, #4
   b6448:	f7ff fbbc 	bl	b5bc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b644c:	3708      	adds	r7, #8
   b644e:	e7f8      	b.n	b6442 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
    size_ = 0;
   b6450:	2300      	movs	r3, #0
   b6452:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b6454:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
   b6456:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b6458:	b123      	cbz	r3, b6464 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>
                            impl->disconnectedCallback_(*peer);
   b645a:	4631      	mov	r1, r6
   b645c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6460:	f7ff fc18 	bl	b5c94 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
      { return _M_ptr; }
   b6464:	6833      	ldr	r3, [r6, #0]
                        peer->impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b6466:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b646a:	801a      	strh	r2, [r3, #0]
                        impl->peers_.removeOne(*peer);
   b646c:	4631      	mov	r1, r6
   b646e:	f104 0018 	add.w	r0, r4, #24
   b6472:	f7ff ff38 	bl	b62e6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
   b6476:	2220      	movs	r2, #32
   b6478:	2300      	movs	r3, #0
   b647a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b647e:	4a29      	ldr	r2, [pc, #164]	; (b6524 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f8>)
   b6480:	e7b2      	b.n	b63e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbc>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b6482:	89a9      	ldrh	r1, [r5, #12]
   b6484:	4620      	mov	r0, r4
   b6486:	f7ff fa31 	bl	b58ec <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b648a:	2800      	cmp	r0, #0
   b648c:	d097      	beq.n	b63be <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b648e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b6490:	2b00      	cmp	r3, #0
   b6492:	d094      	beq.n	b63be <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b6494:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b6496:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b6498:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b649c:	d001      	beq.n	b64a2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x176>
   b649e:	2e10      	cmp	r6, #16
   b64a0:	d117      	bne.n	b64d2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a6>
                        BlePairingEventPayload payload = {};
   b64a2:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b64a4:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b64a6:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b64a8:	2506      	movs	r5, #6
                        };
   b64aa:	f88d 3015 	strb.w	r3, [sp, #21]
   b64ae:	9104      	str	r1, [sp, #16]
   b64b0:	f88d 2014 	strb.w	r2, [sp, #20]
   b64b4:	9006      	str	r0, [sp, #24]
   b64b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b64ba:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b64bc:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b64c0:	9508      	str	r5, [sp, #32]
   b64c2:	e883 0003 	stmia.w	r3, {r0, r1}
   b64c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b64c8:	a906      	add	r1, sp, #24
   b64ca:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b64ce:	4798      	blx	r3
   b64d0:	e775      	b.n	b63be <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b64d2:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b64d4:	bf01      	itttt	eq
   b64d6:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b64d8:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b64da:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b64de:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b64e0:	bf0f      	iteee	eq
   b64e2:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b64e6:	461a      	movne	r2, r3
   b64e8:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b64ea:	461d      	movne	r5, r3
   b64ec:	e7dd      	b.n	b64aa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b64ee:	89a9      	ldrh	r1, [r5, #12]
   b64f0:	4620      	mov	r0, r4
   b64f2:	f7ff f9fb 	bl	b58ec <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b64f6:	4601      	mov	r1, r0
   b64f8:	2800      	cmp	r0, #0
   b64fa:	f43f af60 	beq.w	b63be <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b64fe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b6500:	2b00      	cmp	r3, #0
   b6502:	f43f af5c 	beq.w	b63be <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b6506:	686b      	ldr	r3, [r5, #4]
   b6508:	9306      	str	r3, [sp, #24]
   b650a:	aa06      	add	r2, sp, #24
   b650c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b650e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b6512:	4798      	blx	r3
   b6514:	e753      	b.n	b63be <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b6516:	bf00      	nop
   b6518:	000b9403 	.word	0x000b9403
   b651c:	000b937f 	.word	0x000b937f
   b6520:	000b9429 	.word	0x000b9429
   b6524:	000b9433 	.word	0x000b9433

000b6528 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b6528:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b652a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b652c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b652e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b6530:	dd05      	ble.n	b653e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   b6532:	2114      	movs	r1, #20
   b6534:	4369      	muls	r1, r5
   b6536:	f7fe fdf1 	bl	b511c <realloc>
            if (!d) {
   b653a:	b918      	cbnz	r0, b6544 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   b653c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b653e:	f7fe fde5 	bl	b510c <free>
        T* d = nullptr;
   b6542:	2000      	movs	r0, #0
        data_ = d;
   b6544:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b6546:	60a5      	str	r5, [r4, #8]
        return true;
   b6548:	2001      	movs	r0, #1
   b654a:	e7f7      	b.n	b653c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000b654c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b654c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   b6550:	2400      	movs	r4, #0
   b6552:	e9c0 4400 	strd	r4, r4, [r0]
   b6556:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6558:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b655a:	6849      	ldr	r1, [r1, #4]
   b655c:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b655e:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6560:	dd1a      	ble.n	b6598 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b6562:	f7ff ffe1 	bl	b6528 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6566:	b1b8      	cbz	r0, b6598 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6568:	e9d8 9300 	ldrd	r9, r3, [r8]
   b656c:	f04f 0c14 	mov.w	ip, #20
   b6570:	f8d7 e000 	ldr.w	lr, [r7]
   b6574:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   b6578:	eb09 0504 	add.w	r5, r9, r4
   b657c:	45ac      	cmp	ip, r5
   b657e:	d008      	beq.n	b6592 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   b6580:	eb1e 0604 	adds.w	r6, lr, r4
   b6584:	bf1f      	itttt	ne
   b6586:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   b6588:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   b658a:	682b      	ldrne	r3, [r5, #0]
   b658c:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   b658e:	3414      	adds	r4, #20
   b6590:	e7f2      	b.n	b6578 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   b6592:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b6596:	607b      	str	r3, [r7, #4]
}
   b6598:	4638      	mov	r0, r7
   b659a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b659e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b659e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   b65a2:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   b65a6:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b65a8:	6883      	ldr	r3, [r0, #8]
   b65aa:	19e9      	adds	r1, r5, r7
   b65ac:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b65ae:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b65b0:	dc17      	bgt.n	b65e2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   b65b2:	2314      	movs	r3, #20
   b65b4:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   b65b6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b65b8:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   b65ba:	fb03 f907 	mul.w	r9, r3, r7
   b65be:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b65c0:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b65c2:	1b52      	subs	r2, r2, r5
   b65c4:	4631      	mov	r1, r6
   b65c6:	eb06 0009 	add.w	r0, r6, r9
   b65ca:	f002 fc9f 	bl	b8f0c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b65ce:	464a      	mov	r2, r9
   b65d0:	4641      	mov	r1, r8
   b65d2:	4630      	mov	r0, r6
   b65d4:	f002 fc8c 	bl	b8ef0 <memcpy>
    size_ += n;
   b65d8:	6863      	ldr	r3, [r4, #4]
   b65da:	443b      	add	r3, r7
   b65dc:	6063      	str	r3, [r4, #4]
}
   b65de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b65e2:	f7ff ffa1 	bl	b6528 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b65e6:	2800      	cmp	r0, #0
   b65e8:	d1e3      	bne.n	b65b2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   b65ea:	e7f8      	b.n	b65de <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000b65ec <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b65ec:	b082      	sub	sp, #8
   b65ee:	b570      	push	{r4, r5, r6, lr}
   b65f0:	460c      	mov	r4, r1
   b65f2:	a904      	add	r1, sp, #16
   b65f4:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b65f8:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b65fc:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b65fe:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6600:	da17      	bge.n	b6632 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   b6602:	2314      	movs	r3, #20
   b6604:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   b6608:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   b660a:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   b660c:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b660e:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6610:	1a52      	subs	r2, r2, r1
   b6612:	18e0      	adds	r0, r4, r3
   b6614:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   b6616:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6618:	f002 fc78 	bl	b8f0c <memmove>
    new(p) T(std::move(value));
   b661c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b661e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6620:	6833      	ldr	r3, [r6, #0]
   b6622:	6023      	str	r3, [r4, #0]
    ++size_;
   b6624:	686b      	ldr	r3, [r5, #4]
   b6626:	3301      	adds	r3, #1
   b6628:	606b      	str	r3, [r5, #4]
}
   b662a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b662e:	b002      	add	sp, #8
   b6630:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6632:	3101      	adds	r1, #1
   b6634:	f7ff ff78 	bl	b6528 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6638:	2800      	cmp	r0, #0
   b663a:	d1e2      	bne.n	b6602 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   b663c:	e7f5      	b.n	b662a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000b663e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b663e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   b6642:	2400      	movs	r4, #0
   b6644:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b6646:	1e93      	subs	r3, r2, #2
   b6648:	e9c0 4400 	strd	r4, r4, [r0]
   b664c:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b664e:	4605      	mov	r5, r0
   b6650:	460f      	mov	r7, r1
   b6652:	4690      	mov	r8, r2
   b6654:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b6656:	9305      	str	r3, [sp, #20]
    return size_;
   b6658:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b665a:	428c      	cmp	r4, r1
   b665c:	da72      	bge.n	b6744 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   b665e:	6838      	ldr	r0, [r7, #0]
   b6660:	ab07      	add	r3, sp, #28
   b6662:	4642      	mov	r2, r8
   b6664:	1b09      	subs	r1, r1, r4
   b6666:	4420      	add	r0, r4
   b6668:	f7fe ff54 	bl	b5514 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   b666c:	4606      	mov	r6, r0
   b666e:	2800      	cmp	r0, #0
   b6670:	d068      	beq.n	b6744 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b6672:	9b05      	ldr	r3, [sp, #20]
   b6674:	2b01      	cmp	r3, #1
   b6676:	d82f      	bhi.n	b66d8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b6678:	f1a0 0b02 	sub.w	fp, r0, #2
   b667c:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   b6680:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   b6684:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b6688:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b668a:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b668c:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b668e:	d055      	beq.n	b673c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   b6690:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b6692:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   b6696:	4413      	add	r3, r2
   b6698:	a808      	add	r0, sp, #32
   b669a:	78d9      	ldrb	r1, [r3, #3]
   b669c:	789b      	ldrb	r3, [r3, #2]
   b669e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   b66a2:	f7ff f832 	bl	b570a <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   b66a6:	f10d 0e20 	add.w	lr, sp, #32
   b66aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b66ae:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b66b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b66b6:	f8de 3000 	ldr.w	r3, [lr]
   b66ba:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b66be:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b66c2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b66c6:	ab0d      	add	r3, sp, #52	; 0x34
   b66c8:	cb0c      	ldmia	r3, {r2, r3}
   b66ca:	6869      	ldr	r1, [r5, #4]
   b66cc:	4628      	mov	r0, r5
   b66ce:	f7ff ff8d 	bl	b65ec <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b66d2:	f109 0901 	add.w	r9, r9, #1
   b66d6:	e7d7      	b.n	b6688 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   b66d8:	f1a8 0306 	sub.w	r3, r8, #6
   b66dc:	2b01      	cmp	r3, #1
   b66de:	d82d      	bhi.n	b673c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b66e0:	f1a0 0b02 	sub.w	fp, r0, #2
   b66e4:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   b66e8:	f04f 0900 	mov.w	r9, #0
   b66ec:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   b66f0:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b66f2:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b66f4:	d022      	beq.n	b673c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b66f6:	3302      	adds	r3, #2
    return data_[i];
   b66f8:	6839      	ldr	r1, [r7, #0]
   b66fa:	4423      	add	r3, r4
   b66fc:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   b6700:	2201      	movs	r2, #1
   b6702:	4419      	add	r1, r3
   b6704:	a808      	add	r0, sp, #32
   b6706:	f7fe ffe1 	bl	b56cc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   b670a:	f10d 0e20 	add.w	lr, sp, #32
   b670e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b6712:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b6716:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b671a:	f8de 3000 	ldr.w	r3, [lr]
   b671e:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b6722:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b6726:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b672a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   b672e:	6869      	ldr	r1, [r5, #4]
   b6730:	4628      	mov	r0, r5
   b6732:	f7ff ff5b 	bl	b65ec <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b6736:	f109 0901 	add.w	r9, r9, #1
   b673a:	e7d9      	b.n	b66f0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b673c:	9b07      	ldr	r3, [sp, #28]
   b673e:	441c      	add	r4, r3
   b6740:	4434      	add	r4, r6
   b6742:	e789      	b.n	b6658 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   b6744:	4628      	mov	r0, r5
   b6746:	b013      	add	sp, #76	; 0x4c
   b6748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b674c <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b674c:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   b674e:	2300      	movs	r3, #0
   b6750:	b085      	sub	sp, #20
   b6752:	e9c0 3300 	strd	r3, r3, [r0]
   b6756:	6083      	str	r3, [r0, #8]
   b6758:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b675a:	2202      	movs	r2, #2
   b675c:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b675e:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b6760:	f7ff ff6d 	bl	b663e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b6764:	a901      	add	r1, sp, #4
   b6766:	4620      	mov	r0, r4
   b6768:	f7ff ff19 	bl	b659e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b676c:	a801      	add	r0, sp, #4
   b676e:	f7ff f9d3 	bl	b5b18 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b6772:	2202      	movs	r2, #2
   b6774:	4629      	mov	r1, r5
   b6776:	a801      	add	r0, sp, #4
   b6778:	f7ff ff61 	bl	b663e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b677c:	a901      	add	r1, sp, #4
   b677e:	4620      	mov	r0, r4
   b6780:	f7ff ff0d 	bl	b659e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b6784:	a801      	add	r0, sp, #4
   b6786:	f7ff f9c7 	bl	b5b18 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   b678a:	2203      	movs	r2, #3
   b678c:	4629      	mov	r1, r5
   b678e:	a801      	add	r0, sp, #4
   b6790:	f7ff ff55 	bl	b663e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b6794:	a901      	add	r1, sp, #4
   b6796:	4620      	mov	r0, r4
   b6798:	f7ff ff01 	bl	b659e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b679c:	a801      	add	r0, sp, #4
   b679e:	f7ff f9bb 	bl	b5b18 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   b67a2:	2206      	movs	r2, #6
   b67a4:	4629      	mov	r1, r5
   b67a6:	a801      	add	r0, sp, #4
   b67a8:	f7ff ff49 	bl	b663e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b67ac:	a901      	add	r1, sp, #4
   b67ae:	4620      	mov	r0, r4
   b67b0:	f7ff fef5 	bl	b659e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b67b4:	a801      	add	r0, sp, #4
   b67b6:	f7ff f9af 	bl	b5b18 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   b67ba:	2207      	movs	r2, #7
   b67bc:	4629      	mov	r1, r5
   b67be:	a801      	add	r0, sp, #4
   b67c0:	f7ff ff3d 	bl	b663e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b67c4:	a901      	add	r1, sp, #4
   b67c6:	4620      	mov	r0, r4
   b67c8:	f7ff fee9 	bl	b659e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b67cc:	a801      	add	r0, sp, #4
   b67ce:	f7ff f9a3 	bl	b5b18 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b67d2:	4620      	mov	r0, r4
   b67d4:	b005      	add	sp, #20
   b67d6:	bd30      	pop	{r4, r5, pc}

000b67d8 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   b67d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b67dc:	b085      	sub	sp, #20
   b67de:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b67e0:	4601      	mov	r1, r0
   b67e2:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   b67e4:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b67e6:	f7ff ffb1 	bl	b674c <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return data_;
   b67ea:	9e01      	ldr	r6, [sp, #4]
    return data_ + size_;
   b67ec:	9b02      	ldr	r3, [sp, #8]
   b67ee:	f04f 0e14 	mov.w	lr, #20
   b67f2:	fb0e 6c03 	mla	ip, lr, r3, r6
   b67f6:	2700      	movs	r7, #0
    for (const auto& uuid : foundUuids) {
   b67f8:	45b4      	cmp	ip, r6
   b67fa:	d00d      	beq.n	b6818 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
   b67fc:	45b9      	cmp	r9, r7
   b67fe:	f106 0614 	add.w	r6, r6, #20
   b6802:	d009      	beq.n	b6818 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
   b6804:	f1a6 0514 	sub.w	r5, r6, #20
   b6808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b680a:	fb0e 8407 	mla	r4, lr, r7, r8
   b680e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6810:	682b      	ldr	r3, [r5, #0]
   b6812:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
   b6814:	3701      	adds	r7, #1
   b6816:	e7ef      	b.n	b67f8 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b6818:	a801      	add	r0, sp, #4
   b681a:	f7ff f97d 	bl	b5b18 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b681e:	4638      	mov	r0, r7
   b6820:	b005      	add	sp, #20
   b6822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6826 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   b6826:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b682a:	b08b      	sub	sp, #44	; 0x2c
   b682c:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   b682e:	f100 0144 	add.w	r1, r0, #68	; 0x44
   b6832:	a801      	add	r0, sp, #4
   b6834:	f7ff fe8a 	bl	b654c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   b6838:	9b02      	ldr	r3, [sp, #8]
   b683a:	2b00      	cmp	r3, #0
   b683c:	dd4a      	ble.n	b68d4 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b683e:	f104 0114 	add.w	r1, r4, #20
   b6842:	a804      	add	r0, sp, #16
   b6844:	f7ff ff82 	bl	b674c <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b6848:	f104 0108 	add.w	r1, r4, #8
   b684c:	a807      	add	r0, sp, #28
   b684e:	f7ff ff7d 	bl	b674c <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   b6852:	9d05      	ldr	r5, [sp, #20]
   b6854:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   b6856:	2d00      	cmp	r5, #0
   b6858:	dc01      	bgt.n	b685e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   b685a:	2e00      	cmp	r6, #0
   b685c:	dd38      	ble.n	b68d0 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   b685e:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   b6860:	9f02      	ldr	r7, [sp, #8]
    return data_;
   b6862:	f8dd 8010 	ldr.w	r8, [sp, #16]
   b6866:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   b686a:	2314      	movs	r3, #20
   b686c:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   b6870:	fb03 8505 	mla	r5, r3, r5, r8
   b6874:	fb03 9606 	mla	r6, r3, r6, r9
   b6878:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   b687a:	45ba      	cmp	sl, r7
   b687c:	d028      	beq.n	b68d0 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   b687e:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   b6880:	45ab      	cmp	fp, r5
   b6882:	d015      	beq.n	b68b0 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   b6884:	4659      	mov	r1, fp
   b6886:	4650      	mov	r0, sl
   b6888:	f7fe ff49 	bl	b571e <_ZNK8particle7BleUuideqERKS0_>
   b688c:	f10b 0b14 	add.w	fp, fp, #20
   b6890:	4604      	mov	r4, r0
   b6892:	2800      	cmp	r0, #0
   b6894:	d0f4      	beq.n	b6880 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b6896:	a807      	add	r0, sp, #28
   b6898:	f7ff f93e 	bl	b5b18 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b689c:	a804      	add	r0, sp, #16
   b689e:	f7ff f93b 	bl	b5b18 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   b68a2:	a801      	add	r0, sp, #4
   b68a4:	f7ff f938 	bl	b5b18 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   b68a8:	4620      	mov	r0, r4
   b68aa:	b00b      	add	sp, #44	; 0x2c
   b68ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b68b0:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   b68b2:	45b3      	cmp	fp, r6
   b68b4:	d009      	beq.n	b68ca <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   b68b6:	4659      	mov	r1, fp
   b68b8:	4650      	mov	r0, sl
   b68ba:	f7fe ff30 	bl	b571e <_ZNK8particle7BleUuideqERKS0_>
   b68be:	f10b 0b14 	add.w	fp, fp, #20
   b68c2:	4604      	mov	r4, r0
   b68c4:	2800      	cmp	r0, #0
   b68c6:	d0f4      	beq.n	b68b2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   b68c8:	e7e5      	b.n	b6896 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   b68ca:	f10a 0a14 	add.w	sl, sl, #20
   b68ce:	e7d4      	b.n	b687a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   b68d0:	2400      	movs	r4, #0
   b68d2:	e7e0      	b.n	b6896 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   b68d4:	2401      	movs	r4, #1
   b68d6:	e7e4      	b.n	b68a2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000b68d8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b68d8:	b513      	push	{r0, r1, r4, lr}
   b68da:	460b      	mov	r3, r1
   b68dc:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b68de:	e9d0 0100 	ldrd	r0, r1, [r0]
   b68e2:	466c      	mov	r4, sp
   b68e4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b68e8:	e893 0003 	ldmia.w	r3, {r0, r1}
   b68ec:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b68f0:	e894 0003 	ldmia.w	r4, {r0, r1}
   b68f4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b68f8:	b002      	add	sp, #8
   b68fa:	bd10      	pop	{r4, pc}

000b68fc <_ZN8particle16BleScanDelegator5startEPFvPKNS_13BleScanResultEPvES4_>:
    int start(BleOnScanResultCallback callback, void* context) {
   b68fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b68fe:	4604      	mov	r4, r0
   b6900:	b089      	sub	sp, #36	; 0x24
   b6902:	4616      	mov	r6, r2
        scanResultCallback_ = callback ? std::bind(callback, _1, context) : (std::function<void(const BleScanResult*)>)nullptr;
   b6904:	f100 0718 	add.w	r7, r0, #24
   b6908:	460d      	mov	r5, r1
   b690a:	2900      	cmp	r1, #0
   b690c:	d03a      	beq.n	b6984 <_ZN8particle16BleScanDelegator5startEPFvPKNS_13BleScanResultEPvES4_+0x88>
    _Function_base() : _M_manager(nullptr) { }
   b690e:	2300      	movs	r3, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6910:	2008      	movs	r0, #8
    _Function_base() : _M_manager(nullptr) { }
   b6912:	9302      	str	r3, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6914:	f7fd fbcf 	bl	b40b6 <_Znwj>
   b6918:	b108      	cbz	r0, b691e <_ZN8particle16BleScanDelegator5startEPFvPKNS_13BleScanResultEPvES4_+0x22>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b691a:	e9c0 5600 	strd	r5, r6, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   b691e:	4b1a      	ldr	r3, [pc, #104]	; (b6988 <_ZN8particle16BleScanDelegator5startEPFvPKNS_13BleScanResultEPvES4_+0x8c>)
   b6920:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6922:	4b1a      	ldr	r3, [pc, #104]	; (b698c <_ZN8particle16BleScanDelegator5startEPFvPKNS_13BleScanResultEPvES4_+0x90>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6924:	9000      	str	r0, [sp, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6926:	9302      	str	r3, [sp, #8]
    _Function_base() : _M_manager(nullptr) { }
   b6928:	2500      	movs	r5, #0
	std::swap(_M_functor, __x._M_functor);
   b692a:	a904      	add	r1, sp, #16
   b692c:	4668      	mov	r0, sp
    _Function_base() : _M_manager(nullptr) { }
   b692e:	9506      	str	r5, [sp, #24]
	std::swap(_M_functor, __x._M_functor);
   b6930:	f7ff ffd2 	bl	b68d8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6934:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6936:	9a06      	ldr	r2, [sp, #24]
   b6938:	9202      	str	r2, [sp, #8]
   b693a:	4639      	mov	r1, r7
   b693c:	9a07      	ldr	r2, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   b693e:	9306      	str	r3, [sp, #24]
   b6940:	a804      	add	r0, sp, #16
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6942:	9b03      	ldr	r3, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6944:	9307      	str	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6946:	9203      	str	r2, [sp, #12]
   b6948:	f7ff ffc6 	bl	b68d8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b694c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b694e:	6a22      	ldr	r2, [r4, #32]
      __b = _GLIBCXX_MOVE(__tmp);
   b6950:	6223      	str	r3, [r4, #32]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6952:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6954:	9206      	str	r2, [sp, #24]
    class function<_Res(_ArgTypes...)>
   b6956:	a804      	add	r0, sp, #16
   b6958:	6a62      	ldr	r2, [r4, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
   b695a:	6263      	str	r3, [r4, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b695c:	9207      	str	r2, [sp, #28]
   b695e:	f7fe fe22 	bl	b55a6 <_ZNSt14_Function_baseD1Ev>
   b6962:	4668      	mov	r0, sp
   b6964:	f7fe fe1f 	bl	b55a6 <_ZNSt14_Function_baseD1Ev>
        scanResultCallbackRef_ = nullptr;
   b6968:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b696c:	f7fe fe10 	bl	b5590 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   b6970:	462a      	mov	r2, r5
   b6972:	4621      	mov	r1, r4
   b6974:	4806      	ldr	r0, [pc, #24]	; (b6990 <_ZN8particle16BleScanDelegator5startEPFvPKNS_13BleScanResultEPvES4_+0x94>)
   b6976:	f7fe f9d7 	bl	b4d28 <hal_ble_gap_start_scan>
   b697a:	2800      	cmp	r0, #0
        return foundCount_;
   b697c:	bfa8      	it	ge
   b697e:	6960      	ldrge	r0, [r4, #20]
    }
   b6980:	b009      	add	sp, #36	; 0x24
   b6982:	bdf0      	pop	{r4, r5, r6, r7, pc}
    _Function_base() : _M_manager(nullptr) { }
   b6984:	9102      	str	r1, [sp, #8]
      : _Function_base() { }
   b6986:	e7cf      	b.n	b6928 <_ZN8particle16BleScanDelegator5startEPFvPKNS_13BleScanResultEPvES4_+0x2c>
   b6988:	000b553f 	.word	0x000b553f
   b698c:	000b5551 	.word	0x000b5551
   b6990:	000b6a43 	.word	0x000b6a43

000b6994 <_ZNK8particle14BleLocalDevice4scanEPFvPKNS_13BleScanResultEPvES4_>:
int BleLocalDevice::scan(BleOnScanResultCallback callback, void* context) const {
   b6994:	b510      	push	{r4, lr}
   b6996:	b0a0      	sub	sp, #128	; 0x80
    BleScanDelegator scanner;
   b6998:	a803      	add	r0, sp, #12
int BleLocalDevice::scan(BleOnScanResultCallback callback, void* context) const {
   b699a:	e9cd 2100 	strd	r2, r1, [sp]
    BleScanDelegator scanner;
   b699e:	f7ff f88a 	bl	b5ab6 <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(callback, context);
   b69a2:	e9dd 2100 	ldrd	r2, r1, [sp]
   b69a6:	a803      	add	r0, sp, #12
   b69a8:	f7ff ffa8 	bl	b68fc <_ZN8particle16BleScanDelegator5startEPFvPKNS_13BleScanResultEPvES4_>
   b69ac:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   b69ae:	a803      	add	r0, sp, #12
   b69b0:	f7ff f8b9 	bl	b5b26 <_ZN8particle16BleScanDelegatorD1Ev>
}
   b69b4:	4620      	mov	r0, r4
   b69b6:	b020      	add	sp, #128	; 0x80
   b69b8:	bd10      	pop	{r4, pc}

000b69ba <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b69ba:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b69bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b69be:	4604      	mov	r4, r0
   b69c0:	460d      	mov	r5, r1
   b69c2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b69c4:	d914      	bls.n	b69f0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b69c6:	4290      	cmp	r0, r2
   b69c8:	d213      	bcs.n	b69f2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b69ca:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   b69ce:	1a75      	subs	r5, r6, r1
   b69d0:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   b69d4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b69d6:	42b7      	cmp	r7, r6
   b69d8:	d018      	beq.n	b6a0c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b69da:	b11c      	cbz	r4, b69e4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b69dc:	4631      	mov	r1, r6
   b69de:	4620      	mov	r0, r4
   b69e0:	f7ff fb30 	bl	b6044 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   b69e4:	4630      	mov	r0, r6
   b69e6:	f7ff f85c 	bl	b5aa2 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   b69ea:	3e24      	subs	r6, #36	; 0x24
   b69ec:	3c24      	subs	r4, #36	; 0x24
   b69ee:	e7f2      	b.n	b69d6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b69f0:	d00c      	beq.n	b6a0c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b69f2:	42b5      	cmp	r5, r6
   b69f4:	d00a      	beq.n	b6a0c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b69f6:	b11c      	cbz	r4, b6a00 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b69f8:	4629      	mov	r1, r5
   b69fa:	4620      	mov	r0, r4
   b69fc:	f7ff fb22 	bl	b6044 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   b6a00:	4628      	mov	r0, r5
   b6a02:	f7ff f84e 	bl	b5aa2 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   b6a06:	3524      	adds	r5, #36	; 0x24
   b6a08:	3424      	adds	r4, #36	; 0x24
   b6a0a:	e7f2      	b.n	b69f2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6a0e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b6a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   b6a10:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b6a12:	4605      	mov	r5, r0
        if (n > 0) {
   b6a14:	dd13      	ble.n	b6a3e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b6a16:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   b6a18:	fb07 f006 	mul.w	r0, r7, r6
   b6a1c:	f7fe fb6e 	bl	b50fc <malloc>
            if (!d) {
   b6a20:	4604      	mov	r4, r0
   b6a22:	b158      	cbz	r0, b6a3c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   b6a24:	e9d5 1200 	ldrd	r1, r2, [r5]
   b6a28:	fb07 1202 	mla	r2, r7, r2, r1
   b6a2c:	f7ff ffc5 	bl	b69ba <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6a30:	6828      	ldr	r0, [r5, #0]
   b6a32:	f7fe fb6b 	bl	b510c <free>
        data_ = d;
   b6a36:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6a38:	60ae      	str	r6, [r5, #8]
        return true;
   b6a3a:	2001      	movs	r0, #1
    }
   b6a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   b6a3e:	2400      	movs	r4, #0
   b6a40:	e7f6      	b.n	b6a30 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000b6a42 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   b6a42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6a46:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   b6a48:	ad01      	add	r5, sp, #4
   b6a4a:	4606      	mov	r6, r0
   b6a4c:	4628      	mov	r0, r5
   b6a4e:	460c      	mov	r4, r1
   b6a50:	f7fe fe21 	bl	b5696 <_ZN8particle10BleAddressC1Ev>
   b6a54:	a803      	add	r0, sp, #12
   b6a56:	f7ff fbd0 	bl	b61fa <_ZN8particle18BleAdvertisingDataC1Ev>
   b6a5a:	a806      	add	r0, sp, #24
   b6a5c:	f7ff fbcd 	bl	b61fa <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   b6a60:	6930      	ldr	r0, [r6, #16]
   b6a62:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   b6a64:	89f2      	ldrh	r2, [r6, #14]
   b6a66:	ab13      	add	r3, sp, #76	; 0x4c
   b6a68:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   b6a6a:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   b6a6e:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   b6a70:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   b6a72:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   b6a76:	a806      	add	r0, sp, #24
   b6a78:	f7ff fb33 	bl	b60e2 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   b6a7c:	89b2      	ldrh	r2, [r6, #12]
   b6a7e:	6871      	ldr	r1, [r6, #4]
   b6a80:	a803      	add	r0, sp, #12
   b6a82:	f7ff fb2e 	bl	b60e2 <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   b6a86:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b6a8a:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   b6a8c:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b6a8e:	d003      	beq.n	b6a98 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   b6a90:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b6a94:	429a      	cmp	r2, r3
   b6a96:	db5c      	blt.n	b6b52 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   b6a98:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   b6a9c:	2b7f      	cmp	r3, #127	; 0x7f
   b6a9e:	d003      	beq.n	b6aa8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   b6aa0:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b6aa4:	429a      	cmp	r2, r3
   b6aa6:	dc54      	bgt.n	b6b52 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   b6aa8:	f104 0150 	add.w	r1, r4, #80	; 0x50
   b6aac:	4638      	mov	r0, r7
   b6aae:	f7ff f991 	bl	b5dd4 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   b6ab2:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   b6ab4:	2b00      	cmp	r3, #0
   b6ab6:	dd52      	ble.n	b6b5e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   b6ab8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   b6aba:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   b6abe:	45b1      	cmp	r9, r6
   b6ac0:	d050      	beq.n	b6b64 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   b6ac2:	4630      	mov	r0, r6
   b6ac4:	4629      	mov	r1, r5
   b6ac6:	f7fe fdd2 	bl	b566e <_ZNK8particle10BleAddresseqERKS0_>
   b6aca:	3608      	adds	r6, #8
   b6acc:	4680      	mov	r8, r0
   b6ace:	2800      	cmp	r0, #0
   b6ad0:	d0f5      	beq.n	b6abe <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   b6ad2:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b6ad4:	f7fe fb1a 	bl	b510c <free>
        if (!delegator->filterByRssi(result) ||
   b6ad8:	f1b8 0f00 	cmp.w	r8, #0
   b6adc:	d039      	beq.n	b6b52 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   b6ade:	4629      	mov	r1, r5
   b6ae0:	4620      	mov	r0, r4
   b6ae2:	f7ff f93a 	bl	b5d5a <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   b6ae6:	b3a0      	cbz	r0, b6b52 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   b6ae8:	4629      	mov	r1, r5
   b6aea:	4620      	mov	r0, r4
   b6aec:	f7ff fe9b 	bl	b6826 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   b6af0:	4606      	mov	r6, r0
   b6af2:	b370      	cbz	r0, b6b52 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   b6af4:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   b6af8:	4638      	mov	r0, r7
   b6afa:	f7ff f9b6 	bl	b5e6a <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   b6afe:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b6b00:	2b00      	cmp	r3, #0
   b6b02:	dd12      	ble.n	b6b2a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   b6b04:	a806      	add	r0, sp, #24
   b6b06:	f7fe fee5 	bl	b58d4 <_ZNK8particle18BleAdvertisingData10appearanceEv>
   b6b0a:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   b6b0c:	a803      	add	r0, sp, #12
   b6b0e:	f7fe fee1 	bl	b58d4 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   b6b12:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   b6b16:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   b6b1a:	429a      	cmp	r2, r3
   b6b1c:	d025      	beq.n	b6b6a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   b6b1e:	f833 1b02 	ldrh.w	r1, [r3], #2
   b6b22:	4588      	cmp	r8, r1
   b6b24:	d001      	beq.n	b6b2a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   b6b26:	4288      	cmp	r0, r1
   b6b28:	d1f7      	bne.n	b6b1a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   b6b2a:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b6b2c:	f7fe faee 	bl	b510c <free>
              !delegator->filterByServiceUUID(result) ||
   b6b30:	b17e      	cbz	r6, b6b52 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   b6b32:	4629      	mov	r1, r5
   b6b34:	4620      	mov	r0, r4
   b6b36:	f7ff f9cd 	bl	b5ed4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   b6b3a:	b150      	cbz	r0, b6b52 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   b6b3c:	6a23      	ldr	r3, [r4, #32]
   b6b3e:	b1b3      	cbz	r3, b6b6e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   b6b40:	6963      	ldr	r3, [r4, #20]
   b6b42:	9513      	str	r5, [sp, #76]	; 0x4c
   b6b44:	3301      	adds	r3, #1
   b6b46:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6b48:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b6b4a:	4639      	mov	r1, r7
   b6b4c:	f104 0018 	add.w	r0, r4, #24
   b6b50:	4798      	blx	r3
            return;
   b6b52:	4628      	mov	r0, r5
   b6b54:	f7fe ffa5 	bl	b5aa2 <_ZN8particle13BleScanResultD1Ev>
    }
   b6b58:	b01d      	add	sp, #116	; 0x74
   b6b5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   b6b5e:	f04f 0801 	mov.w	r8, #1
   b6b62:	e7b6      	b.n	b6ad2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b6b64:	f04f 0800 	mov.w	r8, #0
   b6b68:	e7b3      	b.n	b6ad2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b6b6a:	2600      	movs	r6, #0
   b6b6c:	e7dd      	b.n	b6b2a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   b6b6e:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   b6b72:	f1b8 0f00 	cmp.w	r8, #0
   b6b76:	d007      	beq.n	b6b88 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   b6b78:	6963      	ldr	r3, [r4, #20]
   b6b7a:	3301      	adds	r3, #1
   b6b7c:	6163      	str	r3, [r4, #20]
   b6b7e:	4629      	mov	r1, r5
   b6b80:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b6b82:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b6b86:	e7e3      	b.n	b6b50 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   b6b88:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   b6b8c:	f1bc 0f00 	cmp.w	ip, #0
   b6b90:	d025      	beq.n	b6bde <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   b6b92:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b6b94:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   b6b96:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b6b98:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   b6b9a:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b6b9c:	d8d9      	bhi.n	b6b52 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b6b9e:	2224      	movs	r2, #36	; 0x24
   b6ba0:	4353      	muls	r3, r2
    address_ = addr.address_;
   b6ba2:	462a      	mov	r2, r5
   b6ba4:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b6ba6:	3b24      	subs	r3, #36	; 0x24
   b6ba8:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   b6bac:	f84c 0003 	str.w	r0, [ip, r3]
   b6bb0:	6071      	str	r1, [r6, #4]
class BleScanResult {
   b6bb2:	f106 0008 	add.w	r0, r6, #8
   b6bb6:	a903      	add	r1, sp, #12
   b6bb8:	f7ff fa5b 	bl	b6072 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b6bbc:	a906      	add	r1, sp, #24
   b6bbe:	f106 0014 	add.w	r0, r6, #20
   b6bc2:	f7ff fa56 	bl	b6072 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b6bc6:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b6bca:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   b6bce:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b6bd2:	429a      	cmp	r2, r3
   b6bd4:	d3bd      	bcc.n	b6b52 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   b6bd6:	4640      	mov	r0, r8
   b6bd8:	f7fe f8ae 	bl	b4d38 <hal_ble_gap_stop_scan>
   b6bdc:	e7b9      	b.n	b6b52 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   b6bde:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6be2:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   b6be6:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   b6bea:	a903      	add	r1, sp, #12
   b6bec:	a80c      	add	r0, sp, #48	; 0x30
   b6bee:	f7ff fa0c 	bl	b600a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b6bf2:	a906      	add	r1, sp, #24
   b6bf4:	a80f      	add	r0, sp, #60	; 0x3c
   b6bf6:	f7ff fa08 	bl	b600a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b6bfa:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b6bfe:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   b6c02:	4641      	mov	r1, r8
   b6c04:	4638      	mov	r0, r7
   b6c06:	6866      	ldr	r6, [r4, #4]
   b6c08:	f7ff fa1c 	bl	b6044 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6c0c:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b6c10:	4299      	cmp	r1, r3
   b6c12:	da10      	bge.n	b6c36 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   b6c14:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6c16:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b6c18:	2224      	movs	r2, #36	; 0x24
   b6c1a:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b6c1e:	f106 0024 	add.w	r0, r6, #36	; 0x24
   b6c22:	fb02 3201 	mla	r2, r2, r1, r3
   b6c26:	4631      	mov	r1, r6
   b6c28:	f7ff fec7 	bl	b69ba <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b6c2c:	b986      	cbnz	r6, b6c50 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   b6c2e:	6863      	ldr	r3, [r4, #4]
   b6c30:	3301      	adds	r3, #1
   b6c32:	6063      	str	r3, [r4, #4]
    return true;
   b6c34:	e005      	b.n	b6c42 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6c36:	3101      	adds	r1, #1
   b6c38:	4620      	mov	r0, r4
   b6c3a:	f7ff fee8 	bl	b6a0e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6c3e:	2800      	cmp	r0, #0
   b6c40:	d1e8      	bne.n	b6c14 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   b6c42:	4638      	mov	r0, r7
   b6c44:	f7fe ff2d 	bl	b5aa2 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   b6c48:	4640      	mov	r0, r8
   b6c4a:	f7fe ff2a 	bl	b5aa2 <_ZN8particle13BleScanResultD1Ev>
   b6c4e:	e780      	b.n	b6b52 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   b6c50:	4639      	mov	r1, r7
   b6c52:	4630      	mov	r0, r6
   b6c54:	f7ff f9f6 	bl	b6044 <_ZN8particle13BleScanResultC1EOS0_>
   b6c58:	e7e9      	b.n	b6c2e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>
	...

000b6c5c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b6c5c:	4802      	ldr	r0, [pc, #8]	; (b6c68 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6c5e:	2300      	movs	r3, #0
   b6c60:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b6c62:	f7fe b89f 	b.w	b4da4 <os_mutex_recursive_create>
   b6c66:	bf00      	nop
   b6c68:	2003e6bc 	.word	0x2003e6bc

000b6c6c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6c6e:	4606      	mov	r6, r0
   b6c70:	460d      	mov	r5, r1
  size_t n = 0;
   b6c72:	188f      	adds	r7, r1, r2
   b6c74:	2400      	movs	r4, #0
  while (size--) {
   b6c76:	42bd      	cmp	r5, r7
   b6c78:	d00c      	beq.n	b6c94 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6c7a:	6833      	ldr	r3, [r6, #0]
   b6c7c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6c80:	689b      	ldr	r3, [r3, #8]
   b6c82:	4630      	mov	r0, r6
   b6c84:	4798      	blx	r3
     if (chunk>=0)
   b6c86:	1e03      	subs	r3, r0, #0
   b6c88:	db01      	blt.n	b6c8e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6c8a:	441c      	add	r4, r3
  while (size--) {
   b6c8c:	e7f3      	b.n	b6c76 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6c8e:	2c00      	cmp	r4, #0
   b6c90:	bf08      	it	eq
   b6c92:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6c94:	4620      	mov	r0, r4
   b6c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6c98 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b6c98:	b513      	push	{r0, r1, r4, lr}
   b6c9a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b6c9c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6c9e:	b159      	cbz	r1, b6cb8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6ca0:	9101      	str	r1, [sp, #4]
   b6ca2:	f7fd f9c5 	bl	b4030 <strlen>
   b6ca6:	6823      	ldr	r3, [r4, #0]
   b6ca8:	9901      	ldr	r1, [sp, #4]
   b6caa:	68db      	ldr	r3, [r3, #12]
   b6cac:	4602      	mov	r2, r0
   b6cae:	4620      	mov	r0, r4
    }
   b6cb0:	b002      	add	sp, #8
   b6cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6cb6:	4718      	bx	r3
    }
   b6cb8:	b002      	add	sp, #8
   b6cba:	bd10      	pop	{r4, pc}

000b6cbc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b6cbc:	6803      	ldr	r3, [r0, #0]
   b6cbe:	689b      	ldr	r3, [r3, #8]
   b6cc0:	4718      	bx	r3

000b6cc2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6cc2:	b530      	push	{r4, r5, lr}
   b6cc4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6cc6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6cc8:	2a01      	cmp	r2, #1
  *str = '\0';
   b6cca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6cce:	bf98      	it	ls
   b6cd0:	220a      	movls	r2, #10
   b6cd2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6cd4:	460d      	mov	r5, r1
   b6cd6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6cda:	fb01 5312 	mls	r3, r1, r2, r5
   b6cde:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6ce2:	2b09      	cmp	r3, #9
   b6ce4:	bf94      	ite	ls
   b6ce6:	3330      	addls	r3, #48	; 0x30
   b6ce8:	3337      	addhi	r3, #55	; 0x37
   b6cea:	b2db      	uxtb	r3, r3
  } while(n);
   b6cec:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6cee:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6cf2:	d9ef      	bls.n	b6cd4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6cf4:	4621      	mov	r1, r4
   b6cf6:	f7ff ffcf 	bl	b6c98 <_ZN5Print5writeEPKc>
}
   b6cfa:	b00b      	add	sp, #44	; 0x2c
   b6cfc:	bd30      	pop	{r4, r5, pc}

000b6cfe <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b6cfe:	6880      	ldr	r0, [r0, #8]
   b6d00:	6803      	ldr	r3, [r0, #0]
   b6d02:	68db      	ldr	r3, [r3, #12]
   b6d04:	4718      	bx	r3

000b6d06 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b6d06:	4770      	bx	lr

000b6d08 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b6d08:	4608      	mov	r0, r1
   b6d0a:	b111      	cbz	r1, b6d12 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b6d0c:	680b      	ldr	r3, [r1, #0]
   b6d0e:	685b      	ldr	r3, [r3, #4]
   b6d10:	4718      	bx	r3
}
   b6d12:	4770      	bx	lr

000b6d14 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b6d14:	4770      	bx	lr

000b6d16 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b6d16:	4770      	bx	lr

000b6d18 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b6d18:	4770      	bx	lr

000b6d1a <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b6d1a:	4770      	bx	lr

000b6d1c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b6d1c:	b538      	push	{r3, r4, r5, lr}
   b6d1e:	4604      	mov	r4, r0
   b6d20:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b6d22:	6800      	ldr	r0, [r0, #0]
   b6d24:	212e      	movs	r1, #46	; 0x2e
   b6d26:	f002 f94e 	bl	b8fc6 <strchrnul>
    size = s - category;
   b6d2a:	6823      	ldr	r3, [r4, #0]
   b6d2c:	1ac3      	subs	r3, r0, r3
   b6d2e:	602b      	str	r3, [r5, #0]
    if (size) {
   b6d30:	b123      	cbz	r3, b6d3c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b6d32:	7803      	ldrb	r3, [r0, #0]
   b6d34:	b103      	cbz	r3, b6d38 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b6d36:	3001      	adds	r0, #1
   b6d38:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6d3a:	6020      	str	r0, [r4, #0]
}
   b6d3c:	4618      	mov	r0, r3
   b6d3e:	bd38      	pop	{r3, r4, r5, pc}

000b6d40 <_ZN5spark16JSONStreamWriterD0Ev>:
   b6d40:	b510      	push	{r4, lr}
   b6d42:	210c      	movs	r1, #12
   b6d44:	4604      	mov	r4, r0
   b6d46:	f7fd f9bc 	bl	b40c2 <_ZdlPvj>
   b6d4a:	4620      	mov	r0, r4
   b6d4c:	bd10      	pop	{r4, pc}

000b6d4e <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b6d4e:	b510      	push	{r4, lr}
   b6d50:	2104      	movs	r1, #4
   b6d52:	4604      	mov	r4, r0
   b6d54:	f7fd f9b5 	bl	b40c2 <_ZdlPvj>
   b6d58:	4620      	mov	r0, r4
   b6d5a:	bd10      	pop	{r4, pc}

000b6d5c <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b6d5c:	b510      	push	{r4, lr}
   b6d5e:	2104      	movs	r1, #4
   b6d60:	4604      	mov	r4, r0
   b6d62:	f7fd f9ae 	bl	b40c2 <_ZdlPvj>
   b6d66:	4620      	mov	r0, r4
   b6d68:	bd10      	pop	{r4, pc}

000b6d6a <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   b6d6a:	f7fe b82b 	b.w	b4dc4 <os_mutex_recursive_lock>

000b6d6e <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b6d6e:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b6d70:	f7fd f954 	bl	b401c <strcmp>
}
   b6d74:	fab0 f080 	clz	r0, r0
   b6d78:	0940      	lsrs	r0, r0, #5
   b6d7a:	bd08      	pop	{r3, pc}

000b6d7c <__tcf_1>:
   b6d7c:	4770      	bx	lr

000b6d7e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b6d7e:	b510      	push	{r4, lr}
   b6d80:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b6d82:	f001 f927 	bl	b7fd4 <_Z16_fetch_usbserialv>
   b6d86:	4284      	cmp	r4, r0
   b6d88:	d010      	beq.n	b6dac <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b6d8a:	f001 ff55 	bl	b8c38 <_Z22__fetch_global_Serial1v>
   b6d8e:	4284      	cmp	r4, r0
   b6d90:	d105      	bne.n	b6d9e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b6d92:	f001 ff51 	bl	b8c38 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b6d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b6d9a:	f001 b99a 	b.w	b80d2 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b6d9e:	b12c      	cbz	r4, b6dac <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b6da0:	6823      	ldr	r3, [r4, #0]
   b6da2:	4620      	mov	r0, r4
   b6da4:	685b      	ldr	r3, [r3, #4]
}
   b6da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6daa:	4718      	bx	r3
   b6dac:	bd10      	pop	{r4, pc}

000b6dae <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6dae:	680b      	ldr	r3, [r1, #0]
   b6db0:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b6db2:	684b      	ldr	r3, [r1, #4]
   b6db4:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b6db6:	b113      	cbz	r3, b6dbe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b6db8:	685a      	ldr	r2, [r3, #4]
   b6dba:	3201      	adds	r2, #1
   b6dbc:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6dbe:	4770      	bx	lr

000b6dc0 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b6dc0:	b513      	push	{r0, r1, r4, lr}
   b6dc2:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b6dc4:	4608      	mov	r0, r1
   b6dc6:	9101      	str	r1, [sp, #4]
   b6dc8:	f7fd f932 	bl	b4030 <strlen>
   b6dcc:	9901      	ldr	r1, [sp, #4]
   b6dce:	4602      	mov	r2, r0
   b6dd0:	4620      	mov	r0, r4
}
   b6dd2:	b002      	add	sp, #8
   b6dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b6dd8:	f001 bf02 	b.w	b8be0 <_ZN5spark10JSONWriter5valueEPKcj>

000b6ddc <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b6ddc:	b513      	push	{r0, r1, r4, lr}
   b6dde:	4604      	mov	r4, r0
    write(str, strlen(str));
   b6de0:	4608      	mov	r0, r1
   b6de2:	9101      	str	r1, [sp, #4]
   b6de4:	f7fd f924 	bl	b4030 <strlen>
   b6de8:	6823      	ldr	r3, [r4, #0]
   b6dea:	9901      	ldr	r1, [sp, #4]
   b6dec:	68db      	ldr	r3, [r3, #12]
   b6dee:	4602      	mov	r2, r0
   b6df0:	4620      	mov	r0, r4
}
   b6df2:	b002      	add	sp, #8
   b6df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b6df8:	4718      	bx	r3

000b6dfa <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b6dfa:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b6dfc:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b6dfe:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b6e02:	68db      	ldr	r3, [r3, #12]
   b6e04:	2201      	movs	r2, #1
   b6e06:	f10d 0107 	add.w	r1, sp, #7
   b6e0a:	4798      	blx	r3
}
   b6e0c:	b003      	add	sp, #12
   b6e0e:	f85d fb04 	ldr.w	pc, [sp], #4

000b6e12 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b6e12:	680a      	ldr	r2, [r1, #0]
   b6e14:	6002      	str	r2, [r0, #0]
   b6e16:	684a      	ldr	r2, [r1, #4]
   b6e18:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b6e1a:	2200      	movs	r2, #0
   b6e1c:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b6e20:	b510      	push	{r4, lr}
   b6e22:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6e24:	688c      	ldr	r4, [r1, #8]
   b6e26:	6084      	str	r4, [r0, #8]
   b6e28:	68cc      	ldr	r4, [r1, #12]
   b6e2a:	60c4      	str	r4, [r0, #12]
   b6e2c:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b6e2e:	608a      	str	r2, [r1, #8]
   b6e30:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6e32:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b6e34:	610a      	str	r2, [r1, #16]
   b6e36:	bd10      	pop	{r4, pc}

000b6e38 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b6e38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
   b6e3c:	e9d0 8400 	ldrd	r8, r4, [r0]
   b6e40:	f04f 0a14 	mov.w	sl, #20
   b6e44:	9300      	str	r3, [sp, #0]
   b6e46:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b6e4a:	4b18      	ldr	r3, [pc, #96]	; (b6eac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b6e4c:	10a4      	asrs	r4, r4, #2
   b6e4e:	4617      	mov	r7, r2
   b6e50:	435c      	muls	r4, r3
   b6e52:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b6e54:	2c00      	cmp	r4, #0
   b6e56:	dd21      	ble.n	b6e9c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b6e58:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b6e5a:	fb0a f006 	mul.w	r0, sl, r6
   b6e5e:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b6e62:	463a      	mov	r2, r7
   b6e64:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b6e68:	5828      	ldr	r0, [r5, r0]
   b6e6a:	9101      	str	r1, [sp, #4]
   b6e6c:	455f      	cmp	r7, fp
   b6e6e:	bf28      	it	cs
   b6e70:	465a      	movcs	r2, fp
   b6e72:	f002 f8ba 	bl	b8fea <strncmp>
                if (cmp == 0) {
   b6e76:	2800      	cmp	r0, #0
   b6e78:	9901      	ldr	r1, [sp, #4]
   b6e7a:	f04f 0301 	mov.w	r3, #1
   b6e7e:	d10b      	bne.n	b6e98 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b6e80:	455f      	cmp	r7, fp
   b6e82:	d103      	bne.n	b6e8c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b6e84:	9a00      	ldr	r2, [sp, #0]
   b6e86:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b6e88:	4634      	mov	r4, r6
   b6e8a:	e7e3      	b.n	b6e54 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b6e8c:	d9fc      	bls.n	b6e88 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b6e8e:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b6e90:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b6e94:	3e01      	subs	r6, #1
   b6e96:	e7f7      	b.n	b6e88 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b6e98:	dbf9      	blt.n	b6e8e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b6e9a:	e7f5      	b.n	b6e88 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b6e9c:	eba5 0508 	sub.w	r5, r5, r8
}
   b6ea0:	4802      	ldr	r0, [pc, #8]	; (b6eac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b6ea2:	10ad      	asrs	r5, r5, #2
   b6ea4:	4368      	muls	r0, r5
   b6ea6:	b003      	add	sp, #12
   b6ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6eac:	cccccccd 	.word	0xcccccccd

000b6eb0 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b6eb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b6eb2:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b6eb4:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b6eb6:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b6eb8:	b303      	cbz	r3, b6efc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b6eba:	b1f9      	cbz	r1, b6efc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b6ebc:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b6ebe:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b6ec2:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b6ec4:	a903      	add	r1, sp, #12
   b6ec6:	a801      	add	r0, sp, #4
   b6ec8:	f7ff ff28 	bl	b6d1c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b6ecc:	4601      	mov	r1, r0
   b6ece:	b1a8      	cbz	r0, b6efc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b6ed0:	f10d 030b 	add.w	r3, sp, #11
   b6ed4:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b6ed6:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b6eda:	4620      	mov	r0, r4
   b6edc:	f7ff ffac 	bl	b6e38 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b6ee0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b6ee4:	b153      	cbz	r3, b6efc <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b6ee6:	6823      	ldr	r3, [r4, #0]
   b6ee8:	2414      	movs	r4, #20
   b6eea:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b6eee:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b6ef0:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b6ef4:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b6ef6:	bfa8      	it	ge
   b6ef8:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b6efa:	e7e3      	b.n	b6ec4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b6efc:	4628      	mov	r0, r5
   b6efe:	b004      	add	sp, #16
   b6f00:	bd70      	pop	{r4, r5, r6, pc}

000b6f02 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b6f02:	b40e      	push	{r1, r2, r3}
   b6f04:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6f06:	b08c      	sub	sp, #48	; 0x30
   b6f08:	af00      	add	r7, sp, #0
   b6f0a:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b6f0e:	4604      	mov	r4, r0
   b6f10:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6f14:	607a      	str	r2, [r7, #4]
   b6f16:	462b      	mov	r3, r5
   b6f18:	2120      	movs	r1, #32
   b6f1a:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   b6f1e:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6f20:	f7fe f904 	bl	b512c <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   b6f24:	281f      	cmp	r0, #31
   b6f26:	687a      	ldr	r2, [r7, #4]
   b6f28:	d91a      	bls.n	b6f60 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   b6f2a:	f100 0308 	add.w	r3, r0, #8
   b6f2e:	f023 0307 	bic.w	r3, r3, #7
        }
   b6f32:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   b6f34:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6f38:	1c41      	adds	r1, r0, #1
   b6f3a:	462b      	mov	r3, r5
   b6f3c:	4668      	mov	r0, sp
        va_start(args, fmt);
   b6f3e:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6f40:	f7fe f8f4 	bl	b512c <vsnprintf>
        if (n > 0) {
   b6f44:	1e02      	subs	r2, r0, #0
   b6f46:	dd04      	ble.n	b6f52 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   b6f48:	6823      	ldr	r3, [r4, #0]
   b6f4a:	4669      	mov	r1, sp
   b6f4c:	68db      	ldr	r3, [r3, #12]
   b6f4e:	4620      	mov	r0, r4
   b6f50:	4798      	blx	r3
   b6f52:	46b5      	mov	sp, r6
}
   b6f54:	3730      	adds	r7, #48	; 0x30
   b6f56:	46bd      	mov	sp, r7
   b6f58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6f5c:	b003      	add	sp, #12
   b6f5e:	4770      	bx	lr
    } else if (n > 0) {
   b6f60:	2800      	cmp	r0, #0
   b6f62:	d0f7      	beq.n	b6f54 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   b6f64:	6823      	ldr	r3, [r4, #0]
   b6f66:	4602      	mov	r2, r0
   b6f68:	68db      	ldr	r3, [r3, #12]
   b6f6a:	f107 0110 	add.w	r1, r7, #16
   b6f6e:	4620      	mov	r0, r4
   b6f70:	4798      	blx	r3
}
   b6f72:	e7ef      	b.n	b6f54 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000b6f74 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b6f74:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b6f76:	4c09      	ldr	r4, [pc, #36]	; (b6f9c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b6f78:	7823      	ldrb	r3, [r4, #0]
   b6f7a:	f3bf 8f5b 	dmb	ish
   b6f7e:	07db      	lsls	r3, r3, #31
   b6f80:	d409      	bmi.n	b6f96 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b6f82:	4620      	mov	r0, r4
   b6f84:	f7fd f8ac 	bl	b40e0 <__cxa_guard_acquire>
   b6f88:	b128      	cbz	r0, b6f96 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b6f8a:	4620      	mov	r0, r4
   b6f8c:	f7fd f8ad 	bl	b40ea <__cxa_guard_release>
   b6f90:	4803      	ldr	r0, [pc, #12]	; (b6fa0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b6f92:	f001 ff8f 	bl	b8eb4 <atexit>
}
   b6f96:	4803      	ldr	r0, [pc, #12]	; (b6fa4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b6f98:	bd10      	pop	{r4, pc}
   b6f9a:	bf00      	nop
   b6f9c:	2003e6c8 	.word	0x2003e6c8
   b6fa0:	000b6d15 	.word	0x000b6d15
   b6fa4:	2003e578 	.word	0x2003e578

000b6fa8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b6fa8:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b6faa:	4c09      	ldr	r4, [pc, #36]	; (b6fd0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b6fac:	7823      	ldrb	r3, [r4, #0]
   b6fae:	f3bf 8f5b 	dmb	ish
   b6fb2:	07db      	lsls	r3, r3, #31
   b6fb4:	d409      	bmi.n	b6fca <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b6fb6:	4620      	mov	r0, r4
   b6fb8:	f7fd f892 	bl	b40e0 <__cxa_guard_acquire>
   b6fbc:	b128      	cbz	r0, b6fca <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b6fbe:	4620      	mov	r0, r4
   b6fc0:	f7fd f893 	bl	b40ea <__cxa_guard_release>
   b6fc4:	4803      	ldr	r0, [pc, #12]	; (b6fd4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b6fc6:	f001 ff75 	bl	b8eb4 <atexit>
    return &factory;
}
   b6fca:	4803      	ldr	r0, [pc, #12]	; (b6fd8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b6fcc:	bd10      	pop	{r4, pc}
   b6fce:	bf00      	nop
   b6fd0:	2003e6cc 	.word	0x2003e6cc
   b6fd4:	000b6d7d 	.word	0x000b6d7d
   b6fd8:	2003e57c 	.word	0x2003e57c

000b6fdc <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b6fdc:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b6fde:	2500      	movs	r5, #0
   b6fe0:	4604      	mov	r4, r0
   b6fe2:	e9c0 5500 	strd	r5, r5, [r0]
   b6fe6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b6fea:	6085      	str	r5, [r0, #8]
   b6fec:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b6fee:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b6ff2:	f7fd fed7 	bl	b4da4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b6ff6:	f7ff ffbd 	bl	b6f74 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b6ffa:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b6ffc:	f7ff ffd4 	bl	b6fa8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b7000:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b7002:	6220      	str	r0, [r4, #32]
}
   b7004:	4620      	mov	r0, r4
   b7006:	bd38      	pop	{r3, r4, r5, pc}

000b7008 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b7008:	b510      	push	{r4, lr}
    static LogManager mgr;
   b700a:	4c0a      	ldr	r4, [pc, #40]	; (b7034 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b700c:	7823      	ldrb	r3, [r4, #0]
   b700e:	f3bf 8f5b 	dmb	ish
   b7012:	07db      	lsls	r3, r3, #31
   b7014:	d40c      	bmi.n	b7030 <_ZN5spark10LogManager8instanceEv+0x28>
   b7016:	4620      	mov	r0, r4
   b7018:	f7fd f862 	bl	b40e0 <__cxa_guard_acquire>
   b701c:	b140      	cbz	r0, b7030 <_ZN5spark10LogManager8instanceEv+0x28>
   b701e:	4806      	ldr	r0, [pc, #24]	; (b7038 <_ZN5spark10LogManager8instanceEv+0x30>)
   b7020:	f7ff ffdc 	bl	b6fdc <_ZN5spark10LogManagerC1Ev>
   b7024:	4620      	mov	r0, r4
   b7026:	f7fd f860 	bl	b40ea <__cxa_guard_release>
   b702a:	4804      	ldr	r0, [pc, #16]	; (b703c <_ZN5spark10LogManager8instanceEv+0x34>)
   b702c:	f001 ff42 	bl	b8eb4 <atexit>
    return &mgr;
}
   b7030:	4801      	ldr	r0, [pc, #4]	; (b7038 <_ZN5spark10LogManager8instanceEv+0x30>)
   b7032:	bd10      	pop	{r4, pc}
   b7034:	2003e6c4 	.word	0x2003e6c4
   b7038:	2003e6d4 	.word	0x2003e6d4
   b703c:	000b755d 	.word	0x000b755d

000b7040 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b7040:	4a02      	ldr	r2, [pc, #8]	; (b704c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b7042:	4903      	ldr	r1, [pc, #12]	; (b7050 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b7044:	4803      	ldr	r0, [pc, #12]	; (b7054 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b7046:	2300      	movs	r3, #0
   b7048:	f7fd bfbc 	b.w	b4fc4 <log_set_callbacks>
   b704c:	000b7341 	.word	0x000b7341
   b7050:	000b72cd 	.word	0x000b72cd
   b7054:	000b724d 	.word	0x000b724d

000b7058 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b7058:	2300      	movs	r3, #0
   b705a:	461a      	mov	r2, r3
   b705c:	4619      	mov	r1, r3
   b705e:	4618      	mov	r0, r3
   b7060:	f7fd bfb0 	b.w	b4fc4 <log_set_callbacks>

000b7064 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b7064:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b7066:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b7068:	4604      	mov	r4, r0
   b706a:	4668      	mov	r0, sp
   b706c:	f7ff fe9f 	bl	b6dae <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b7070:	466a      	mov	r2, sp
   b7072:	4629      	mov	r1, r5
   b7074:	4620      	mov	r0, r4
   b7076:	f001 fcd3 	bl	b8a20 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b707a:	a801      	add	r0, sp, #4
   b707c:	f7fe fda2 	bl	b5bc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7080:	4620      	mov	r0, r4
   b7082:	b003      	add	sp, #12
   b7084:	bd30      	pop	{r4, r5, pc}

000b7086 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b7086:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b7088:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b708a:	4604      	mov	r4, r0
   b708c:	4668      	mov	r0, sp
   b708e:	f7ff fe8e 	bl	b6dae <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b7092:	466a      	mov	r2, sp
   b7094:	4629      	mov	r1, r5
   b7096:	4620      	mov	r0, r4
   b7098:	f001 fc9e 	bl	b89d8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b709c:	a801      	add	r0, sp, #4
   b709e:	f7fe fd91 	bl	b5bc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b70a2:	4620      	mov	r0, r4
   b70a4:	b003      	add	sp, #12
   b70a6:	bd30      	pop	{r4, r5, pc}

000b70a8 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b70a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b70aa:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b70ac:	4604      	mov	r4, r0
   b70ae:	4668      	mov	r0, sp
   b70b0:	f7ff fe7d 	bl	b6dae <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b70b4:	466a      	mov	r2, sp
   b70b6:	4629      	mov	r1, r5
   b70b8:	4620      	mov	r0, r4
   b70ba:	f001 fc36 	bl	b892a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b70be:	a801      	add	r0, sp, #4
   b70c0:	f7fe fd80 	bl	b5bc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b70c4:	4620      	mov	r0, r4
   b70c6:	b003      	add	sp, #12
   b70c8:	bd30      	pop	{r4, r5, pc}
	...

000b70cc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b70cc:	b570      	push	{r4, r5, r6, lr}
   b70ce:	b08a      	sub	sp, #40	; 0x28
   b70d0:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b70d2:	4601      	mov	r1, r0
   b70d4:	a804      	add	r0, sp, #16
   b70d6:	f7ff ffc5 	bl	b7064 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b70da:	4e14      	ldr	r6, [pc, #80]	; (b712c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b70dc:	a804      	add	r0, sp, #16
   b70de:	f001 fcb7 	bl	b8a50 <_ZN5spark18JSONObjectIterator4nextEv>
   b70e2:	b1e8      	cbz	r0, b7120 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b70e4:	a904      	add	r1, sp, #16
   b70e6:	4668      	mov	r0, sp
   b70e8:	f7ff ffcd 	bl	b7086 <_ZNK5spark18JSONObjectIterator4nameEv>
   b70ec:	9802      	ldr	r0, [sp, #8]
   b70ee:	4631      	mov	r1, r6
   b70f0:	f7ff fe3d 	bl	b6d6e <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b70f4:	4604      	mov	r4, r0
   b70f6:	b110      	cbz	r0, b70fe <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b70f8:	1e2c      	subs	r4, r5, #0
   b70fa:	bf18      	it	ne
   b70fc:	2401      	movne	r4, #1
   b70fe:	a801      	add	r0, sp, #4
   b7100:	f7fe fd60 	bl	b5bc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7104:	2c00      	cmp	r4, #0
   b7106:	d0e9      	beq.n	b70dc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b7108:	a904      	add	r1, sp, #16
   b710a:	4668      	mov	r0, sp
   b710c:	f7ff ffcc 	bl	b70a8 <_ZNK5spark18JSONObjectIterator5valueEv>
   b7110:	4668      	mov	r0, sp
   b7112:	f001 fc40 	bl	b8996 <_ZNK5spark9JSONValue5toIntEv>
   b7116:	6028      	str	r0, [r5, #0]
   b7118:	a801      	add	r0, sp, #4
   b711a:	f7fe fd53 	bl	b5bc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b711e:	e7dd      	b.n	b70dc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b7120:	a805      	add	r0, sp, #20
   b7122:	f7fe fd4f 	bl	b5bc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7126:	b00a      	add	sp, #40	; 0x28
   b7128:	bd70      	pop	{r4, r5, r6, pc}
   b712a:	bf00      	nop
   b712c:	000b9464 	.word	0x000b9464

000b7130 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b7130:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7132:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b7134:	4620      	mov	r0, r4
   b7136:	4913      	ldr	r1, [pc, #76]	; (b7184 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b7138:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b713a:	f7fc ff6f 	bl	b401c <strcmp>
   b713e:	b950      	cbnz	r0, b7156 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b7140:	f000 ff48 	bl	b7fd4 <_Z16_fetch_usbserialv>
   b7144:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b7148:	f000 ff34 	bl	b7fb4 <_ZN9USBSerial5beginEl>
}
   b714c:	b003      	add	sp, #12
   b714e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b7152:	f000 bf3f 	b.w	b7fd4 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b7156:	490c      	ldr	r1, [pc, #48]	; (b7188 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b7158:	4620      	mov	r0, r4
   b715a:	f7fc ff5f 	bl	b401c <strcmp>
   b715e:	b978      	cbnz	r0, b7180 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b7160:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b7164:	a901      	add	r1, sp, #4
   b7166:	4628      	mov	r0, r5
        int baud = 9600;
   b7168:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b716a:	f7ff ffaf 	bl	b70cc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b716e:	f001 fd63 	bl	b8c38 <_Z22__fetch_global_Serial1v>
   b7172:	9901      	ldr	r1, [sp, #4]
   b7174:	f000 ffaa 	bl	b80cc <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b7178:	f001 fd5e 	bl	b8c38 <_Z22__fetch_global_Serial1v>
}
   b717c:	b003      	add	sp, #12
   b717e:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b7180:	2000      	movs	r0, #0
   b7182:	e7fb      	b.n	b717c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b7184:	000b9469 	.word	0x000b9469
   b7188:	000b9470 	.word	0x000b9470

000b718c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b718c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b718e:	e9d0 5300 	ldrd	r5, r3, [r0]
   b7192:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7194:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7196:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b719a:	42ae      	cmp	r6, r5
   b719c:	d005      	beq.n	b71aa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b719e:	f105 0008 	add.w	r0, r5, #8
   b71a2:	f7ff fff3 	bl	b718c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b71a6:	3514      	adds	r5, #20
   b71a8:	e7f7      	b.n	b719a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b71aa:	6820      	ldr	r0, [r4, #0]
   b71ac:	f7fd ffae 	bl	b510c <free>
}
   b71b0:	4620      	mov	r0, r4
   b71b2:	bd70      	pop	{r4, r5, r6, pc}

000b71b4 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b71b4:	b510      	push	{r4, lr}
   b71b6:	4604      	mov	r4, r0
   b71b8:	300c      	adds	r0, #12
   b71ba:	f7ff ffe7 	bl	b718c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b71be:	4620      	mov	r0, r4
   b71c0:	f7fe fc98 	bl	b5af4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b71c4:	4620      	mov	r0, r4
   b71c6:	bd10      	pop	{r4, pc}

000b71c8 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b71c8:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b71ca:	4b04      	ldr	r3, [pc, #16]	; (b71dc <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b71cc:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b71ce:	f840 3b04 	str.w	r3, [r0], #4
   b71d2:	f7ff ffef 	bl	b71b4 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b71d6:	4620      	mov	r0, r4
   b71d8:	bd10      	pop	{r4, pc}
   b71da:	bf00      	nop
   b71dc:	000b9304 	.word	0x000b9304

000b71e0 <_ZN5spark16StreamLogHandlerD0Ev>:
   b71e0:	b510      	push	{r4, lr}
   b71e2:	4604      	mov	r4, r0
   b71e4:	f7ff fff0 	bl	b71c8 <_ZN5spark16StreamLogHandlerD1Ev>
   b71e8:	4620      	mov	r0, r4
   b71ea:	2124      	movs	r1, #36	; 0x24
   b71ec:	f7fc ff69 	bl	b40c2 <_ZdlPvj>
   b71f0:	4620      	mov	r0, r4
   b71f2:	bd10      	pop	{r4, pc}

000b71f4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b71f4:	b510      	push	{r4, lr}
   b71f6:	4b03      	ldr	r3, [pc, #12]	; (b7204 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b71f8:	6003      	str	r3, [r0, #0]
   b71fa:	4604      	mov	r4, r0
   b71fc:	f7ff ffe4 	bl	b71c8 <_ZN5spark16StreamLogHandlerD1Ev>
   b7200:	4620      	mov	r0, r4
   b7202:	bd10      	pop	{r4, pc}
   b7204:	000b9510 	.word	0x000b9510

000b7208 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b7208:	b510      	push	{r4, lr}
   b720a:	4604      	mov	r4, r0
   b720c:	f7ff fff2 	bl	b71f4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b7210:	4620      	mov	r0, r4
   b7212:	2124      	movs	r1, #36	; 0x24
   b7214:	f7fc ff55 	bl	b40c2 <_ZdlPvj>
   b7218:	4620      	mov	r0, r4
   b721a:	bd10      	pop	{r4, pc}

000b721c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b721c:	2200      	movs	r2, #0
   b721e:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b7222:	b510      	push	{r4, lr}
        capacity_(0) {
   b7224:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7226:	680c      	ldr	r4, [r1, #0]
   b7228:	6004      	str	r4, [r0, #0]
   b722a:	684c      	ldr	r4, [r1, #4]
   b722c:	6044      	str	r4, [r0, #4]
   b722e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7230:	600a      	str	r2, [r1, #0]
   b7232:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7234:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7236:	608a      	str	r2, [r1, #8]
}
   b7238:	bd10      	pop	{r4, pc}

000b723a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b723a:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b723c:	6803      	ldr	r3, [r0, #0]
   b723e:	4604      	mov	r4, r0
   b7240:	6818      	ldr	r0, [r3, #0]
   b7242:	f7fd fdc7 	bl	b4dd4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b7246:	4620      	mov	r0, r4
   b7248:	bd10      	pop	{r4, pc}
	...

000b724c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b724c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7250:	b087      	sub	sp, #28
   b7252:	4680      	mov	r8, r0
   b7254:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b7256:	4b1c      	ldr	r3, [pc, #112]	; (b72c8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b7258:	685b      	ldr	r3, [r3, #4]
   b725a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b725e:	4689      	mov	r9, r1
   b7260:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   b7262:	b96b      	cbnz	r3, b7280 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b7264:	f7ff fed0 	bl	b7008 <_ZN5spark10LogManager8instanceEv>
   b7268:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b726a:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b726e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7270:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b7272:	f7ff fd7a 	bl	b6d6a <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b7276:	7b23      	ldrb	r3, [r4, #12]
   b7278:	b12b      	cbz	r3, b7286 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b727a:	a805      	add	r0, sp, #20
   b727c:	f7ff ffdd 	bl	b723a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b7280:	b007      	add	sp, #28
   b7282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b7286:	2301      	movs	r3, #1
   b7288:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b728a:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b728e:	fa5f f989 	uxtb.w	r9, r9
   b7292:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b7296:	45aa      	cmp	sl, r5
   b7298:	d012      	beq.n	b72c0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b729a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b729e:	4631      	mov	r1, r6
   b72a0:	1d38      	adds	r0, r7, #4
   b72a2:	f7ff fe05 	bl	b6eb0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b72a6:	4581      	cmp	r9, r0
   b72a8:	d3f5      	bcc.n	b7296 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b72aa:	683b      	ldr	r3, [r7, #0]
   b72ac:	9a03      	ldr	r2, [sp, #12]
   b72ae:	9200      	str	r2, [sp, #0]
   b72b0:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b72b4:	464a      	mov	r2, r9
   b72b6:	4633      	mov	r3, r6
   b72b8:	4641      	mov	r1, r8
   b72ba:	4638      	mov	r0, r7
   b72bc:	47d8      	blx	fp
   b72be:	e7ea      	b.n	b7296 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b72c0:	2300      	movs	r3, #0
   b72c2:	7323      	strb	r3, [r4, #12]
   b72c4:	e7d9      	b.n	b727a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b72c6:	bf00      	nop
   b72c8:	e000ed00 	.word	0xe000ed00

000b72cc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b72cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b72d0:	469b      	mov	fp, r3
   b72d2:	4b1a      	ldr	r3, [pc, #104]	; (b733c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b72d4:	685b      	ldr	r3, [r3, #4]
   b72d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b72da:	4680      	mov	r8, r0
   b72dc:	4689      	mov	r9, r1
   b72de:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   b72e0:	b96b      	cbnz	r3, b72fe <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b72e2:	f7ff fe91 	bl	b7008 <_ZN5spark10LogManager8instanceEv>
   b72e6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b72e8:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b72ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b72ee:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b72f0:	f7ff fd3b 	bl	b6d6a <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b72f4:	7b23      	ldrb	r3, [r4, #12]
   b72f6:	b12b      	cbz	r3, b7304 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b72f8:	a801      	add	r0, sp, #4
   b72fa:	f7ff ff9e 	bl	b723a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b72fe:	b003      	add	sp, #12
   b7300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b7304:	2301      	movs	r3, #1
   b7306:	7323      	strb	r3, [r4, #12]
   b7308:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b730c:	b2f6      	uxtb	r6, r6
   b730e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b7312:	4555      	cmp	r5, sl
   b7314:	d00e      	beq.n	b7334 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b7316:	f855 7b04 	ldr.w	r7, [r5], #4
   b731a:	4659      	mov	r1, fp
   b731c:	1d38      	adds	r0, r7, #4
   b731e:	f7ff fdc7 	bl	b6eb0 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b7322:	4286      	cmp	r6, r0
   b7324:	d3f5      	bcc.n	b7312 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b7326:	683b      	ldr	r3, [r7, #0]
   b7328:	464a      	mov	r2, r9
   b732a:	68db      	ldr	r3, [r3, #12]
   b732c:	4641      	mov	r1, r8
   b732e:	4638      	mov	r0, r7
   b7330:	4798      	blx	r3
   b7332:	e7ee      	b.n	b7312 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b7334:	2300      	movs	r3, #0
   b7336:	7323      	strb	r3, [r4, #12]
   b7338:	e7de      	b.n	b72f8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b733a:	bf00      	nop
   b733c:	e000ed00 	.word	0xe000ed00

000b7340 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b7340:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7344:	4b16      	ldr	r3, [pc, #88]	; (b73a0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b7346:	685b      	ldr	r3, [r3, #4]
   b7348:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b734c:	4605      	mov	r5, r0
   b734e:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   b7350:	bb1b      	cbnz	r3, b739a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b7352:	f7ff fe59 	bl	b7008 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b7356:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b735a:	4604      	mov	r4, r0
   b735c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b735e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b7360:	f7ff fd03 	bl	b6d6a <_ZN14RecursiveMutex4lockEv.isra.0>
   b7364:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b7368:	2446      	movs	r4, #70	; 0x46
   b736a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b736e:	45b0      	cmp	r8, r6
   b7370:	d109      	bne.n	b7386 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b7372:	a801      	add	r0, sp, #4
   b7374:	f7ff ff61 	bl	b723a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b7378:	42a5      	cmp	r5, r4
   b737a:	bfb4      	ite	lt
   b737c:	2000      	movlt	r0, #0
   b737e:	2001      	movge	r0, #1
}
   b7380:	b002      	add	sp, #8
   b7382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b7386:	f856 0b04 	ldr.w	r0, [r6], #4
   b738a:	4639      	mov	r1, r7
   b738c:	3004      	adds	r0, #4
   b738e:	f7ff fd8f 	bl	b6eb0 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b7392:	4284      	cmp	r4, r0
   b7394:	bfa8      	it	ge
   b7396:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b7398:	e7e9      	b.n	b736e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b739a:	2000      	movs	r0, #0
   b739c:	e7f0      	b.n	b7380 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b739e:	bf00      	nop
   b73a0:	e000ed00 	.word	0xe000ed00

000b73a4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b73a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b73a6:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b73aa:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b73ac:	4604      	mov	r4, r0
   b73ae:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b73b0:	db0d      	blt.n	b73ce <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b73b2:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b73b4:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b73b6:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b73b8:	dd04      	ble.n	b73c4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b73ba:	00b9      	lsls	r1, r7, #2
   b73bc:	f7fd feae 	bl	b511c <realloc>
            if (!d) {
   b73c0:	b918      	cbnz	r0, b73ca <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b73c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b73c4:	f7fd fea2 	bl	b510c <free>
        T* d = nullptr;
   b73c8:	2000      	movs	r0, #0
        data_ = d;
   b73ca:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b73cc:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b73ce:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b73d0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b73d2:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b73d6:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b73d8:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b73dc:	1d08      	adds	r0, r1, #4
   b73de:	f001 fd95 	bl	b8f0c <memmove>
    new(p) T(std::move(value));
   b73e2:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b73e6:	6863      	ldr	r3, [r4, #4]
   b73e8:	3301      	adds	r3, #1
   b73ea:	6063      	str	r3, [r4, #4]
    return true;
   b73ec:	2001      	movs	r0, #1
   b73ee:	e7e8      	b.n	b73c2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b73f0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b73f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b73f2:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b73f6:	4604      	mov	r4, r0
   b73f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b73fa:	9301      	str	r3, [sp, #4]
   b73fc:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b73fe:	f7ff fcb4 	bl	b6d6a <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b7402:	e9d4 3200 	ldrd	r3, r2, [r4]
   b7406:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b740a:	4293      	cmp	r3, r2
   b740c:	4619      	mov	r1, r3
   b740e:	d00b      	beq.n	b7428 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b7410:	6809      	ldr	r1, [r1, #0]
   b7412:	42a9      	cmp	r1, r5
   b7414:	f103 0304 	add.w	r3, r3, #4
   b7418:	d1f7      	bne.n	b740a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b741a:	a801      	add	r0, sp, #4
   b741c:	f7ff ff0d 	bl	b723a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b7420:	2500      	movs	r5, #0
}
   b7422:	4628      	mov	r0, r5
   b7424:	b003      	add	sp, #12
   b7426:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b7428:	4629      	mov	r1, r5
   b742a:	4620      	mov	r0, r4
   b742c:	f7ff ffba 	bl	b73a4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b7430:	4605      	mov	r5, r0
   b7432:	2800      	cmp	r0, #0
   b7434:	d0f1      	beq.n	b741a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b7436:	6863      	ldr	r3, [r4, #4]
   b7438:	2b01      	cmp	r3, #1
   b743a:	d101      	bne.n	b7440 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b743c:	f7ff fe00 	bl	b7040 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b7440:	a801      	add	r0, sp, #4
   b7442:	f7ff fefa 	bl	b723a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b7446:	e7ec      	b.n	b7422 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b7448 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7448:	b570      	push	{r4, r5, r6, lr}
   b744a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b744c:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7450:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b7452:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b7456:	4282      	cmp	r2, r0
   b7458:	d00f      	beq.n	b747a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b745a:	4601      	mov	r1, r0
            if (*p == value) {
   b745c:	681d      	ldr	r5, [r3, #0]
   b745e:	f851 6b04 	ldr.w	r6, [r1], #4
   b7462:	42ae      	cmp	r6, r5
   b7464:	d107      	bne.n	b7476 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7466:	1a52      	subs	r2, r2, r1
   b7468:	f001 fd50 	bl	b8f0c <memmove>
    --size_;
   b746c:	6863      	ldr	r3, [r4, #4]
   b746e:	3b01      	subs	r3, #1
   b7470:	6063      	str	r3, [r4, #4]
    return true;
   b7472:	2001      	movs	r0, #1
}
   b7474:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b7476:	4608      	mov	r0, r1
   b7478:	e7ed      	b.n	b7456 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b747a:	2000      	movs	r0, #0
   b747c:	e7fa      	b.n	b7474 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b747e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b747e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b7480:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b7484:	4604      	mov	r4, r0
   b7486:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b7488:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b748a:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b748c:	f7ff fc6d 	bl	b6d6a <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b7490:	a901      	add	r1, sp, #4
   b7492:	4620      	mov	r0, r4
   b7494:	f7ff ffd8 	bl	b7448 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b7498:	b118      	cbz	r0, b74a2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b749a:	6863      	ldr	r3, [r4, #4]
   b749c:	b90b      	cbnz	r3, b74a2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b749e:	f7ff fddb 	bl	b7058 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b74a2:	a803      	add	r0, sp, #12
   b74a4:	f7ff fec9 	bl	b723a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b74a8:	b004      	add	sp, #16
   b74aa:	bd10      	pop	{r4, pc}

000b74ac <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b74ac:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b74ae:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b74b2:	2318      	movs	r3, #24
   b74b4:	4604      	mov	r4, r0
   b74b6:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b74ba:	42ae      	cmp	r6, r5
   b74bc:	d015      	beq.n	b74ea <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b74be:	f105 0110 	add.w	r1, r5, #16
   b74c2:	4620      	mov	r0, r4
   b74c4:	f7ff ffc0 	bl	b7448 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b74c8:	6863      	ldr	r3, [r4, #4]
   b74ca:	b90b      	cbnz	r3, b74d0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b74cc:	f7ff fdc4 	bl	b7058 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b74d0:	69e0      	ldr	r0, [r4, #28]
   b74d2:	6929      	ldr	r1, [r5, #16]
   b74d4:	6803      	ldr	r3, [r0, #0]
   b74d6:	68db      	ldr	r3, [r3, #12]
   b74d8:	4798      	blx	r3
        if (h.stream) {
   b74da:	6969      	ldr	r1, [r5, #20]
   b74dc:	b119      	cbz	r1, b74e6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b74de:	6a20      	ldr	r0, [r4, #32]
   b74e0:	6803      	ldr	r3, [r0, #0]
   b74e2:	68db      	ldr	r3, [r3, #12]
   b74e4:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b74e6:	3518      	adds	r5, #24
   b74e8:	e7e7      	b.n	b74ba <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b74ea:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b74ee:	2618      	movs	r6, #24
   b74f0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b74f4:	42ae      	cmp	r6, r5
   b74f6:	d004      	beq.n	b7502 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b74f8:	4628      	mov	r0, r5
   b74fa:	f7fd fedb 	bl	b52b4 <_ZN6StringD1Ev>
   b74fe:	3518      	adds	r5, #24
   b7500:	e7f8      	b.n	b74f4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b7502:	2300      	movs	r3, #0
   b7504:	6163      	str	r3, [r4, #20]
}
   b7506:	bd70      	pop	{r4, r5, r6, pc}

000b7508 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b7508:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b750a:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b750c:	f7ff fda4 	bl	b7058 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b7510:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b7514:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7516:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b7518:	f7ff fc27 	bl	b6d6a <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b751c:	4620      	mov	r0, r4
   b751e:	f7ff ffc5 	bl	b74ac <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b7522:	a801      	add	r0, sp, #4
   b7524:	f7ff fe89 	bl	b723a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b7528:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b752a:	b108      	cbz	r0, b7530 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b752c:	f7fd fc42 	bl	b4db4 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b7530:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b7534:	2618      	movs	r6, #24
   b7536:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b753a:	42ae      	cmp	r6, r5
   b753c:	d004      	beq.n	b7548 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b753e:	4628      	mov	r0, r5
   b7540:	f7fd feb8 	bl	b52b4 <_ZN6StringD1Ev>
   b7544:	3518      	adds	r5, #24
   b7546:	e7f8      	b.n	b753a <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b7548:	6920      	ldr	r0, [r4, #16]
   b754a:	f7fd fddf 	bl	b510c <free>
   b754e:	6820      	ldr	r0, [r4, #0]
   b7550:	f7fd fddc 	bl	b510c <free>
}
   b7554:	4620      	mov	r0, r4
   b7556:	b002      	add	sp, #8
   b7558:	bd70      	pop	{r4, r5, r6, pc}
	...

000b755c <__tcf_2>:
    static LogManager mgr;
   b755c:	4801      	ldr	r0, [pc, #4]	; (b7564 <__tcf_2+0x8>)
   b755e:	f7ff bfd3 	b.w	b7508 <_ZN5spark10LogManagerD1Ev>
   b7562:	bf00      	nop
   b7564:	2003e6d4 	.word	0x2003e6d4

000b7568 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b7568:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b756a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b756c:	4604      	mov	r4, r0
   b756e:	460d      	mov	r5, r1
   b7570:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7572:	d915      	bls.n	b75a0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b7574:	4290      	cmp	r0, r2
   b7576:	d214      	bcs.n	b75a2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b7578:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b757c:	1a75      	subs	r5, r6, r1
   b757e:	f1a1 0714 	sub.w	r7, r1, #20
   b7582:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7584:	42b7      	cmp	r7, r6
   b7586:	d01a      	beq.n	b75be <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b7588:	b11c      	cbz	r4, b7592 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b758a:	4631      	mov	r1, r6
   b758c:	4620      	mov	r0, r4
   b758e:	f7ff fc40 	bl	b6e12 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b7592:	f106 0008 	add.w	r0, r6, #8
   b7596:	f7ff fdf9 	bl	b718c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b759a:	3e14      	subs	r6, #20
   b759c:	3c14      	subs	r4, #20
   b759e:	e7f1      	b.n	b7584 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b75a0:	d00d      	beq.n	b75be <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b75a2:	42b5      	cmp	r5, r6
   b75a4:	d00b      	beq.n	b75be <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b75a6:	b11c      	cbz	r4, b75b0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b75a8:	4629      	mov	r1, r5
   b75aa:	4620      	mov	r0, r4
   b75ac:	f7ff fc31 	bl	b6e12 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b75b0:	f105 0008 	add.w	r0, r5, #8
   b75b4:	f7ff fdea 	bl	b718c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b75b8:	3514      	adds	r5, #20
   b75ba:	3414      	adds	r4, #20
   b75bc:	e7f1      	b.n	b75a2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b75be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b75c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b75c0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b75c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b75c4:	4604      	mov	r4, r0
   b75c6:	460d      	mov	r5, r1
   b75c8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b75ca:	d914      	bls.n	b75f6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b75cc:	4290      	cmp	r0, r2
   b75ce:	d213      	bcs.n	b75f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b75d0:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b75d4:	1a75      	subs	r5, r6, r1
   b75d6:	f1a1 0710 	sub.w	r7, r1, #16
   b75da:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b75dc:	42b7      	cmp	r7, r6
   b75de:	d018      	beq.n	b7612 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b75e0:	b11c      	cbz	r4, b75ea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b75e2:	4631      	mov	r1, r6
   b75e4:	4620      	mov	r0, r4
   b75e6:	f7fd fee1 	bl	b53ac <_ZN6StringC1EOS_>
                end->~T();
   b75ea:	4630      	mov	r0, r6
   b75ec:	f7fd fe62 	bl	b52b4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b75f0:	3e10      	subs	r6, #16
   b75f2:	3c10      	subs	r4, #16
   b75f4:	e7f2      	b.n	b75dc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b75f6:	d00c      	beq.n	b7612 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b75f8:	42b5      	cmp	r5, r6
   b75fa:	d00a      	beq.n	b7612 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b75fc:	b11c      	cbz	r4, b7606 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b75fe:	4629      	mov	r1, r5
   b7600:	4620      	mov	r0, r4
   b7602:	f7fd fed3 	bl	b53ac <_ZN6StringC1EOS_>
                p->~T();
   b7606:	4628      	mov	r0, r5
   b7608:	f7fd fe54 	bl	b52b4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b760c:	3510      	adds	r5, #16
   b760e:	3410      	adds	r4, #16
   b7610:	e7f2      	b.n	b75f8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b7612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7614 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b7614:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7616:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7618:	4605      	mov	r5, r0
        if (n > 0) {
   b761a:	dd11      	ble.n	b7640 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b761c:	0130      	lsls	r0, r6, #4
   b761e:	f7fd fd6d 	bl	b50fc <malloc>
            if (!d) {
   b7622:	4604      	mov	r4, r0
   b7624:	b158      	cbz	r0, b763e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7626:	e9d5 1200 	ldrd	r1, r2, [r5]
   b762a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b762e:	f7ff ffc7 	bl	b75c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b7632:	6828      	ldr	r0, [r5, #0]
   b7634:	f7fd fd6a 	bl	b510c <free>
        data_ = d;
   b7638:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b763a:	60ae      	str	r6, [r5, #8]
        return true;
   b763c:	2001      	movs	r0, #1
    }
   b763e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7640:	2400      	movs	r4, #0
   b7642:	e7f6      	b.n	b7632 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b7644 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b7644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7648:	4690      	mov	r8, r2
   b764a:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b764c:	2300      	movs	r3, #0
   b764e:	9103      	str	r1, [sp, #12]
    return size_;
   b7650:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b7654:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b7656:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b7658:	4299      	cmp	r1, r3
        capacity_(0) {
   b765a:	e9c0 3300 	strd	r3, r3, [r0]
   b765e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b7662:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b7666:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b766a:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b766c:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b766e:	dc23      	bgt.n	b76b8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b7670:	e9d8 5700 	ldrd	r5, r7, [r8]
   b7674:	2314      	movs	r3, #20
   b7676:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b767a:	42af      	cmp	r7, r5
   b767c:	d03b      	beq.n	b76f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b767e:	4629      	mov	r1, r5
   b7680:	a80b      	add	r0, sp, #44	; 0x2c
   b7682:	f7fd fe93 	bl	b53ac <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b7686:	a90b      	add	r1, sp, #44	; 0x2c
   b7688:	a80f      	add	r0, sp, #60	; 0x3c
   b768a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b768c:	f7fd fe8e 	bl	b53ac <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7690:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b7694:	4299      	cmp	r1, r3
   b7696:	da1b      	bge.n	b76d0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b7698:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b769a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b769c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b76a0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b76a4:	4631      	mov	r1, r6
   b76a6:	f106 0010 	add.w	r0, r6, #16
   b76aa:	f7ff ff89 	bl	b75c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b76ae:	b9ee      	cbnz	r6, b76ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b76b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b76b2:	3301      	adds	r3, #1
   b76b4:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b76b6:	e011      	b.n	b76dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b76b8:	a808      	add	r0, sp, #32
   b76ba:	f7ff ffab 	bl	b7614 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b76be:	2800      	cmp	r0, #0
   b76c0:	d1d6      	bne.n	b7670 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b76c2:	a808      	add	r0, sp, #32
   b76c4:	f7fe fa16 	bl	b5af4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b76c8:	4620      	mov	r0, r4
   b76ca:	b015      	add	sp, #84	; 0x54
   b76cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b76d0:	3101      	adds	r1, #1
   b76d2:	a808      	add	r0, sp, #32
   b76d4:	f7ff ff9e 	bl	b7614 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b76d8:	2800      	cmp	r0, #0
   b76da:	d1dd      	bne.n	b7698 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b76dc:	a80f      	add	r0, sp, #60	; 0x3c
   b76de:	f7fd fde9 	bl	b52b4 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b76e2:	a80b      	add	r0, sp, #44	; 0x2c
   b76e4:	f7fd fde6 	bl	b52b4 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b76e8:	3514      	adds	r5, #20
   b76ea:	e7c6      	b.n	b767a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b76ec:	a90f      	add	r1, sp, #60	; 0x3c
   b76ee:	4630      	mov	r0, r6
   b76f0:	f7fd fe5c 	bl	b53ac <_ZN6StringC1EOS_>
   b76f4:	e7dc      	b.n	b76b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b76f6:	2600      	movs	r6, #0
   b76f8:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b76fc:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b76fe:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b7702:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b7706:	429e      	cmp	r6, r3
   b7708:	da7c      	bge.n	b7804 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b770a:	0133      	lsls	r3, r6, #4
   b770c:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b770e:	9306      	str	r3, [sp, #24]
        if (!category) {
   b7710:	b90b      	cbnz	r3, b7716 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b7712:	3601      	adds	r6, #1
   b7714:	e7f5      	b.n	b7702 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b7716:	2300      	movs	r3, #0
   b7718:	9307      	str	r3, [sp, #28]
   b771a:	fb09 f306 	mul.w	r3, r9, r6
   b771e:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b7720:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b7722:	a907      	add	r1, sp, #28
   b7724:	a806      	add	r0, sp, #24
   b7726:	f7ff faf9 	bl	b6d1c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b772a:	4682      	mov	sl, r0
   b772c:	2800      	cmp	r0, #0
   b772e:	d0f0      	beq.n	b7712 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b7730:	f04f 0300 	mov.w	r3, #0
   b7734:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b7738:	4601      	mov	r1, r0
   b773a:	9a07      	ldr	r2, [sp, #28]
   b773c:	f10d 0317 	add.w	r3, sp, #23
   b7740:	4628      	mov	r0, r5
   b7742:	f7ff fb79 	bl	b6e38 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b7746:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b774a:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b774c:	2f00      	cmp	r7, #0
   b774e:	d14a      	bne.n	b77e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b7750:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b7754:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b7758:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b775c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7760:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b7764:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b7768:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b776a:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b776e:	4293      	cmp	r3, r2
   b7770:	db17      	blt.n	b77a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b7772:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b7776:	f1ba 0f00 	cmp.w	sl, #0
   b777a:	dd30      	ble.n	b77de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b777c:	fb09 f00a 	mul.w	r0, r9, sl
   b7780:	f7fd fcbc 	bl	b50fc <malloc>
            if (!d) {
   b7784:	4683      	mov	fp, r0
   b7786:	b360      	cbz	r0, b77e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b7788:	e9d5 1200 	ldrd	r1, r2, [r5]
   b778c:	fb09 1202 	mla	r2, r9, r2, r1
   b7790:	f7ff feea 	bl	b7568 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b7794:	6828      	ldr	r0, [r5, #0]
   b7796:	f7fd fcb9 	bl	b510c <free>
        data_ = d;
   b779a:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b779e:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b77a2:	682b      	ldr	r3, [r5, #0]
   b77a4:	9a01      	ldr	r2, [sp, #4]
   b77a6:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b77aa:	686a      	ldr	r2, [r5, #4]
   b77ac:	4651      	mov	r1, sl
   b77ae:	fb09 3202 	mla	r2, r9, r2, r3
   b77b2:	f10a 0014 	add.w	r0, sl, #20
   b77b6:	f7ff fed7 	bl	b7568 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b77ba:	f1ba 0f00 	cmp.w	sl, #0
   b77be:	d003      	beq.n	b77c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b77c0:	a90f      	add	r1, sp, #60	; 0x3c
   b77c2:	4650      	mov	r0, sl
   b77c4:	f7ff fb25 	bl	b6e12 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b77c8:	686b      	ldr	r3, [r5, #4]
   b77ca:	3301      	adds	r3, #1
   b77cc:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b77ce:	a811      	add	r0, sp, #68	; 0x44
   b77d0:	f7ff fcdc 	bl	b718c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b77d4:	b13f      	cbz	r7, b77e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b77d6:	a80b      	add	r0, sp, #44	; 0x2c
   b77d8:	f7ff fcd8 	bl	b718c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b77dc:	e771      	b.n	b76c2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b77de:	46bb      	mov	fp, r7
   b77e0:	e7d8      	b.n	b7794 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b77e2:	2701      	movs	r7, #1
   b77e4:	e7f3      	b.n	b77ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b77e6:	9b01      	ldr	r3, [sp, #4]
   b77e8:	682d      	ldr	r5, [r5, #0]
   b77ea:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b77ee:	9b06      	ldr	r3, [sp, #24]
   b77f0:	781b      	ldrb	r3, [r3, #0]
   b77f2:	b92b      	cbnz	r3, b7800 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b77f4:	f8d8 3000 	ldr.w	r3, [r8]
   b77f8:	9a02      	ldr	r2, [sp, #8]
   b77fa:	4413      	add	r3, r2
   b77fc:	7c1b      	ldrb	r3, [r3, #16]
   b77fe:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b7800:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b7802:	e78e      	b.n	b7722 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7804:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b7806:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7808:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b780a:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b780c:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b780e:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b7810:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b7812:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7814:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7816:	60a2      	str	r2, [r4, #8]
   b7818:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b781a:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b781c:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b781e:	60e2      	str	r2, [r4, #12]
   b7820:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b7822:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7824:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7826:	6122      	str	r2, [r4, #16]
   b7828:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b782a:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b782c:	9b03      	ldr	r3, [sp, #12]
   b782e:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b7830:	6162      	str	r2, [r4, #20]
   b7832:	7623      	strb	r3, [r4, #24]
   b7834:	e7cf      	b.n	b77d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b7838 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b7838:	b5f0      	push	{r4, r5, r6, r7, lr}
   b783a:	4604      	mov	r4, r0
   b783c:	b087      	sub	sp, #28
   b783e:	460d      	mov	r5, r1
        filter_(level, filters) {
   b7840:	4626      	mov	r6, r4
        stream_(&stream) {
   b7842:	4619      	mov	r1, r3
   b7844:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b7846:	4617      	mov	r7, r2
        stream_(&stream) {
   b7848:	f7fc fd75 	bl	b4336 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b784c:	4b0b      	ldr	r3, [pc, #44]	; (b787c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b784e:	f846 3b04 	str.w	r3, [r6], #4
   b7852:	4669      	mov	r1, sp
   b7854:	a803      	add	r0, sp, #12
   b7856:	f7fc fd6e 	bl	b4336 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b785a:	aa03      	add	r2, sp, #12
   b785c:	4639      	mov	r1, r7
   b785e:	4630      	mov	r0, r6
   b7860:	f7ff fef0 	bl	b7644 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b7864:	a803      	add	r0, sp, #12
   b7866:	f7fc fd25 	bl	b42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b786a:	4668      	mov	r0, sp
   b786c:	f7fc fd22 	bl	b42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b7870:	4b03      	ldr	r3, [pc, #12]	; (b7880 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b7872:	6023      	str	r3, [r4, #0]
}
   b7874:	4620      	mov	r0, r4
        stream_(&stream) {
   b7876:	6225      	str	r5, [r4, #32]
}
   b7878:	b007      	add	sp, #28
   b787a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b787c:	000b9304 	.word	0x000b9304
   b7880:	000b94f8 	.word	0x000b94f8

000b7884 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b7884:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7886:	460f      	mov	r7, r1
   b7888:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b788a:	491d      	ldr	r1, [pc, #116]	; (b7900 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b788c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b788e:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b7890:	4616      	mov	r6, r2
   b7892:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b7894:	f7fc fbc2 	bl	b401c <strcmp>
   b7898:	b9c0      	cbnz	r0, b78cc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b789a:	b1a4      	cbz	r4, b78c6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b789c:	4629      	mov	r1, r5
   b789e:	a801      	add	r0, sp, #4
   b78a0:	f7ff fcbc 	bl	b721c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b78a4:	4917      	ldr	r1, [pc, #92]	; (b7904 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b78a6:	2024      	movs	r0, #36	; 0x24
   b78a8:	f001 f9ea 	bl	b8c80 <_ZnwjRKSt9nothrow_t>
   b78ac:	4605      	mov	r5, r0
   b78ae:	b130      	cbz	r0, b78be <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b78b0:	ab01      	add	r3, sp, #4
   b78b2:	4632      	mov	r2, r6
   b78b4:	4621      	mov	r1, r4
   b78b6:	f7ff ffbf 	bl	b7838 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b78ba:	4b13      	ldr	r3, [pc, #76]	; (b7908 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b78bc:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b78be:	a801      	add	r0, sp, #4
   b78c0:	f7fc fcf8 	bl	b42b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b78c4:	462c      	mov	r4, r5
}
   b78c6:	4620      	mov	r0, r4
   b78c8:	b005      	add	sp, #20
   b78ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b78cc:	490f      	ldr	r1, [pc, #60]	; (b790c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b78ce:	4638      	mov	r0, r7
   b78d0:	f7fc fba4 	bl	b401c <strcmp>
   b78d4:	b990      	cbnz	r0, b78fc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b78d6:	2c00      	cmp	r4, #0
   b78d8:	d0f5      	beq.n	b78c6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b78da:	4629      	mov	r1, r5
   b78dc:	a801      	add	r0, sp, #4
   b78de:	f7ff fc9d 	bl	b721c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b78e2:	4908      	ldr	r1, [pc, #32]	; (b7904 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b78e4:	2024      	movs	r0, #36	; 0x24
   b78e6:	f001 f9cb 	bl	b8c80 <_ZnwjRKSt9nothrow_t>
   b78ea:	4605      	mov	r5, r0
   b78ec:	2800      	cmp	r0, #0
   b78ee:	d0e6      	beq.n	b78be <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b78f0:	ab01      	add	r3, sp, #4
   b78f2:	4632      	mov	r2, r6
   b78f4:	4621      	mov	r1, r4
   b78f6:	f7ff ff9f 	bl	b7838 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b78fa:	e7e0      	b.n	b78be <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b78fc:	2400      	movs	r4, #0
   b78fe:	e7e2      	b.n	b78c6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b7900:	000b9478 	.word	0x000b9478
   b7904:	000b96e1 	.word	0x000b96e1
   b7908:	000b9510 	.word	0x000b9510
   b790c:	000b947c 	.word	0x000b947c

000b7910 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b7910:	4b01      	ldr	r3, [pc, #4]	; (b7918 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7912:	4a02      	ldr	r2, [pc, #8]	; (b791c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7914:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7916:	4770      	bx	lr
   b7918:	2003e6d0 	.word	0x2003e6d0
   b791c:	000b948d 	.word	0x000b948d

000b7920 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b7920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7924:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b7926:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b792a:	4604      	mov	r4, r0
   b792c:	460e      	mov	r6, r1
   b792e:	4617      	mov	r7, r2
   b7930:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b7932:	f000 fb4f 	bl	b7fd4 <_Z16_fetch_usbserialv>
   b7936:	4581      	cmp	r9, r0
   b7938:	d04c      	beq.n	b79d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b793a:	792b      	ldrb	r3, [r5, #4]
   b793c:	0719      	lsls	r1, r3, #28
   b793e:	d504      	bpl.n	b794a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b7940:	696a      	ldr	r2, [r5, #20]
   b7942:	4954      	ldr	r1, [pc, #336]	; (b7a94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b7944:	4620      	mov	r0, r4
   b7946:	f7ff fadc 	bl	b6f02 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b794a:	f1b8 0f00 	cmp.w	r8, #0
   b794e:	d00d      	beq.n	b796c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b7950:	215b      	movs	r1, #91	; 0x5b
   b7952:	4620      	mov	r0, r4
   b7954:	f7ff fa51 	bl	b6dfa <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b7958:	4641      	mov	r1, r8
   b795a:	4620      	mov	r0, r4
   b795c:	f7ff fa3e 	bl	b6ddc <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b7960:	6823      	ldr	r3, [r4, #0]
   b7962:	494d      	ldr	r1, [pc, #308]	; (b7a98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b7964:	68db      	ldr	r3, [r3, #12]
   b7966:	2202      	movs	r2, #2
   b7968:	4620      	mov	r0, r4
   b796a:	4798      	blx	r3
    if (attr.has_file) {
   b796c:	792b      	ldrb	r3, [r5, #4]
   b796e:	07da      	lsls	r2, r3, #31
   b7970:	d523      	bpl.n	b79ba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b7972:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b7976:	212f      	movs	r1, #47	; 0x2f
   b7978:	4640      	mov	r0, r8
   b797a:	f001 fb56 	bl	b902a <strrchr>
    if (s1) {
   b797e:	b108      	cbz	r0, b7984 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b7980:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b7984:	4641      	mov	r1, r8
   b7986:	4620      	mov	r0, r4
   b7988:	f7ff fa28 	bl	b6ddc <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b798c:	792b      	ldrb	r3, [r5, #4]
   b798e:	079b      	lsls	r3, r3, #30
   b7990:	d508      	bpl.n	b79a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b7992:	213a      	movs	r1, #58	; 0x3a
   b7994:	4620      	mov	r0, r4
   b7996:	f7ff fa30 	bl	b6dfa <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b799a:	68ea      	ldr	r2, [r5, #12]
   b799c:	493f      	ldr	r1, [pc, #252]	; (b7a9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b799e:	4620      	mov	r0, r4
   b79a0:	f7ff faaf 	bl	b6f02 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b79a4:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b79a6:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b79a8:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b79ac:	68db      	ldr	r3, [r3, #12]
   b79ae:	bf14      	ite	ne
   b79b0:	493b      	ldrne	r1, [pc, #236]	; (b7aa0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b79b2:	493c      	ldreq	r1, [pc, #240]	; (b7aa4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b79b4:	2202      	movs	r2, #2
            write(": ", 2);
   b79b6:	4620      	mov	r0, r4
   b79b8:	4798      	blx	r3
    if (attr.has_function) {
   b79ba:	792b      	ldrb	r3, [r5, #4]
   b79bc:	0758      	lsls	r0, r3, #29
   b79be:	d51d      	bpl.n	b79fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b79c0:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b79c2:	460b      	mov	r3, r1
   b79c4:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b79c6:	f813 0b01 	ldrb.w	r0, [r3], #1
   b79ca:	b160      	cbz	r0, b79e6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b79cc:	2820      	cmp	r0, #32
   b79ce:	d108      	bne.n	b79e2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b79d0:	4619      	mov	r1, r3
   b79d2:	e7f7      	b.n	b79c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b79d4:	4834      	ldr	r0, [pc, #208]	; (b7aa8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b79d6:	f000 fec0 	bl	b875a <_ZN5spark12NetworkClass9listeningEv>
   b79da:	2800      	cmp	r0, #0
   b79dc:	d0ad      	beq.n	b793a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b79de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b79e2:	2828      	cmp	r0, #40	; 0x28
   b79e4:	d1ee      	bne.n	b79c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b79e6:	6823      	ldr	r3, [r4, #0]
   b79e8:	1a52      	subs	r2, r2, r1
   b79ea:	68db      	ldr	r3, [r3, #12]
   b79ec:	4620      	mov	r0, r4
   b79ee:	4798      	blx	r3
        write("(): ", 4);
   b79f0:	6823      	ldr	r3, [r4, #0]
   b79f2:	492e      	ldr	r1, [pc, #184]	; (b7aac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b79f4:	68db      	ldr	r3, [r3, #12]
   b79f6:	2204      	movs	r2, #4
   b79f8:	4620      	mov	r0, r4
   b79fa:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b79fc:	2100      	movs	r1, #0
   b79fe:	4638      	mov	r0, r7
   b7a00:	f7fd fad8 	bl	b4fb4 <log_level_name>
   b7a04:	4601      	mov	r1, r0
    write(s);
   b7a06:	4620      	mov	r0, r4
   b7a08:	f7ff f9e8 	bl	b6ddc <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b7a0c:	6823      	ldr	r3, [r4, #0]
   b7a0e:	4925      	ldr	r1, [pc, #148]	; (b7aa4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b7a10:	68db      	ldr	r3, [r3, #12]
   b7a12:	2202      	movs	r2, #2
   b7a14:	4620      	mov	r0, r4
   b7a16:	4798      	blx	r3
    if (msg) {
   b7a18:	b11e      	cbz	r6, b7a22 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b7a1a:	4631      	mov	r1, r6
   b7a1c:	4620      	mov	r0, r4
   b7a1e:	f7ff f9dd 	bl	b6ddc <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b7a22:	792b      	ldrb	r3, [r5, #4]
   b7a24:	f013 0f30 	tst.w	r3, #48	; 0x30
   b7a28:	d02c      	beq.n	b7a84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b7a2a:	6823      	ldr	r3, [r4, #0]
   b7a2c:	4920      	ldr	r1, [pc, #128]	; (b7ab0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b7a2e:	68db      	ldr	r3, [r3, #12]
   b7a30:	2202      	movs	r2, #2
   b7a32:	4620      	mov	r0, r4
   b7a34:	4798      	blx	r3
        if (attr.has_code) {
   b7a36:	792b      	ldrb	r3, [r5, #4]
   b7a38:	06d9      	lsls	r1, r3, #27
   b7a3a:	d50a      	bpl.n	b7a52 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b7a3c:	6823      	ldr	r3, [r4, #0]
   b7a3e:	491d      	ldr	r1, [pc, #116]	; (b7ab4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b7a40:	68db      	ldr	r3, [r3, #12]
   b7a42:	2207      	movs	r2, #7
   b7a44:	4620      	mov	r0, r4
   b7a46:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b7a48:	69aa      	ldr	r2, [r5, #24]
   b7a4a:	491b      	ldr	r1, [pc, #108]	; (b7ab8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b7a4c:	4620      	mov	r0, r4
   b7a4e:	f7ff fa58 	bl	b6f02 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b7a52:	792b      	ldrb	r3, [r5, #4]
   b7a54:	069a      	lsls	r2, r3, #26
   b7a56:	d511      	bpl.n	b7a7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b7a58:	06db      	lsls	r3, r3, #27
   b7a5a:	d505      	bpl.n	b7a68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b7a5c:	6823      	ldr	r3, [r4, #0]
   b7a5e:	4910      	ldr	r1, [pc, #64]	; (b7aa0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b7a60:	68db      	ldr	r3, [r3, #12]
   b7a62:	2202      	movs	r2, #2
   b7a64:	4620      	mov	r0, r4
   b7a66:	4798      	blx	r3
            write("details = ", 10);
   b7a68:	6823      	ldr	r3, [r4, #0]
   b7a6a:	4914      	ldr	r1, [pc, #80]	; (b7abc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b7a6c:	68db      	ldr	r3, [r3, #12]
   b7a6e:	4620      	mov	r0, r4
   b7a70:	220a      	movs	r2, #10
   b7a72:	4798      	blx	r3
            write(attr.details);
   b7a74:	69e9      	ldr	r1, [r5, #28]
   b7a76:	4620      	mov	r0, r4
   b7a78:	f7ff f9b0 	bl	b6ddc <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b7a7c:	215d      	movs	r1, #93	; 0x5d
   b7a7e:	4620      	mov	r0, r4
   b7a80:	f7ff f9bb 	bl	b6dfa <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b7a84:	6823      	ldr	r3, [r4, #0]
   b7a86:	490e      	ldr	r1, [pc, #56]	; (b7ac0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b7a88:	68db      	ldr	r3, [r3, #12]
   b7a8a:	4620      	mov	r0, r4
   b7a8c:	2202      	movs	r2, #2
}
   b7a8e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b7a92:	4718      	bx	r3
   b7a94:	000b9491 	.word	0x000b9491
   b7a98:	000b9498 	.word	0x000b9498
   b7a9c:	000b95f4 	.word	0x000b95f4
   b7aa0:	000b949b 	.word	0x000b949b
   b7aa4:	000b94a0 	.word	0x000b94a0
   b7aa8:	2003e738 	.word	0x2003e738
   b7aac:	000b949e 	.word	0x000b949e
   b7ab0:	000b94a3 	.word	0x000b94a3
   b7ab4:	000b94a6 	.word	0x000b94a6
   b7ab8:	000b94ae 	.word	0x000b94ae
   b7abc:	000b94b1 	.word	0x000b94b1
   b7ac0:	000b94bc 	.word	0x000b94bc

000b7ac4 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b7ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7ac8:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   b7aca:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b7acc:	460d      	mov	r5, r1
   b7ace:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   b7ad0:	f000 fa80 	bl	b7fd4 <_Z16_fetch_usbserialv>
   b7ad4:	4287      	cmp	r7, r0
   b7ad6:	d007      	beq.n	b7ae8 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   b7ad8:	6a20      	ldr	r0, [r4, #32]
   b7ada:	6803      	ldr	r3, [r0, #0]
   b7adc:	4632      	mov	r2, r6
   b7ade:	4629      	mov	r1, r5
   b7ae0:	68db      	ldr	r3, [r3, #12]
}
   b7ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   b7ae6:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   b7ae8:	4803      	ldr	r0, [pc, #12]	; (b7af8 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   b7aea:	f000 fe36 	bl	b875a <_ZN5spark12NetworkClass9listeningEv>
   b7aee:	2800      	cmp	r0, #0
   b7af0:	d0f2      	beq.n	b7ad8 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   b7af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7af6:	bf00      	nop
   b7af8:	2003e738 	.word	0x2003e738

000b7afc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b7afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7b00:	b085      	sub	sp, #20
    return stream_;
   b7b02:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b7b06:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b7b08:	4605      	mov	r5, r0
   b7b0a:	460f      	mov	r7, r1
   b7b0c:	4690      	mov	r8, r2
   b7b0e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b7b10:	f000 fa60 	bl	b7fd4 <_Z16_fetch_usbserialv>
   b7b14:	4581      	cmp	r9, r0
   b7b16:	d105      	bne.n	b7b24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b7b18:	4849      	ldr	r0, [pc, #292]	; (b7c40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b7b1a:	f000 fe1e 	bl	b875a <_ZN5spark12NetworkClass9listeningEv>
   b7b1e:	2800      	cmp	r0, #0
   b7b20:	f040 808a 	bne.w	b7c38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b7b24:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b7b26:	4a47      	ldr	r2, [pc, #284]	; (b7c44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b7b28:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b7b2a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b7b2e:	a801      	add	r0, sp, #4
        strm_(stream) {
   b7b30:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b7b32:	f88d 9008 	strb.w	r9, [sp, #8]
   b7b36:	f000 ffb4 	bl	b8aa2 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b7b3a:	4649      	mov	r1, r9
   b7b3c:	4640      	mov	r0, r8
   b7b3e:	f7fd fa39 	bl	b4fb4 <log_level_name>
    json.name("l", 1).value(s);
   b7b42:	4941      	ldr	r1, [pc, #260]	; (b7c48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b7b44:	4680      	mov	r8, r0
   b7b46:	2201      	movs	r2, #1
   b7b48:	a801      	add	r0, sp, #4
   b7b4a:	f001 f839 	bl	b8bc0 <_ZN5spark10JSONWriter4nameEPKcj>
   b7b4e:	4641      	mov	r1, r8
   b7b50:	f7ff f936 	bl	b6dc0 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b7b54:	b13f      	cbz	r7, b7b66 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b7b56:	493d      	ldr	r1, [pc, #244]	; (b7c4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b7b58:	2201      	movs	r2, #1
   b7b5a:	a801      	add	r0, sp, #4
   b7b5c:	f001 f830 	bl	b8bc0 <_ZN5spark10JSONWriter4nameEPKcj>
   b7b60:	4639      	mov	r1, r7
   b7b62:	f7ff f92d 	bl	b6dc0 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b7b66:	b13e      	cbz	r6, b7b78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b7b68:	4939      	ldr	r1, [pc, #228]	; (b7c50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b7b6a:	2201      	movs	r2, #1
   b7b6c:	a801      	add	r0, sp, #4
   b7b6e:	f001 f827 	bl	b8bc0 <_ZN5spark10JSONWriter4nameEPKcj>
   b7b72:	4631      	mov	r1, r6
   b7b74:	f7ff f924 	bl	b6dc0 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b7b78:	7923      	ldrb	r3, [r4, #4]
   b7b7a:	07df      	lsls	r7, r3, #31
   b7b7c:	d50e      	bpl.n	b7b9c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b7b7e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b7b80:	212f      	movs	r1, #47	; 0x2f
   b7b82:	4630      	mov	r0, r6
   b7b84:	f001 fa51 	bl	b902a <strrchr>
    if (s1) {
   b7b88:	b100      	cbz	r0, b7b8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b7b8a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b7b8c:	4931      	ldr	r1, [pc, #196]	; (b7c54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b7b8e:	2201      	movs	r2, #1
   b7b90:	a801      	add	r0, sp, #4
   b7b92:	f001 f815 	bl	b8bc0 <_ZN5spark10JSONWriter4nameEPKcj>
   b7b96:	4631      	mov	r1, r6
   b7b98:	f7ff f912 	bl	b6dc0 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b7b9c:	7923      	ldrb	r3, [r4, #4]
   b7b9e:	079e      	lsls	r6, r3, #30
   b7ba0:	d507      	bpl.n	b7bb2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b7ba2:	492d      	ldr	r1, [pc, #180]	; (b7c58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b7ba4:	2202      	movs	r2, #2
   b7ba6:	a801      	add	r0, sp, #4
   b7ba8:	f001 f80a 	bl	b8bc0 <_ZN5spark10JSONWriter4nameEPKcj>
   b7bac:	68e1      	ldr	r1, [r4, #12]
   b7bae:	f000 ff85 	bl	b8abc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b7bb2:	7923      	ldrb	r3, [r4, #4]
   b7bb4:	0758      	lsls	r0, r3, #29
   b7bb6:	d514      	bpl.n	b7be2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b7bb8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b7bba:	4633      	mov	r3, r6
   b7bbc:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b7bbe:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7bc2:	b12a      	cbz	r2, b7bd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b7bc4:	2a20      	cmp	r2, #32
   b7bc6:	d101      	bne.n	b7bcc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b7bc8:	461e      	mov	r6, r3
   b7bca:	e7f7      	b.n	b7bbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b7bcc:	2a28      	cmp	r2, #40	; 0x28
   b7bce:	d1f5      	bne.n	b7bbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b7bd0:	4922      	ldr	r1, [pc, #136]	; (b7c5c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b7bd2:	2202      	movs	r2, #2
   b7bd4:	a801      	add	r0, sp, #4
   b7bd6:	f000 fff3 	bl	b8bc0 <_ZN5spark10JSONWriter4nameEPKcj>
   b7bda:	1bba      	subs	r2, r7, r6
   b7bdc:	4631      	mov	r1, r6
   b7bde:	f000 ffff 	bl	b8be0 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b7be2:	7923      	ldrb	r3, [r4, #4]
   b7be4:	0719      	lsls	r1, r3, #28
   b7be6:	d507      	bpl.n	b7bf8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b7be8:	491d      	ldr	r1, [pc, #116]	; (b7c60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b7bea:	2201      	movs	r2, #1
   b7bec:	a801      	add	r0, sp, #4
   b7bee:	f000 ffe7 	bl	b8bc0 <_ZN5spark10JSONWriter4nameEPKcj>
   b7bf2:	6961      	ldr	r1, [r4, #20]
   b7bf4:	f000 ff74 	bl	b8ae0 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b7bf8:	7923      	ldrb	r3, [r4, #4]
   b7bfa:	06da      	lsls	r2, r3, #27
   b7bfc:	d508      	bpl.n	b7c10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b7bfe:	2204      	movs	r2, #4
   b7c00:	4918      	ldr	r1, [pc, #96]	; (b7c64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b7c02:	eb0d 0002 	add.w	r0, sp, r2
   b7c06:	f000 ffdb 	bl	b8bc0 <_ZN5spark10JSONWriter4nameEPKcj>
   b7c0a:	69a1      	ldr	r1, [r4, #24]
   b7c0c:	f000 ff56 	bl	b8abc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b7c10:	7923      	ldrb	r3, [r4, #4]
   b7c12:	069b      	lsls	r3, r3, #26
   b7c14:	d507      	bpl.n	b7c26 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b7c16:	4914      	ldr	r1, [pc, #80]	; (b7c68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b7c18:	2206      	movs	r2, #6
   b7c1a:	a801      	add	r0, sp, #4
   b7c1c:	f000 ffd0 	bl	b8bc0 <_ZN5spark10JSONWriter4nameEPKcj>
   b7c20:	69e1      	ldr	r1, [r4, #28]
   b7c22:	f7ff f8cd 	bl	b6dc0 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b7c26:	a801      	add	r0, sp, #4
   b7c28:	f000 ff25 	bl	b8a76 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b7c2c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b7c2e:	490f      	ldr	r1, [pc, #60]	; (b7c6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b7c30:	6803      	ldr	r3, [r0, #0]
   b7c32:	2202      	movs	r2, #2
   b7c34:	68db      	ldr	r3, [r3, #12]
   b7c36:	4798      	blx	r3
}
   b7c38:	b005      	add	sp, #20
   b7c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7c3e:	bf00      	nop
   b7c40:	2003e738 	.word	0x2003e738
   b7c44:	000b94e0 	.word	0x000b94e0
   b7c48:	000b946e 	.word	0x000b946e
   b7c4c:	000b92d3 	.word	0x000b92d3
   b7c50:	000b9867 	.word	0x000b9867
   b7c54:	000b94bf 	.word	0x000b94bf
   b7c58:	000b94c1 	.word	0x000b94c1
   b7c5c:	000b94c4 	.word	0x000b94c4
   b7c60:	000b94c7 	.word	0x000b94c7
   b7c64:	000b94c9 	.word	0x000b94c9
   b7c68:	000b94ce 	.word	0x000b94ce
   b7c6c:	000b94bc 	.word	0x000b94bc

000b7c70 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7c70:	4b02      	ldr	r3, [pc, #8]	; (b7c7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7c72:	681a      	ldr	r2, [r3, #0]
   b7c74:	4b02      	ldr	r3, [pc, #8]	; (b7c80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7c76:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7c78:	4770      	bx	lr
   b7c7a:	bf00      	nop
   b7c7c:	2003e580 	.word	0x2003e580
   b7c80:	2003e6fc 	.word	0x2003e6fc

000b7c84 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b7c84:	b510      	push	{r4, lr}
   b7c86:	4b04      	ldr	r3, [pc, #16]	; (b7c98 <_ZN9TCPClientD1Ev+0x14>)
   b7c88:	6003      	str	r3, [r0, #0]
   b7c8a:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b7c8c:	6980      	ldr	r0, [r0, #24]
   b7c8e:	b108      	cbz	r0, b7c94 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b7c90:	f7fd fc92 	bl	b55b8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b7c94:	4620      	mov	r0, r4
   b7c96:	bd10      	pop	{r4, pc}
   b7c98:	000b961c 	.word	0x000b961c

000b7c9c <_ZN9TCPClientD0Ev>:
   b7c9c:	b510      	push	{r4, lr}
   b7c9e:	4604      	mov	r4, r0
   b7ca0:	f7ff fff0 	bl	b7c84 <_ZN9TCPClientD1Ev>
   b7ca4:	4620      	mov	r0, r4
   b7ca6:	211c      	movs	r1, #28
   b7ca8:	f7fc fa0b 	bl	b40c2 <_ZdlPvj>
   b7cac:	4620      	mov	r0, r4
   b7cae:	bd10      	pop	{r4, pc}

000b7cb0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7cb0:	4b01      	ldr	r3, [pc, #4]	; (b7cb8 <_GLOBAL__sub_I_RGB+0x8>)
   b7cb2:	2200      	movs	r2, #0
   b7cb4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7cb6:	4770      	bx	lr
   b7cb8:	2003e700 	.word	0x2003e700

000b7cbc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7cbc:	4b01      	ldr	r3, [pc, #4]	; (b7cc4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7cbe:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7cc0:	4770      	bx	lr
   b7cc2:	bf00      	nop
   b7cc4:	2003e584 	.word	0x2003e584

000b7cc8 <serialEventRun>:
{
   b7cc8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7cca:	4b0b      	ldr	r3, [pc, #44]	; (b7cf8 <serialEventRun+0x30>)
   b7ccc:	b143      	cbz	r3, b7ce0 <serialEventRun+0x18>
   b7cce:	f000 f981 	bl	b7fd4 <_Z16_fetch_usbserialv>
   b7cd2:	6803      	ldr	r3, [r0, #0]
   b7cd4:	691b      	ldr	r3, [r3, #16]
   b7cd6:	4798      	blx	r3
   b7cd8:	2800      	cmp	r0, #0
   b7cda:	dd01      	ble.n	b7ce0 <serialEventRun+0x18>
        serialEvent();
   b7cdc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7ce0:	4b06      	ldr	r3, [pc, #24]	; (b7cfc <serialEventRun+0x34>)
   b7ce2:	b143      	cbz	r3, b7cf6 <serialEventRun+0x2e>
   b7ce4:	f000 ffa8 	bl	b8c38 <_Z22__fetch_global_Serial1v>
   b7ce8:	6803      	ldr	r3, [r0, #0]
   b7cea:	691b      	ldr	r3, [r3, #16]
   b7cec:	4798      	blx	r3
   b7cee:	2800      	cmp	r0, #0
   b7cf0:	dd01      	ble.n	b7cf6 <serialEventRun+0x2e>
        serialEvent1();
   b7cf2:	f3af 8000 	nop.w
}
   b7cf6:	bd08      	pop	{r3, pc}
	...

000b7d00 <_post_loop>:
{
   b7d00:	b508      	push	{r3, lr}
	serialEventRun();
   b7d02:	f7ff ffe1 	bl	b7cc8 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7d06:	f7fc ffef 	bl	b4ce8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7d0a:	4b01      	ldr	r3, [pc, #4]	; (b7d10 <_post_loop+0x10>)
   b7d0c:	6018      	str	r0, [r3, #0]
}
   b7d0e:	bd08      	pop	{r3, pc}
   b7d10:	2003e758 	.word	0x2003e758

000b7d14 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7d14:	4805      	ldr	r0, [pc, #20]	; (b7d2c <_Z33system_initialize_user_backup_ramv+0x18>)
   b7d16:	4a06      	ldr	r2, [pc, #24]	; (b7d30 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7d18:	4906      	ldr	r1, [pc, #24]	; (b7d34 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7d1a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7d1c:	1a12      	subs	r2, r2, r0
   b7d1e:	f001 f8e7 	bl	b8ef0 <memcpy>
    __backup_sram_signature = signature;
   b7d22:	4b05      	ldr	r3, [pc, #20]	; (b7d38 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7d24:	4a05      	ldr	r2, [pc, #20]	; (b7d3c <_Z33system_initialize_user_backup_ramv+0x28>)
   b7d26:	601a      	str	r2, [r3, #0]
}
   b7d28:	bd08      	pop	{r3, pc}
   b7d2a:	bf00      	nop
   b7d2c:	2003f400 	.word	0x2003f400
   b7d30:	2003f404 	.word	0x2003f404
   b7d34:	000b9a28 	.word	0x000b9a28
   b7d38:	2003f400 	.word	0x2003f400
   b7d3c:	9a271c1e 	.word	0x9a271c1e

000b7d40 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7d40:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7d42:	2300      	movs	r3, #0
   b7d44:	9300      	str	r3, [sp, #0]
   b7d46:	461a      	mov	r2, r3
   b7d48:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7d4c:	f7fd f95c 	bl	b5008 <system_ctrl_set_result>
}
   b7d50:	b003      	add	sp, #12
   b7d52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7d58 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7d58:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7d5a:	8843      	ldrh	r3, [r0, #2]
   b7d5c:	2b0a      	cmp	r3, #10
   b7d5e:	d008      	beq.n	b7d72 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7d60:	2b50      	cmp	r3, #80	; 0x50
   b7d62:	d10b      	bne.n	b7d7c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7d64:	4b09      	ldr	r3, [pc, #36]	; (b7d8c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7d66:	681b      	ldr	r3, [r3, #0]
   b7d68:	b14b      	cbz	r3, b7d7e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7d6a:	b003      	add	sp, #12
   b7d6c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7d70:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7d72:	f7ff ffe5 	bl	b7d40 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7d76:	b003      	add	sp, #12
   b7d78:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7d7c:	2300      	movs	r3, #0
   b7d7e:	9300      	str	r3, [sp, #0]
   b7d80:	461a      	mov	r2, r3
   b7d82:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7d86:	f7fd f93f 	bl	b5008 <system_ctrl_set_result>
}
   b7d8a:	e7f4      	b.n	b7d76 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7d8c:	2003e714 	.word	0x2003e714

000b7d90 <module_user_init_hook>:
{
   b7d90:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7d92:	4812      	ldr	r0, [pc, #72]	; (b7ddc <module_user_init_hook+0x4c>)
   b7d94:	2100      	movs	r1, #0
   b7d96:	f7fd f9e9 	bl	b516c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7d9a:	4b11      	ldr	r3, [pc, #68]	; (b7de0 <module_user_init_hook+0x50>)
   b7d9c:	681a      	ldr	r2, [r3, #0]
   b7d9e:	4b11      	ldr	r3, [pc, #68]	; (b7de4 <module_user_init_hook+0x54>)
   b7da0:	429a      	cmp	r2, r3
   b7da2:	4b11      	ldr	r3, [pc, #68]	; (b7de8 <module_user_init_hook+0x58>)
   b7da4:	bf0c      	ite	eq
   b7da6:	2201      	moveq	r2, #1
   b7da8:	2200      	movne	r2, #0
   b7daa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7dac:	d001      	beq.n	b7db2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7dae:	f7ff ffb1 	bl	b7d14 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7db2:	f7fc ff89 	bl	b4cc8 <HAL_RNG_GetRandomNumber>
   b7db6:	4604      	mov	r4, r0
    srand(seed);
   b7db8:	f001 f8ca 	bl	b8f50 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7dbc:	4b0b      	ldr	r3, [pc, #44]	; (b7dec <module_user_init_hook+0x5c>)
   b7dbe:	b113      	cbz	r3, b7dc6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7dc0:	4620      	mov	r0, r4
   b7dc2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7dc6:	2100      	movs	r1, #0
   b7dc8:	4808      	ldr	r0, [pc, #32]	; (b7dec <module_user_init_hook+0x5c>)
   b7dca:	f7fd f98f 	bl	b50ec <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7dd2:	4807      	ldr	r0, [pc, #28]	; (b7df0 <module_user_init_hook+0x60>)
   b7dd4:	2100      	movs	r1, #0
   b7dd6:	f7fd b90d 	b.w	b4ff4 <system_ctrl_set_app_request_handler>
   b7dda:	bf00      	nop
   b7ddc:	000b7cbd 	.word	0x000b7cbd
   b7de0:	2003f400 	.word	0x2003f400
   b7de4:	9a271c1e 	.word	0x9a271c1e
   b7de8:	2003e710 	.word	0x2003e710
   b7dec:	00000000 	.word	0x00000000
   b7df0:	000b7d59 	.word	0x000b7d59

000b7df4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7df4:	4770      	bx	lr

000b7df6 <_ZN9IPAddressD0Ev>:
   b7df6:	b510      	push	{r4, lr}
   b7df8:	2118      	movs	r1, #24
   b7dfa:	4604      	mov	r4, r0
   b7dfc:	f7fc f961 	bl	b40c2 <_ZdlPvj>
   b7e00:	4620      	mov	r0, r4
   b7e02:	bd10      	pop	{r4, pc}

000b7e04 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7e04:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7e06:	7d03      	ldrb	r3, [r0, #20]
   b7e08:	2b06      	cmp	r3, #6
{
   b7e0a:	b08d      	sub	sp, #52	; 0x34
   b7e0c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7e0e:	f100 0704 	add.w	r7, r0, #4
   b7e12:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7e16:	d012      	beq.n	b7e3e <_ZNK9IPAddress7printToER5Print+0x3a>
   b7e18:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7e1c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7e20:	220a      	movs	r2, #10
   b7e22:	4630      	mov	r0, r6
   b7e24:	f7fe ff4d 	bl	b6cc2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7e28:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7e2a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7e2c:	d019      	beq.n	b7e62 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7e2e:	2c00      	cmp	r4, #0
   b7e30:	d0f4      	beq.n	b7e1c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b7e32:	212e      	movs	r1, #46	; 0x2e
   b7e34:	4630      	mov	r0, r6
   b7e36:	f7fe ff41 	bl	b6cbc <_ZN5Print5printEc>
   b7e3a:	4404      	add	r4, r0
   b7e3c:	e7ee      	b.n	b7e1c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7e3e:	232f      	movs	r3, #47	; 0x2f
   b7e40:	466a      	mov	r2, sp
   b7e42:	4639      	mov	r1, r7
   b7e44:	200a      	movs	r0, #10
		buf[0] = 0;
   b7e46:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7e4a:	f7fc ffcb 	bl	b4de4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7e4e:	4668      	mov	r0, sp
   b7e50:	f7fc f8ee 	bl	b4030 <strlen>
   b7e54:	6833      	ldr	r3, [r6, #0]
   b7e56:	4602      	mov	r2, r0
   b7e58:	68db      	ldr	r3, [r3, #12]
   b7e5a:	4669      	mov	r1, sp
   b7e5c:	4630      	mov	r0, r6
   b7e5e:	4798      	blx	r3
   b7e60:	4604      	mov	r4, r0
    }
    return n;
}
   b7e62:	4620      	mov	r0, r4
   b7e64:	b00d      	add	sp, #52	; 0x34
   b7e66:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7e68 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7e68:	b510      	push	{r4, lr}
   b7e6a:	4b05      	ldr	r3, [pc, #20]	; (b7e80 <_ZN9IPAddressC1Ev+0x18>)
   b7e6c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b7e6e:	2211      	movs	r2, #17
   b7e70:	f840 3b04 	str.w	r3, [r0], #4
   b7e74:	2100      	movs	r1, #0
   b7e76:	f001 f863 	bl	b8f40 <memset>
}
   b7e7a:	4620      	mov	r0, r4
   b7e7c:	bd10      	pop	{r4, pc}
   b7e7e:	bf00      	nop
   b7e80:	000b9574 	.word	0x000b9574

000b7e84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7e84:	4603      	mov	r3, r0
   b7e86:	4a07      	ldr	r2, [pc, #28]	; (b7ea4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7e88:	b510      	push	{r4, lr}
   b7e8a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b7e8e:	f101 0210 	add.w	r2, r1, #16
   b7e92:	f851 4b04 	ldr.w	r4, [r1], #4
   b7e96:	f843 4b04 	str.w	r4, [r3], #4
   b7e9a:	4291      	cmp	r1, r2
   b7e9c:	d1f9      	bne.n	b7e92 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7e9e:	780a      	ldrb	r2, [r1, #0]
   b7ea0:	701a      	strb	r2, [r3, #0]
}
   b7ea2:	bd10      	pop	{r4, pc}
   b7ea4:	000b9574 	.word	0x000b9574

000b7ea8 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b7ea8:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b7eaa:	2b04      	cmp	r3, #4
   b7eac:	d104      	bne.n	b7eb8 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b7eae:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7eb0:	3800      	subs	r0, #0
   b7eb2:	bf18      	it	ne
   b7eb4:	2001      	movne	r0, #1
   b7eb6:	4770      	bx	lr
    } else if (version() == 6) {
   b7eb8:	2b06      	cmp	r3, #6
   b7eba:	d107      	bne.n	b7ecc <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7ebc:	6843      	ldr	r3, [r0, #4]
   b7ebe:	b93b      	cbnz	r3, b7ed0 <_ZNK9IPAddresscvbEv+0x28>
   b7ec0:	6883      	ldr	r3, [r0, #8]
   b7ec2:	b92b      	cbnz	r3, b7ed0 <_ZNK9IPAddresscvbEv+0x28>
   b7ec4:	68c3      	ldr	r3, [r0, #12]
   b7ec6:	b91b      	cbnz	r3, b7ed0 <_ZNK9IPAddresscvbEv+0x28>
   b7ec8:	6900      	ldr	r0, [r0, #16]
   b7eca:	e7f1      	b.n	b7eb0 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b7ecc:	2000      	movs	r0, #0
   b7ece:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7ed0:	2001      	movs	r0, #1
}
   b7ed2:	4770      	bx	lr

000b7ed4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7ed4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7ed6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7eda:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7ede:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7ee2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7ee6:	2304      	movs	r3, #4
   b7ee8:	6041      	str	r1, [r0, #4]
   b7eea:	7503      	strb	r3, [r0, #20]
}
   b7eec:	bd10      	pop	{r4, pc}
	...

000b7ef0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7ef0:	b507      	push	{r0, r1, r2, lr}
   b7ef2:	4b06      	ldr	r3, [pc, #24]	; (b7f0c <_ZN9IPAddressC1EPKh+0x1c>)
   b7ef4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7ef6:	78cb      	ldrb	r3, [r1, #3]
   b7ef8:	9300      	str	r3, [sp, #0]
   b7efa:	788b      	ldrb	r3, [r1, #2]
   b7efc:	784a      	ldrb	r2, [r1, #1]
   b7efe:	7809      	ldrb	r1, [r1, #0]
   b7f00:	f7ff ffe8 	bl	b7ed4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7f04:	b003      	add	sp, #12
   b7f06:	f85d fb04 	ldr.w	pc, [sp], #4
   b7f0a:	bf00      	nop
   b7f0c:	000b9574 	.word	0x000b9574

000b7f10 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7f10:	7441      	strb	r1, [r0, #17]
}
   b7f12:	4770      	bx	lr

000b7f14 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7f14:	4770      	bx	lr

000b7f16 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7f16:	4770      	bx	lr

000b7f18 <_ZN9USBSerial4readEv>:
{
   b7f18:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7f1a:	2100      	movs	r1, #0
   b7f1c:	7c00      	ldrb	r0, [r0, #16]
   b7f1e:	f7fd f819 	bl	b4f54 <HAL_USB_USART_Receive_Data>
}
   b7f22:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7f26:	bd08      	pop	{r3, pc}

000b7f28 <_ZN9USBSerial4peekEv>:
{
   b7f28:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7f2a:	2101      	movs	r1, #1
   b7f2c:	7c00      	ldrb	r0, [r0, #16]
   b7f2e:	f7fd f811 	bl	b4f54 <HAL_USB_USART_Receive_Data>
}
   b7f32:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7f36:	bd08      	pop	{r3, pc}

000b7f38 <_ZN9USBSerial17availableForWriteEv>:
{
   b7f38:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7f3a:	7c00      	ldrb	r0, [r0, #16]
   b7f3c:	f7fd f802 	bl	b4f44 <HAL_USB_USART_Available_Data_For_Write>
}
   b7f40:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7f44:	bd08      	pop	{r3, pc}

000b7f46 <_ZN9USBSerial9availableEv>:
{
   b7f46:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7f48:	7c00      	ldrb	r0, [r0, #16]
   b7f4a:	f7fc fff3 	bl	b4f34 <HAL_USB_USART_Available_Data>
}
   b7f4e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7f52:	bd08      	pop	{r3, pc}

000b7f54 <_ZN9USBSerial5writeEh>:
{
   b7f54:	b513      	push	{r0, r1, r4, lr}
   b7f56:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7f58:	7c00      	ldrb	r0, [r0, #16]
{
   b7f5a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7f5c:	f7fc fff2 	bl	b4f44 <HAL_USB_USART_Available_Data_For_Write>
   b7f60:	2800      	cmp	r0, #0
   b7f62:	9901      	ldr	r1, [sp, #4]
   b7f64:	dc01      	bgt.n	b7f6a <_ZN9USBSerial5writeEh+0x16>
   b7f66:	7c60      	ldrb	r0, [r4, #17]
   b7f68:	b120      	cbz	r0, b7f74 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7f6a:	7c20      	ldrb	r0, [r4, #16]
   b7f6c:	f7fc fffa 	bl	b4f64 <HAL_USB_USART_Send_Data>
   b7f70:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7f74:	b002      	add	sp, #8
   b7f76:	bd10      	pop	{r4, pc}

000b7f78 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7f78:	7c00      	ldrb	r0, [r0, #16]
   b7f7a:	f7fc bffb 	b.w	b4f74 <HAL_USB_USART_Flush_Data>

000b7f7e <_ZN9USBSerialD0Ev>:
   b7f7e:	b510      	push	{r4, lr}
   b7f80:	2114      	movs	r1, #20
   b7f82:	4604      	mov	r4, r0
   b7f84:	f7fc f89d 	bl	b40c2 <_ZdlPvj>
   b7f88:	4620      	mov	r0, r4
   b7f8a:	bd10      	pop	{r4, pc}

000b7f8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7f8c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7f92:	4604      	mov	r4, r0
   b7f94:	4608      	mov	r0, r1
   b7f96:	2100      	movs	r1, #0
   b7f98:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7f9c:	4b04      	ldr	r3, [pc, #16]	; (b7fb0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7f9e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7fa0:	2301      	movs	r3, #1
  _serial = serial;
   b7fa2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7fa4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7fa6:	4611      	mov	r1, r2
   b7fa8:	f7fc ffac 	bl	b4f04 <HAL_USB_USART_Init>
}
   b7fac:	4620      	mov	r0, r4
   b7fae:	bd10      	pop	{r4, pc}
   b7fb0:	000b9588 	.word	0x000b9588

000b7fb4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7fb4:	7c00      	ldrb	r0, [r0, #16]
   b7fb6:	2200      	movs	r2, #0
   b7fb8:	f7fc bfac 	b.w	b4f14 <HAL_USB_USART_Begin>

000b7fbc <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b7fbc:	7c00      	ldrb	r0, [r0, #16]
   b7fbe:	f7fc bfb1 	b.w	b4f24 <HAL_USB_USART_End>

000b7fc2 <_Z19acquireSerialBufferv>:
{
   b7fc2:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7fc4:	2214      	movs	r2, #20
{
   b7fc6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7fc8:	2100      	movs	r1, #0
   b7fca:	f000 ffb9 	bl	b8f40 <memset>
}
   b7fce:	4620      	mov	r0, r4
   b7fd0:	bd10      	pop	{r4, pc}
	...

000b7fd4 <_Z16_fetch_usbserialv>:
{
   b7fd4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7fd6:	4c0f      	ldr	r4, [pc, #60]	; (b8014 <_Z16_fetch_usbserialv+0x40>)
{
   b7fd8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7fda:	a803      	add	r0, sp, #12
   b7fdc:	f7ff fff1 	bl	b7fc2 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7fe0:	7821      	ldrb	r1, [r4, #0]
   b7fe2:	f3bf 8f5b 	dmb	ish
   b7fe6:	f011 0101 	ands.w	r1, r1, #1
   b7fea:	d10f      	bne.n	b800c <_Z16_fetch_usbserialv+0x38>
   b7fec:	4620      	mov	r0, r4
   b7fee:	9101      	str	r1, [sp, #4]
   b7ff0:	f7fc f876 	bl	b40e0 <__cxa_guard_acquire>
   b7ff4:	9901      	ldr	r1, [sp, #4]
   b7ff6:	b148      	cbz	r0, b800c <_Z16_fetch_usbserialv+0x38>
   b7ff8:	aa03      	add	r2, sp, #12
   b7ffa:	4807      	ldr	r0, [pc, #28]	; (b8018 <_Z16_fetch_usbserialv+0x44>)
   b7ffc:	f7ff ffc6 	bl	b7f8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8000:	4620      	mov	r0, r4
   b8002:	f7fc f872 	bl	b40ea <__cxa_guard_release>
   b8006:	4805      	ldr	r0, [pc, #20]	; (b801c <_Z16_fetch_usbserialv+0x48>)
   b8008:	f000 ff54 	bl	b8eb4 <atexit>
	return _usbserial;
}
   b800c:	4802      	ldr	r0, [pc, #8]	; (b8018 <_Z16_fetch_usbserialv+0x44>)
   b800e:	b008      	add	sp, #32
   b8010:	bd10      	pop	{r4, pc}
   b8012:	bf00      	nop
   b8014:	2003e718 	.word	0x2003e718
   b8018:	2003e71c 	.word	0x2003e71c
   b801c:	000b7f15 	.word	0x000b7f15

000b8020 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b8020:	4770      	bx	lr

000b8022 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8022:	7441      	strb	r1, [r0, #17]
}
   b8024:	4770      	bx	lr

000b8026 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8026:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8028:	7c00      	ldrb	r0, [r0, #16]
   b802a:	f7fc ff23 	bl	b4e74 <hal_usart_available_data_for_write>
}
   b802e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8032:	bd08      	pop	{r3, pc}

000b8034 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8034:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8036:	7c00      	ldrb	r0, [r0, #16]
   b8038:	f7fc fefc 	bl	b4e34 <hal_usart_available>
}
   b803c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8040:	bd08      	pop	{r3, pc}

000b8042 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b8042:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8044:	7c00      	ldrb	r0, [r0, #16]
   b8046:	f7fc ff05 	bl	b4e54 <hal_usart_peek>
}
   b804a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b804e:	bd08      	pop	{r3, pc}

000b8050 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8050:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b8052:	7c00      	ldrb	r0, [r0, #16]
   b8054:	f7fc fef6 	bl	b4e44 <hal_usart_read>
}
   b8058:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b805c:	bd08      	pop	{r3, pc}

000b805e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b805e:	7c00      	ldrb	r0, [r0, #16]
   b8060:	f7fc bf00 	b.w	b4e64 <hal_usart_flush>

000b8064 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8064:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8066:	7c45      	ldrb	r5, [r0, #17]
{
   b8068:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b806a:	b12d      	cbz	r5, b8078 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b806c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b806e:	b003      	add	sp, #12
   b8070:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8074:	f7fc bed6 	b.w	b4e24 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8078:	7c00      	ldrb	r0, [r0, #16]
   b807a:	9101      	str	r1, [sp, #4]
   b807c:	f7fc fefa 	bl	b4e74 <hal_usart_available_data_for_write>
   b8080:	2800      	cmp	r0, #0
   b8082:	9901      	ldr	r1, [sp, #4]
   b8084:	dcf2      	bgt.n	b806c <_ZN11USARTSerial5writeEh+0x8>
}
   b8086:	4628      	mov	r0, r5
   b8088:	b003      	add	sp, #12
   b808a:	bd30      	pop	{r4, r5, pc}

000b808c <_ZN11USARTSerialD0Ev>:
   b808c:	b510      	push	{r4, lr}
   b808e:	2114      	movs	r1, #20
   b8090:	4604      	mov	r4, r0
   b8092:	f7fc f816 	bl	b40c2 <_ZdlPvj>
   b8096:	4620      	mov	r0, r4
   b8098:	bd10      	pop	{r4, pc}
	...

000b809c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b809c:	b510      	push	{r4, lr}
   b809e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b80a2:	4604      	mov	r4, r0
   b80a4:	4608      	mov	r0, r1
   b80a6:	4611      	mov	r1, r2
   b80a8:	2200      	movs	r2, #0
   b80aa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b80ae:	4b04      	ldr	r3, [pc, #16]	; (b80c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b80b0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b80b2:	2301      	movs	r3, #1
  _serial = serial;
   b80b4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b80b6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b80b8:	f7fc feec 	bl	b4e94 <hal_usart_init_ex>
}
   b80bc:	4620      	mov	r0, r4
   b80be:	bd10      	pop	{r4, pc}
   b80c0:	000b95b8 	.word	0x000b95b8

000b80c4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b80c4:	7c00      	ldrb	r0, [r0, #16]
   b80c6:	2300      	movs	r3, #0
   b80c8:	f7fc bedc 	b.w	b4e84 <hal_usart_begin_config>

000b80cc <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b80cc:	2200      	movs	r2, #0
   b80ce:	f7ff bff9 	b.w	b80c4 <_ZN11USARTSerial5beginEmm>

000b80d2 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b80d2:	7c00      	ldrb	r0, [r0, #16]
   b80d4:	f7fc be9e 	b.w	b4e14 <hal_usart_end>

000b80d8 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b80d8:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b80da:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b80dc:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b80e0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b80e2:	2201      	movs	r2, #1
   b80e4:	f04f 33ff 	mov.w	r3, #4294967295
   b80e8:	f10d 0107 	add.w	r1, sp, #7
   b80ec:	47a0      	blx	r4
}
   b80ee:	b002      	add	sp, #8
   b80f0:	bd10      	pop	{r4, pc}

000b80f2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b80f2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b80f4:	6803      	ldr	r3, [r0, #0]
   b80f6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b80f8:	f04f 33ff 	mov.w	r3, #4294967295
   b80fc:	46a4      	mov	ip, r4
}
   b80fe:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8102:	4760      	bx	ip

000b8104 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8104:	b513      	push	{r0, r1, r4, lr}
   b8106:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b8108:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b810a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b810e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b8110:	f10d 0107 	add.w	r1, sp, #7
   b8114:	2201      	movs	r2, #1
   b8116:	47a0      	blx	r4
}
   b8118:	b002      	add	sp, #8
   b811a:	bd10      	pop	{r4, pc}

000b811c <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b811c:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b811e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8120:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8124:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8128:	429a      	cmp	r2, r3
int TCPClient::read() {
   b812a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b812c:	d008      	beq.n	b8140 <_ZN9TCPClient4readEv+0x24>
   b812e:	6963      	ldr	r3, [r4, #20]
   b8130:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b8134:	1c51      	adds	r1, r2, #1
   b8136:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b813a:	4413      	add	r3, r2
   b813c:	7918      	ldrb	r0, [r3, #4]
}
   b813e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8140:	6803      	ldr	r3, [r0, #0]
   b8142:	691b      	ldr	r3, [r3, #16]
   b8144:	4798      	blx	r3
   b8146:	2800      	cmp	r0, #0
   b8148:	d1f1      	bne.n	b812e <_ZN9TCPClient4readEv+0x12>
   b814a:	f04f 30ff 	mov.w	r0, #4294967295
   b814e:	e7f6      	b.n	b813e <_ZN9TCPClient4readEv+0x22>

000b8150 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b8150:	4770      	bx	lr

000b8152 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b8152:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b8154:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b8156:	43c0      	mvns	r0, r0
   b8158:	0fc0      	lsrs	r0, r0, #31
   b815a:	4770      	bx	lr

000b815c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b815c:	4770      	bx	lr
	...

000b8160 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8160:	4b06      	ldr	r3, [pc, #24]	; (b817c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8162:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8164:	b510      	push	{r4, lr}
   b8166:	f100 040c 	add.w	r4, r0, #12
	    ||
   b816a:	d005      	beq.n	b8178 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b816c:	4608      	mov	r0, r1
   b816e:	f000 fd8f 	bl	b8c90 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8172:	2800      	cmp	r0, #0
   b8174:	bf08      	it	eq
   b8176:	2400      	moveq	r4, #0
      }
   b8178:	4620      	mov	r0, r4
   b817a:	bd10      	pop	{r4, pc}
   b817c:	000b945c 	.word	0x000b945c

000b8180 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8180:	b510      	push	{r4, lr}
   b8182:	21ac      	movs	r1, #172	; 0xac
   b8184:	4604      	mov	r4, r0
   b8186:	f7fb ff9c 	bl	b40c2 <_ZdlPvj>
   b818a:	4620      	mov	r0, r4
   b818c:	bd10      	pop	{r4, pc}

000b818e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b818e:	21ac      	movs	r1, #172	; 0xac
   b8190:	f7fb bf97 	b.w	b40c2 <_ZdlPvj>

000b8194 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b8194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b8198:	f04f 0800 	mov.w	r8, #0
   b819c:	b086      	sub	sp, #24
   b819e:	461c      	mov	r4, r3
   b81a0:	f8c0 8004 	str.w	r8, [r0, #4]
   b81a4:	4605      	mov	r5, r0
   b81a6:	460e      	mov	r6, r1
   b81a8:	4617      	mov	r7, r2
    struct timeval tv = {};
   b81aa:	4641      	mov	r1, r8
   b81ac:	2210      	movs	r2, #16
   b81ae:	a802      	add	r0, sp, #8
   b81b0:	f000 fec6 	bl	b8f40 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b81b4:	1c63      	adds	r3, r4, #1
   b81b6:	d009      	beq.n	b81cc <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b81b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b81bc:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b81c0:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b81c4:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b81c8:	435c      	muls	r4, r3
   b81ca:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b81cc:	6968      	ldr	r0, [r5, #20]
   b81ce:	2310      	movs	r3, #16
   b81d0:	9300      	str	r3, [sp, #0]
   b81d2:	6800      	ldr	r0, [r0, #0]
   b81d4:	ab02      	add	r3, sp, #8
   b81d6:	f241 0205 	movw	r2, #4101	; 0x1005
   b81da:	f640 71ff 	movw	r1, #4095	; 0xfff
   b81de:	f7fc fe61 	bl	b4ea4 <sock_setsockopt>
    if (ret < 0) {
   b81e2:	2800      	cmp	r0, #0
   b81e4:	da07      	bge.n	b81f6 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b81e6:	f7fc ffb1 	bl	b514c <__errno>
   b81ea:	6803      	ldr	r3, [r0, #0]
   b81ec:	606b      	str	r3, [r5, #4]
        return 0;
   b81ee:	2000      	movs	r0, #0
}
   b81f0:	b006      	add	sp, #24
   b81f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b81f6:	6968      	ldr	r0, [r5, #20]
   b81f8:	2300      	movs	r3, #0
   b81fa:	6800      	ldr	r0, [r0, #0]
   b81fc:	463a      	mov	r2, r7
   b81fe:	4631      	mov	r1, r6
   b8200:	f7fc fe70 	bl	b4ee4 <sock_send>
    if (ret < 0) {
   b8204:	1e03      	subs	r3, r0, #0
   b8206:	dbee      	blt.n	b81e6 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b8208:	4618      	mov	r0, r3
   b820a:	e7f1      	b.n	b81f0 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b820c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b820c:	b530      	push	{r4, r5, lr}
   b820e:	b087      	sub	sp, #28
   b8210:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b8212:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b8214:	4668      	mov	r0, sp
   b8216:	f7ff fe6b 	bl	b7ef0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b821a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b821c:	3404      	adds	r4, #4
   b821e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8220:	682b      	ldr	r3, [r5, #0]
   b8222:	7023      	strb	r3, [r4, #0]
    }
   b8224:	b007      	add	sp, #28
   b8226:	bd30      	pop	{r4, r5, pc}

000b8228 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b8228:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b822a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b822c:	4b05      	ldr	r3, [pc, #20]	; (b8244 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b822e:	4604      	mov	r4, r0
   b8230:	358c      	adds	r5, #140	; 0x8c
   b8232:	f844 3b04 	str.w	r3, [r4], #4
   b8236:	4606      	mov	r6, r0
   b8238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b823a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b823c:	682b      	ldr	r3, [r5, #0]
   b823e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b8240:	4630      	mov	r0, r6
   b8242:	bd70      	pop	{r4, r5, r6, pc}
   b8244:	000b9574 	.word	0x000b9574

000b8248 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b824c:	4698      	mov	r8, r3
    stop();
   b824e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8250:	b093      	sub	sp, #76	; 0x4c
   b8252:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b8254:	2400      	movs	r4, #0
    stop();
   b8256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8258:	4606      	mov	r6, r0
   b825a:	4617      	mov	r7, r2
    stop();
   b825c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b825e:	4628      	mov	r0, r5
   b8260:	466b      	mov	r3, sp
   b8262:	4622      	mov	r2, r4
   b8264:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b8266:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8268:	f7fc fd1e 	bl	b4ca8 <netdb_getaddrinfo>
   b826c:	4605      	mov	r5, r0
   b826e:	2800      	cmp	r0, #0
   b8270:	d163      	bne.n	b833a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b8272:	9b00      	ldr	r3, [sp, #0]
   b8274:	2b00      	cmp	r3, #0
   b8276:	d04b      	beq.n	b8310 <_ZN9TCPClient7connectEPKctm+0xc8>
   b8278:	695b      	ldr	r3, [r3, #20]
   b827a:	2b00      	cmp	r3, #0
   b827c:	d048      	beq.n	b8310 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b827e:	a806      	add	r0, sp, #24
   b8280:	f7ff fdf2 	bl	b7e68 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b8284:	9b00      	ldr	r3, [sp, #0]
   b8286:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b8288:	7863      	ldrb	r3, [r4, #1]
   b828a:	2b02      	cmp	r3, #2
   b828c:	d104      	bne.n	b8298 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b828e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b8290:	a806      	add	r0, sp, #24
   b8292:	f7ff ffbb 	bl	b820c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b8296:	e026      	b.n	b82e6 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b8298:	2b0a      	cmp	r3, #10
   b829a:	d124      	bne.n	b82e6 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b829c:	2211      	movs	r2, #17
   b829e:	4629      	mov	r1, r5
   b82a0:	a801      	add	r0, sp, #4
   b82a2:	f000 fe4d 	bl	b8f40 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b82a6:	68a3      	ldr	r3, [r4, #8]
   b82a8:	2b00      	cmp	r3, #0
   b82aa:	d038      	beq.n	b831e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b82ac:	f104 0308 	add.w	r3, r4, #8
   b82b0:	f10d 0c04 	add.w	ip, sp, #4
   b82b4:	3418      	adds	r4, #24
   b82b6:	6818      	ldr	r0, [r3, #0]
   b82b8:	6859      	ldr	r1, [r3, #4]
   b82ba:	4662      	mov	r2, ip
   b82bc:	c203      	stmia	r2!, {r0, r1}
   b82be:	3308      	adds	r3, #8
   b82c0:	42a3      	cmp	r3, r4
   b82c2:	4694      	mov	ip, r2
   b82c4:	d1f7      	bne.n	b82b6 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b82c6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b82c8:	a901      	add	r1, sp, #4
   b82ca:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b82cc:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b82d0:	f7ff fdd8 	bl	b7e84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b82d4:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b82d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b82dc:	ac07      	add	r4, sp, #28
   b82de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b82e0:	f8dc 3000 	ldr.w	r3, [ip]
   b82e4:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b82e6:	a806      	add	r0, sp, #24
   b82e8:	f7ff fdde 	bl	b7ea8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b82ec:	b180      	cbz	r0, b8310 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b82ee:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b82f0:	ad07      	add	r5, sp, #28
   b82f2:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b82f6:	4b12      	ldr	r3, [pc, #72]	; (b8340 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b82f8:	930c      	str	r3, [sp, #48]	; 0x30
   b82fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b82fc:	ac0d      	add	r4, sp, #52	; 0x34
   b82fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8300:	682b      	ldr	r3, [r5, #0]
   b8302:	7023      	strb	r3, [r4, #0]
   b8304:	463a      	mov	r2, r7
   b8306:	4643      	mov	r3, r8
   b8308:	a90c      	add	r1, sp, #48	; 0x30
   b830a:	4630      	mov	r0, r6
   b830c:	47c8      	blx	r9
   b830e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b8310:	9800      	ldr	r0, [sp, #0]
   b8312:	f7fc fcc1 	bl	b4c98 <netdb_freeaddrinfo>
}
   b8316:	4628      	mov	r0, r5
   b8318:	b013      	add	sp, #76	; 0x4c
   b831a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b831e:	68e3      	ldr	r3, [r4, #12]
   b8320:	2b00      	cmp	r3, #0
   b8322:	d1c3      	bne.n	b82ac <_ZN9TCPClient7connectEPKctm+0x64>
   b8324:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b8328:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b832c:	f7fc fd62 	bl	b4df4 <inet_htonl>
   b8330:	4581      	cmp	r9, r0
   b8332:	d1bb      	bne.n	b82ac <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b8334:	f104 0114 	add.w	r1, r4, #20
   b8338:	e7aa      	b.n	b8290 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b833a:	4625      	mov	r5, r4
   b833c:	e7e8      	b.n	b8310 <_ZN9TCPClient7connectEPKctm+0xc8>
   b833e:	bf00      	nop
   b8340:	000b9574 	.word	0x000b9574

000b8344 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b8344:	b538      	push	{r3, r4, r5, lr}
   b8346:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b8348:	681a      	ldr	r2, [r3, #0]
   b834a:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b834c:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b834e:	da10      	bge.n	b8372 <_ZN9TCPClient9connectedEv+0x2e>
   b8350:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8354:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8358:	429a      	cmp	r2, r3
   b835a:	d10a      	bne.n	b8372 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b835c:	6803      	ldr	r3, [r0, #0]
   b835e:	691b      	ldr	r3, [r3, #16]
   b8360:	4798      	blx	r3
        if (!rv) {
   b8362:	4604      	mov	r4, r0
   b8364:	b928      	cbnz	r0, b8372 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b8366:	682b      	ldr	r3, [r5, #0]
   b8368:	4628      	mov	r0, r5
   b836a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b836c:	4798      	blx	r3
        rv = available();
   b836e:	4620      	mov	r0, r4
}
   b8370:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b8372:	2001      	movs	r0, #1
   b8374:	e7fc      	b.n	b8370 <_ZN9TCPClient9connectedEv+0x2c>

000b8376 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b8376:	b510      	push	{r4, lr}
   b8378:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b837a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b837e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8382:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b8384:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8386:	d005      	beq.n	b8394 <_ZN9TCPClient4peekEv+0x1e>
   b8388:	6963      	ldr	r3, [r4, #20]
   b838a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b838e:	4413      	add	r3, r2
   b8390:	7918      	ldrb	r0, [r3, #4]
}
   b8392:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b8394:	6803      	ldr	r3, [r0, #0]
   b8396:	691b      	ldr	r3, [r3, #16]
   b8398:	4798      	blx	r3
   b839a:	2800      	cmp	r0, #0
   b839c:	d1f4      	bne.n	b8388 <_ZN9TCPClient4peekEv+0x12>
   b839e:	f04f 30ff 	mov.w	r0, #4294967295
   b83a2:	e7f6      	b.n	b8392 <_ZN9TCPClient4peekEv+0x1c>

000b83a4 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b83a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b83a6:	6943      	ldr	r3, [r0, #20]
   b83a8:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b83aa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b83ae:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b83b2:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b83b4:	4605      	mov	r5, r0
   b83b6:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b83b8:	d016      	beq.n	b83e8 <_ZN9TCPClient4readEPhj+0x44>
   b83ba:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b83bc:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b83c0:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b83c4:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b83c6:	42bc      	cmp	r4, r7
   b83c8:	bf28      	it	cs
   b83ca:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b83cc:	3304      	adds	r3, #4
   b83ce:	4622      	mov	r2, r4
   b83d0:	4419      	add	r1, r3
   b83d2:	4630      	mov	r0, r6
   b83d4:	f000 fd8c 	bl	b8ef0 <memcpy>
   b83d8:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b83da:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b83de:	4423      	add	r3, r4
   b83e0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b83e4:	4620      	mov	r0, r4
   b83e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b83e8:	6803      	ldr	r3, [r0, #0]
   b83ea:	691b      	ldr	r3, [r3, #16]
   b83ec:	4798      	blx	r3
   b83ee:	2800      	cmp	r0, #0
   b83f0:	d1e3      	bne.n	b83ba <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b83f2:	f04f 34ff 	mov.w	r4, #4294967295
   b83f6:	e7f5      	b.n	b83e4 <_ZN9TCPClient4readEPhj+0x40>

000b83f8 <_ZN9TCPClient12flush_bufferEv>:
   b83f8:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b83fa:	2300      	movs	r3, #0
   b83fc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b8400:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b8402:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b8406:	4770      	bx	lr

000b8408 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b840c:	461f      	mov	r7, r3
    stop();
   b840e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8410:	460c      	mov	r4, r1
    stop();
   b8412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8414:	b08a      	sub	sp, #40	; 0x28
   b8416:	4605      	mov	r5, r0
   b8418:	4616      	mov	r6, r2
    stop();
   b841a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b841c:	7d23      	ldrb	r3, [r4, #20]
   b841e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b8422:	2b04      	cmp	r3, #4
   b8424:	bf0c      	ite	eq
   b8426:	2002      	moveq	r0, #2
   b8428:	200a      	movne	r0, #10
   b842a:	2206      	movs	r2, #6
   b842c:	2101      	movs	r1, #1
   b842e:	f7fc fd61 	bl	b4ef4 <sock_socket>
   b8432:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b8436:	696b      	ldr	r3, [r5, #20]
   b8438:	681b      	ldr	r3, [r3, #0]
   b843a:	2b00      	cmp	r3, #0
   b843c:	da08      	bge.n	b8450 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b843e:	682b      	ldr	r3, [r5, #0]
   b8440:	4628      	mov	r0, r5
   b8442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8444:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b8446:	4798      	blx	r3
}
   b8448:	4620      	mov	r0, r4
   b844a:	b00a      	add	sp, #40	; 0x28
   b844c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b8450:	4628      	mov	r0, r5
   b8452:	f7ff ffd1 	bl	b83f8 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b8456:	b1b7      	cbz	r7, b8486 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b8458:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b845a:	a903      	add	r1, sp, #12
   b845c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b845e:	9303      	str	r3, [sp, #12]
   b8460:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8464:	f7fc fc28 	bl	b4cb8 <if_index_to_name>
   b8468:	2800      	cmp	r0, #0
   b846a:	d1e8      	bne.n	b843e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b846c:	6968      	ldr	r0, [r5, #20]
   b846e:	2306      	movs	r3, #6
   b8470:	9300      	str	r3, [sp, #0]
   b8472:	6800      	ldr	r0, [r0, #0]
   b8474:	ab03      	add	r3, sp, #12
   b8476:	f241 020b 	movw	r2, #4107	; 0x100b
   b847a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b847e:	f7fc fd11 	bl	b4ea4 <sock_setsockopt>
   b8482:	2800      	cmp	r0, #0
   b8484:	d1db      	bne.n	b843e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b8486:	221c      	movs	r2, #28
   b8488:	2100      	movs	r1, #0
   b848a:	a803      	add	r0, sp, #12
   b848c:	f000 fd58 	bl	b8f40 <memset>
    if (ip.version() == 4) {
   b8490:	7d23      	ldrb	r3, [r4, #20]
   b8492:	2b04      	cmp	r3, #4
   b8494:	d11d      	bne.n	b84d2 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b8496:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b849a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b849c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b84a0:	f7fc fcb0 	bl	b4e04 <inet_htons>
   b84a4:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b84a8:	6860      	ldr	r0, [r4, #4]
   b84aa:	f7fc fca3 	bl	b4df4 <inet_htonl>
   b84ae:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b84b0:	696b      	ldr	r3, [r5, #20]
   b84b2:	221c      	movs	r2, #28
   b84b4:	6818      	ldr	r0, [r3, #0]
   b84b6:	a903      	add	r1, sp, #12
   b84b8:	f7fc fd04 	bl	b4ec4 <sock_connect>
   b84bc:	2800      	cmp	r0, #0
   b84be:	d1be      	bne.n	b843e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b84c0:	3404      	adds	r4, #4
   b84c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b84c4:	696d      	ldr	r5, [r5, #20]
   b84c6:	358c      	adds	r5, #140	; 0x8c
   b84c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b84ca:	6823      	ldr	r3, [r4, #0]
   b84cc:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b84ce:	2401      	movs	r4, #1
   b84d0:	e7ba      	b.n	b8448 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b84d2:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b84d6:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b84d8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b84dc:	f7fc fc92 	bl	b4e04 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b84e0:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b84e2:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b84e6:	1d23      	adds	r3, r4, #4
   b84e8:	f104 0714 	add.w	r7, r4, #20
   b84ec:	6818      	ldr	r0, [r3, #0]
   b84ee:	6859      	ldr	r1, [r3, #4]
   b84f0:	4632      	mov	r2, r6
   b84f2:	c203      	stmia	r2!, {r0, r1}
   b84f4:	3308      	adds	r3, #8
   b84f6:	42bb      	cmp	r3, r7
   b84f8:	4616      	mov	r6, r2
   b84fa:	d1f7      	bne.n	b84ec <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b84fc:	e7d8      	b.n	b84b0 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b8500 <_ZN9TCPClient9availableEv>:
{
   b8500:	b530      	push	{r4, r5, lr}
   b8502:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b8504:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b8508:	b08b      	sub	sp, #44	; 0x2c
   b850a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b850c:	b12b      	cbz	r3, b851a <_ZN9TCPClient9availableEv+0x1a>
   b850e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b8512:	429a      	cmp	r2, r3
   b8514:	d101      	bne.n	b851a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b8516:	f7ff ff6f 	bl	b83f8 <_ZN9TCPClient12flush_bufferEv>
   b851a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b851c:	6808      	ldr	r0, [r1, #0]
   b851e:	2800      	cmp	r0, #0
   b8520:	db18      	blt.n	b8554 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b8522:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b8526:	2d7f      	cmp	r5, #127	; 0x7f
   b8528:	d814      	bhi.n	b8554 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b852a:	3104      	adds	r1, #4
   b852c:	2308      	movs	r3, #8
   b852e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b8532:	4429      	add	r1, r5
   b8534:	f7fc fcce 	bl	b4ed4 <sock_recv>
            if (ret > 0) {
   b8538:	2800      	cmp	r0, #0
   b853a:	dd13      	ble.n	b8564 <_ZN9TCPClient9availableEv+0x64>
   b853c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b853e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8542:	b90a      	cbnz	r2, b8548 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b8544:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b8548:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b854a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b854e:	4410      	add	r0, r2
   b8550:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b8554:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b8556:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b855a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b855e:	1ac0      	subs	r0, r0, r3
   b8560:	b00b      	add	sp, #44	; 0x2c
   b8562:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b8564:	f7fc fdf2 	bl	b514c <__errno>
   b8568:	6803      	ldr	r3, [r0, #0]
   b856a:	2b0b      	cmp	r3, #11
   b856c:	d0f2      	beq.n	b8554 <_ZN9TCPClient9availableEv+0x54>
   b856e:	f7fc fded 	bl	b514c <__errno>
   b8572:	6803      	ldr	r3, [r0, #0]
   b8574:	2b0b      	cmp	r3, #11
   b8576:	d0ed      	beq.n	b8554 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b8578:	2320      	movs	r3, #32
   b857a:	2500      	movs	r5, #0
   b857c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b8580:	f7fc fde4 	bl	b514c <__errno>
   b8584:	6803      	ldr	r3, [r0, #0]
   b8586:	9301      	str	r3, [sp, #4]
   b8588:	4b08      	ldr	r3, [pc, #32]	; (b85ac <_ZN9TCPClient9availableEv+0xac>)
   b858a:	4909      	ldr	r1, [pc, #36]	; (b85b0 <_ZN9TCPClient9availableEv+0xb0>)
   b858c:	9300      	str	r3, [sp, #0]
   b858e:	aa02      	add	r2, sp, #8
   b8590:	462b      	mov	r3, r5
   b8592:	2032      	movs	r0, #50	; 0x32
   b8594:	f7fc fcfe 	bl	b4f94 <log_message>
                    sock_close(d_->sock);
   b8598:	6963      	ldr	r3, [r4, #20]
   b859a:	6818      	ldr	r0, [r3, #0]
   b859c:	f7fc fc8a 	bl	b4eb4 <sock_close>
   b85a0:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b85a2:	f04f 32ff 	mov.w	r2, #4294967295
   b85a6:	601a      	str	r2, [r3, #0]
   b85a8:	e7d4      	b.n	b8554 <_ZN9TCPClient9availableEv+0x54>
   b85aa:	bf00      	nop
   b85ac:	000b95e7 	.word	0x000b95e7
   b85b0:	000b95e0 	.word	0x000b95e0

000b85b4 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b85b4:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b85b6:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b85b8:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b85ba:	6818      	ldr	r0, [r3, #0]
   b85bc:	2800      	cmp	r0, #0
   b85be:	db01      	blt.n	b85c4 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b85c0:	f7fc fc78 	bl	b4eb4 <sock_close>
   b85c4:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b85c6:	f04f 32ff 	mov.w	r2, #4294967295
   b85ca:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b85cc:	6960      	ldr	r0, [r4, #20]
   b85ce:	2211      	movs	r2, #17
   b85d0:	2100      	movs	r1, #0
   b85d2:	308c      	adds	r0, #140	; 0x8c
   b85d4:	f000 fcb4 	bl	b8f40 <memset>
    flush_buffer();
   b85d8:	4620      	mov	r0, r4
}
   b85da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b85de:	f7ff bf0b 	b.w	b83f8 <_ZN9TCPClient12flush_bufferEv>

000b85e2 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b85e2:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b85e4:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b85e6:	4604      	mov	r4, r0
          total(0) {
   b85e8:	6001      	str	r1, [r0, #0]
   b85ea:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b85ee:	3088      	adds	r0, #136	; 0x88
   b85f0:	f7ff fc3a 	bl	b7e68 <_ZN9IPAddressC1Ev>
}
   b85f4:	4620      	mov	r0, r4
   b85f6:	bd10      	pop	{r4, pc}

000b85f8 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b85f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b85fa:	2300      	movs	r3, #0
   b85fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b8600:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b8604:	4a0e      	ldr	r2, [pc, #56]	; (b8640 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b8606:	6103      	str	r3, [r0, #16]
   b8608:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b860a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b860c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b860e:	20ac      	movs	r0, #172	; 0xac
   b8610:	9101      	str	r1, [sp, #4]
   b8612:	f7fb fd50 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b8616:	1e05      	subs	r5, r0, #0
   b8618:	f105 060c 	add.w	r6, r5, #12
   b861c:	d008      	beq.n	b8630 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b861e:	2301      	movs	r3, #1
   b8620:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b8624:	4b07      	ldr	r3, [pc, #28]	; (b8644 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b8626:	9901      	ldr	r1, [sp, #4]
   b8628:	602b      	str	r3, [r5, #0]
   b862a:	4630      	mov	r0, r6
   b862c:	f7ff ffd9 	bl	b85e2 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b8630:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b8632:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b8636:	f7ff fedf 	bl	b83f8 <_ZN9TCPClient12flush_bufferEv>
}
   b863a:	b002      	add	sp, #8
   b863c:	bd70      	pop	{r4, r5, r6, pc}
   b863e:	bf00      	nop
   b8640:	000b961c 	.word	0x000b961c
   b8644:	000b9600 	.word	0x000b9600

000b8648 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b8648:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b864a:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b864e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b8650:	f7ff ffd2 	bl	b85f8 <_ZN9TCPClientC1Ei>
}
   b8654:	4620      	mov	r0, r4
   b8656:	bd10      	pop	{r4, pc}

000b8658 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b8658:	b510      	push	{r4, lr}
   b865a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b865c:	6800      	ldr	r0, [r0, #0]
   b865e:	2800      	cmp	r0, #0
   b8660:	db01      	blt.n	b8666 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b8662:	f7fc fc27 	bl	b4eb4 <sock_close>
    }
}
   b8666:	4620      	mov	r0, r4
   b8668:	bd10      	pop	{r4, pc}

000b866a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b866a:	300c      	adds	r0, #12
   b866c:	f7ff bff4 	b.w	b8658 <_ZN9TCPClient4DataD1Ev>

000b8670 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b8670:	2200      	movs	r2, #0
   b8672:	6840      	ldr	r0, [r0, #4]
   b8674:	4611      	mov	r1, r2
   b8676:	f7fc bce9 	b.w	b504c <network_ready>

000b867a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b867a:	2200      	movs	r2, #0
   b867c:	6840      	ldr	r0, [r0, #4]
   b867e:	4611      	mov	r1, r2
   b8680:	f7fc bd04 	b.w	b508c <network_listening>

000b8684 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8684:	2200      	movs	r2, #0
   b8686:	6840      	ldr	r0, [r0, #4]
   b8688:	4611      	mov	r1, r2
   b868a:	f7fc bd0f 	b.w	b50ac <network_get_listen_timeout>

000b868e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b868e:	6840      	ldr	r0, [r0, #4]
   b8690:	2200      	movs	r2, #0
   b8692:	f7fc bd03 	b.w	b509c <network_set_listen_timeout>

000b8696 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8696:	6840      	ldr	r0, [r0, #4]
   b8698:	2200      	movs	r2, #0
   b869a:	f081 0101 	eor.w	r1, r1, #1
   b869e:	f7fc bced 	b.w	b507c <network_listen>

000b86a2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b86a2:	2300      	movs	r3, #0
   b86a4:	6840      	ldr	r0, [r0, #4]
   b86a6:	461a      	mov	r2, r3
   b86a8:	4619      	mov	r1, r3
   b86aa:	f7fc bcdf 	b.w	b506c <network_off>

000b86ae <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b86ae:	2300      	movs	r3, #0
   b86b0:	6840      	ldr	r0, [r0, #4]
   b86b2:	461a      	mov	r2, r3
   b86b4:	4619      	mov	r1, r3
   b86b6:	f7fc bcd1 	b.w	b505c <network_on>

000b86ba <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b86ba:	2200      	movs	r2, #0
   b86bc:	6840      	ldr	r0, [r0, #4]
   b86be:	4611      	mov	r1, r2
   b86c0:	f7fc bcb4 	b.w	b502c <network_connecting>

000b86c4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b86c4:	6840      	ldr	r0, [r0, #4]
   b86c6:	2200      	movs	r2, #0
   b86c8:	2102      	movs	r1, #2
   b86ca:	f7fc bcb7 	b.w	b503c <network_disconnect>

000b86ce <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b86ce:	2300      	movs	r3, #0
   b86d0:	6840      	ldr	r0, [r0, #4]
   b86d2:	461a      	mov	r2, r3
   b86d4:	f7fc bca2 	b.w	b501c <network_connect>

000b86d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b86d8:	4b02      	ldr	r3, [pc, #8]	; (b86e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b86da:	2204      	movs	r2, #4
   b86dc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b86de:	4a02      	ldr	r2, [pc, #8]	; (b86e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b86e0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b86e2:	4770      	bx	lr
   b86e4:	2003e730 	.word	0x2003e730
   b86e8:	000b9668 	.word	0x000b9668

000b86ec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b86ec:	2300      	movs	r3, #0
   b86ee:	6840      	ldr	r0, [r0, #4]
   b86f0:	461a      	mov	r2, r3
   b86f2:	f7fc bc93 	b.w	b501c <network_connect>

000b86f6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b86f6:	6840      	ldr	r0, [r0, #4]
   b86f8:	2200      	movs	r2, #0
   b86fa:	2102      	movs	r1, #2
   b86fc:	f7fc bc9e 	b.w	b503c <network_disconnect>

000b8700 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b8700:	2200      	movs	r2, #0
   b8702:	6840      	ldr	r0, [r0, #4]
   b8704:	4611      	mov	r1, r2
   b8706:	f7fc bc91 	b.w	b502c <network_connecting>

000b870a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b870a:	2200      	movs	r2, #0
   b870c:	6840      	ldr	r0, [r0, #4]
   b870e:	4611      	mov	r1, r2
   b8710:	f7fc bc9c 	b.w	b504c <network_ready>

000b8714 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b8714:	2300      	movs	r3, #0
   b8716:	6840      	ldr	r0, [r0, #4]
   b8718:	461a      	mov	r2, r3
   b871a:	4619      	mov	r1, r3
   b871c:	f7fc bc9e 	b.w	b505c <network_on>

000b8720 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b8720:	2300      	movs	r3, #0
   b8722:	6840      	ldr	r0, [r0, #4]
   b8724:	461a      	mov	r2, r3
   b8726:	4619      	mov	r1, r3
   b8728:	f7fc bca0 	b.w	b506c <network_off>

000b872c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b872c:	6840      	ldr	r0, [r0, #4]
   b872e:	2100      	movs	r1, #0
   b8730:	f7fc bcc4 	b.w	b50bc <network_is_on>

000b8734 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b8734:	6840      	ldr	r0, [r0, #4]
   b8736:	2100      	movs	r1, #0
   b8738:	f7fc bcc8 	b.w	b50cc <network_is_off>

000b873c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b873c:	6840      	ldr	r0, [r0, #4]
   b873e:	2200      	movs	r2, #0
   b8740:	f081 0101 	eor.w	r1, r1, #1
   b8744:	f7fc bc9a 	b.w	b507c <network_listen>

000b8748 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b8748:	6840      	ldr	r0, [r0, #4]
   b874a:	2200      	movs	r2, #0
   b874c:	f7fc bca6 	b.w	b509c <network_set_listen_timeout>

000b8750 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b8750:	2200      	movs	r2, #0
   b8752:	6840      	ldr	r0, [r0, #4]
   b8754:	4611      	mov	r1, r2
   b8756:	f7fc bca9 	b.w	b50ac <network_get_listen_timeout>

000b875a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b875a:	2200      	movs	r2, #0
   b875c:	6840      	ldr	r0, [r0, #4]
   b875e:	4611      	mov	r1, r2
   b8760:	f7fc bc94 	b.w	b508c <network_listening>

000b8764 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b8764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8768:	b095      	sub	sp, #84	; 0x54
   b876a:	4614      	mov	r4, r2
   b876c:	460d      	mov	r5, r1
   b876e:	4607      	mov	r7, r0
    IPAddress addr;
   b8770:	f7ff fb7a 	bl	b7e68 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b8774:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b8776:	221c      	movs	r2, #28
   b8778:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b877a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b877c:	f000 fbe0 	bl	b8f40 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b8780:	2340      	movs	r3, #64	; 0x40
   b8782:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b8784:	4620      	mov	r0, r4
   b8786:	466b      	mov	r3, sp
   b8788:	aa0c      	add	r2, sp, #48	; 0x30
   b878a:	2100      	movs	r1, #0
   b878c:	f7fc fa8c 	bl	b4ca8 <netdb_getaddrinfo>
    if (!r) {
   b8790:	4604      	mov	r4, r0
   b8792:	2800      	cmp	r0, #0
   b8794:	d14b      	bne.n	b882e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8796:	4602      	mov	r2, r0
   b8798:	2101      	movs	r1, #1
   b879a:	6868      	ldr	r0, [r5, #4]
   b879c:	f7fc fc56 	bl	b504c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b87a0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b87a2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b87a4:	4622      	mov	r2, r4
   b87a6:	6868      	ldr	r0, [r5, #4]
   b87a8:	f7fc fc50 	bl	b504c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b87ac:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b87ae:	4681      	mov	r9, r0
        bool ok = false;
   b87b0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b87b2:	2e00      	cmp	r6, #0
   b87b4:	d03b      	beq.n	b882e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b87b6:	2900      	cmp	r1, #0
   b87b8:	d139      	bne.n	b882e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b87ba:	6873      	ldr	r3, [r6, #4]
   b87bc:	2b02      	cmp	r3, #2
   b87be:	d003      	beq.n	b87c8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b87c0:	2b0a      	cmp	r3, #10
   b87c2:	d011      	beq.n	b87e8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b87c4:	69f6      	ldr	r6, [r6, #28]
   b87c6:	e7f4      	b.n	b87b2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b87c8:	f1b8 0f00 	cmp.w	r8, #0
   b87cc:	d0fa      	beq.n	b87c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b87ce:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b87d0:	a806      	add	r0, sp, #24
   b87d2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b87d4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b87d6:	f7ff fb8b 	bl	b7ef0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b87da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b87dc:	1d3c      	adds	r4, r7, #4
   b87de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b87e0:	682b      	ldr	r3, [r5, #0]
   b87e2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b87e4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b87e6:	e7ed      	b.n	b87c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b87e8:	f1b9 0f00 	cmp.w	r9, #0
   b87ec:	d0ea      	beq.n	b87c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b87ee:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b87f0:	2210      	movs	r2, #16
   b87f2:	a801      	add	r0, sp, #4
   b87f4:	f000 fba4 	bl	b8f40 <memset>
                    a.v = 6;
   b87f8:	2306      	movs	r3, #6
   b87fa:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b87fe:	ad01      	add	r5, sp, #4
   b8800:	f104 0308 	add.w	r3, r4, #8
   b8804:	3418      	adds	r4, #24
   b8806:	6818      	ldr	r0, [r3, #0]
   b8808:	6859      	ldr	r1, [r3, #4]
   b880a:	462a      	mov	r2, r5
   b880c:	c203      	stmia	r2!, {r0, r1}
   b880e:	3308      	adds	r3, #8
   b8810:	42a3      	cmp	r3, r4
   b8812:	4615      	mov	r5, r2
   b8814:	d1f7      	bne.n	b8806 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b8816:	a901      	add	r1, sp, #4
   b8818:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b881a:	ad07      	add	r5, sp, #28
   b881c:	f7ff fb32 	bl	b7e84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8822:	1d3c      	adds	r4, r7, #4
   b8824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8826:	682b      	ldr	r3, [r5, #0]
   b8828:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b882a:	4649      	mov	r1, r9
   b882c:	e7ca      	b.n	b87c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b882e:	9800      	ldr	r0, [sp, #0]
   b8830:	f7fc fa32 	bl	b4c98 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b8834:	4638      	mov	r0, r7
   b8836:	b015      	add	sp, #84	; 0x54
   b8838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b883c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b883c:	4b02      	ldr	r3, [pc, #8]	; (b8848 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b883e:	4a03      	ldr	r2, [pc, #12]	; (b884c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b8840:	601a      	str	r2, [r3, #0]
   b8842:	2200      	movs	r2, #0
   b8844:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b8846:	4770      	bx	lr
   b8848:	2003e738 	.word	0x2003e738
   b884c:	000b96a4 	.word	0x000b96a4

000b8850 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b8850:	f100 0310 	add.w	r3, r0, #16
   b8854:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b8856:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b885a:	2901      	cmp	r1, #1
   b885c:	4618      	mov	r0, r3
   b885e:	d108      	bne.n	b8872 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b8860:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b8864:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b8868:	3a01      	subs	r2, #1
   b886a:	f103 0310 	add.w	r3, r3, #16
   b886e:	d1f2      	bne.n	b8856 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b8870:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b8872:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b8874:	bf04      	itt	eq
   b8876:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b887a:	1852      	addeq	r2, r2, r1
   b887c:	e7f4      	b.n	b8868 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b887e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b887e:	b40e      	push	{r1, r2, r3}
   b8880:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8882:	b088      	sub	sp, #32
   b8884:	af00      	add	r7, sp, #0
   b8886:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b888a:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b888c:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8890:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b8892:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8894:	462b      	mov	r3, r5
   b8896:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b8898:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b889a:	f7fc fc47 	bl	b512c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b889e:	280f      	cmp	r0, #15
   b88a0:	687a      	ldr	r2, [r7, #4]
   b88a2:	d91a      	bls.n	b88da <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b88a4:	f100 0308 	add.w	r3, r0, #8
   b88a8:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b88ac:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b88ae:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b88b2:	1c41      	adds	r1, r0, #1
   b88b4:	462b      	mov	r3, r5
   b88b6:	4668      	mov	r0, sp
        va_start(args, fmt);
   b88b8:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b88ba:	f7fc fc37 	bl	b512c <vsnprintf>
        if (n > 0) {
   b88be:	1e02      	subs	r2, r0, #0
   b88c0:	dd04      	ble.n	b88cc <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b88c2:	6823      	ldr	r3, [r4, #0]
   b88c4:	4669      	mov	r1, sp
   b88c6:	689b      	ldr	r3, [r3, #8]
   b88c8:	4620      	mov	r0, r4
   b88ca:	4798      	blx	r3
   b88cc:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b88ce:	3720      	adds	r7, #32
   b88d0:	46bd      	mov	sp, r7
   b88d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b88d6:	b003      	add	sp, #12
   b88d8:	4770      	bx	lr
    } else if (n > 0) {
   b88da:	2800      	cmp	r0, #0
   b88dc:	d0f7      	beq.n	b88ce <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b88de:	6823      	ldr	r3, [r4, #0]
   b88e0:	4602      	mov	r2, r0
   b88e2:	689b      	ldr	r3, [r3, #8]
   b88e4:	f107 0110 	add.w	r1, r7, #16
   b88e8:	4620      	mov	r0, r4
   b88ea:	4798      	blx	r3
}
   b88ec:	e7ef      	b.n	b88ce <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b88ee <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b88ee:	b538      	push	{r3, r4, r5, lr}
   b88f0:	680b      	ldr	r3, [r1, #0]
   b88f2:	6003      	str	r3, [r0, #0]
   b88f4:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b88f6:	6843      	ldr	r3, [r0, #4]
   b88f8:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b88fa:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b88fc:	d008      	beq.n	b8910 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b88fe:	b115      	cbz	r5, b8906 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b8900:	686b      	ldr	r3, [r5, #4]
   b8902:	3301      	adds	r3, #1
   b8904:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b8906:	6860      	ldr	r0, [r4, #4]
   b8908:	b108      	cbz	r0, b890e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b890a:	f7fc fe55 	bl	b55b8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b890e:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b8910:	bd38      	pop	{r3, r4, r5, pc}

000b8912 <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   b8912:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b8914:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b8916:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b891a:	689b      	ldr	r3, [r3, #8]
   b891c:	2201      	movs	r2, #1
   b891e:	f10d 0107 	add.w	r1, sp, #7
   b8922:	4798      	blx	r3
}
   b8924:	b003      	add	sp, #12
   b8926:	f85d fb04 	ldr.w	pc, [sp], #4

000b892a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b892a:	460b      	mov	r3, r1
   b892c:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b892e:	2200      	movs	r2, #0
   b8930:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b8932:	e9c0 2200 	strd	r2, r2, [r0]
   b8936:	4604      	mov	r4, r0
        t_ = t;
   b8938:	6083      	str	r3, [r0, #8]
    if (t) {
   b893a:	b90b      	cbnz	r3, b8940 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b893c:	4620      	mov	r0, r4
   b893e:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b8940:	f7ff ffd5 	bl	b88ee <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b8944:	e7fa      	b.n	b893c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b8946 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b8946:	6883      	ldr	r3, [r0, #8]
   b8948:	b1eb      	cbz	r3, b8986 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b894a:	781a      	ldrb	r2, [r3, #0]
   b894c:	2a03      	cmp	r2, #3
   b894e:	d81a      	bhi.n	b8986 <_ZNK5spark9JSONValue4typeEv+0x40>
   b8950:	e8df f002 	tbb	[pc, r2]
   b8954:	1b021704 	.word	0x1b021704
   b8958:	2005      	movs	r0, #5
   b895a:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b895c:	6802      	ldr	r2, [r0, #0]
   b895e:	685b      	ldr	r3, [r3, #4]
   b8960:	6852      	ldr	r2, [r2, #4]
   b8962:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b8964:	282d      	cmp	r0, #45	; 0x2d
   b8966:	d012      	beq.n	b898e <_ZNK5spark9JSONValue4typeEv+0x48>
   b8968:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b896c:	2b09      	cmp	r3, #9
   b896e:	d90e      	bls.n	b898e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b8970:	2874      	cmp	r0, #116	; 0x74
   b8972:	d00e      	beq.n	b8992 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b8974:	2866      	cmp	r0, #102	; 0x66
   b8976:	d00c      	beq.n	b8992 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b8978:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b897c:	4258      	negs	r0, r3
   b897e:	4158      	adcs	r0, r3
   b8980:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b8982:	2006      	movs	r0, #6
   b8984:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b8986:	2000      	movs	r0, #0
   b8988:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b898a:	2004      	movs	r0, #4
   b898c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b898e:	2003      	movs	r0, #3
   b8990:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b8992:	2002      	movs	r0, #2
}
   b8994:	4770      	bx	lr

000b8996 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b8996:	b510      	push	{r4, lr}
   b8998:	4604      	mov	r4, r0
    switch (type()) {
   b899a:	f7ff ffd4 	bl	b8946 <_ZNK5spark9JSONValue4typeEv>
   b899e:	2802      	cmp	r0, #2
   b89a0:	d00e      	beq.n	b89c0 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b89a2:	1ec3      	subs	r3, r0, #3
   b89a4:	b2db      	uxtb	r3, r3
   b89a6:	2b01      	cmp	r3, #1
   b89a8:	d814      	bhi.n	b89d4 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b89aa:	6822      	ldr	r2, [r4, #0]
   b89ac:	68a3      	ldr	r3, [r4, #8]
   b89ae:	6850      	ldr	r0, [r2, #4]
   b89b0:	685b      	ldr	r3, [r3, #4]
}
   b89b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b89b6:	220a      	movs	r2, #10
   b89b8:	2100      	movs	r1, #0
   b89ba:	4418      	add	r0, r3
   b89bc:	f000 bbcc 	b.w	b9158 <strtol>
        const char* const s = d_->json + t_->start;
   b89c0:	6822      	ldr	r2, [r4, #0]
   b89c2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b89c4:	6852      	ldr	r2, [r2, #4]
   b89c6:	685b      	ldr	r3, [r3, #4]
   b89c8:	5cd0      	ldrb	r0, [r2, r3]
   b89ca:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b89ce:	4258      	negs	r0, r3
   b89d0:	4158      	adcs	r0, r3
}
   b89d2:	bd10      	pop	{r4, pc}
    switch (type()) {
   b89d4:	2000      	movs	r0, #0
   b89d6:	e7fc      	b.n	b89d2 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b89d8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b89d8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b89da:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b89dc:	e9c0 3300 	strd	r3, r3, [r0]
   b89e0:	4604      	mov	r4, r0
        n_(0) {
   b89e2:	480e      	ldr	r0, [pc, #56]	; (b8a1c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b89e4:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b89e8:	b1a9      	cbz	r1, b8a16 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b89ea:	780b      	ldrb	r3, [r1, #0]
   b89ec:	2b03      	cmp	r3, #3
   b89ee:	d006      	beq.n	b89fe <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b89f0:	b98b      	cbnz	r3, b8a16 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b89f2:	6813      	ldr	r3, [r2, #0]
   b89f4:	6858      	ldr	r0, [r3, #4]
   b89f6:	684b      	ldr	r3, [r1, #4]
   b89f8:	5cc3      	ldrb	r3, [r0, r3]
   b89fa:	2b6e      	cmp	r3, #110	; 0x6e
   b89fc:	d007      	beq.n	b8a0e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b89fe:	6813      	ldr	r3, [r2, #0]
   b8a00:	684d      	ldr	r5, [r1, #4]
   b8a02:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b8a04:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b8a06:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b8a08:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b8a0a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b8a0c:	60e3      	str	r3, [r4, #12]
   b8a0e:	4611      	mov	r1, r2
   b8a10:	4620      	mov	r0, r4
   b8a12:	f7ff ff6c 	bl	b88ee <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b8a16:	4620      	mov	r0, r4
   b8a18:	bd38      	pop	{r3, r4, r5, pc}
   b8a1a:	bf00      	nop
   b8a1c:	000b94be 	.word	0x000b94be

000b8a20 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b8a20:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b8a22:	2500      	movs	r5, #0
   b8a24:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b8a26:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b8a2a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b8a2e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b8a32:	4604      	mov	r4, r0
   b8a34:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b8a36:	b14b      	cbz	r3, b8a4c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b8a38:	781a      	ldrb	r2, [r3, #0]
   b8a3a:	2a01      	cmp	r2, #1
   b8a3c:	d106      	bne.n	b8a4c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b8a3e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b8a42:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b8a44:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b8a46:	6143      	str	r3, [r0, #20]
   b8a48:	f7ff ff51 	bl	b88ee <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b8a4c:	4620      	mov	r0, r4
   b8a4e:	bd38      	pop	{r3, r4, r5, pc}

000b8a50 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b8a50:	b510      	push	{r4, lr}
    if (!n_) {
   b8a52:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b8a54:	4604      	mov	r4, r0
    if (!n_) {
   b8a56:	b163      	cbz	r3, b8a72 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b8a58:	6880      	ldr	r0, [r0, #8]
   b8a5a:	60e0      	str	r0, [r4, #12]
    --n_;
   b8a5c:	3b01      	subs	r3, #1
    ++t_;
   b8a5e:	3010      	adds	r0, #16
   b8a60:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b8a62:	6120      	str	r0, [r4, #16]
    --n_;
   b8a64:	6163      	str	r3, [r4, #20]
    if (n_) {
   b8a66:	b113      	cbz	r3, b8a6e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b8a68:	f7ff fef2 	bl	b8850 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b8a6c:	60a0      	str	r0, [r4, #8]
    return true;
   b8a6e:	2001      	movs	r0, #1
   b8a70:	e000      	b.n	b8a74 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b8a72:	4618      	mov	r0, r3
}
   b8a74:	bd10      	pop	{r4, pc}

000b8a76 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b8a76:	b510      	push	{r4, lr}
    write('}');
   b8a78:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b8a7a:	4604      	mov	r4, r0
    write('}');
   b8a7c:	f7ff ff49 	bl	b8912 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b8a80:	2301      	movs	r3, #1
   b8a82:	7123      	strb	r3, [r4, #4]
}
   b8a84:	4620      	mov	r0, r4
   b8a86:	bd10      	pop	{r4, pc}

000b8a88 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b8a88:	b508      	push	{r3, lr}
    switch (state_) {
   b8a8a:	7903      	ldrb	r3, [r0, #4]
   b8a8c:	2b01      	cmp	r3, #1
   b8a8e:	d002      	beq.n	b8a96 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b8a90:	2b02      	cmp	r3, #2
   b8a92:	d004      	beq.n	b8a9e <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b8a94:	bd08      	pop	{r3, pc}
        write(',');
   b8a96:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b8a98:	f7ff ff3b 	bl	b8912 <_ZN5spark10JSONWriter5writeEc>
}
   b8a9c:	e7fa      	b.n	b8a94 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b8a9e:	213a      	movs	r1, #58	; 0x3a
   b8aa0:	e7fa      	b.n	b8a98 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b8aa2 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b8aa2:	b510      	push	{r4, lr}
   b8aa4:	4604      	mov	r4, r0
    writeSeparator();
   b8aa6:	f7ff ffef 	bl	b8a88 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b8aaa:	4620      	mov	r0, r4
   b8aac:	217b      	movs	r1, #123	; 0x7b
   b8aae:	f7ff ff30 	bl	b8912 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b8ab2:	2300      	movs	r3, #0
   b8ab4:	7123      	strb	r3, [r4, #4]
}
   b8ab6:	4620      	mov	r0, r4
   b8ab8:	bd10      	pop	{r4, pc}
	...

000b8abc <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b8abc:	b513      	push	{r0, r1, r4, lr}
   b8abe:	4604      	mov	r4, r0
   b8ac0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b8ac2:	f7ff ffe1 	bl	b8a88 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b8ac6:	6823      	ldr	r3, [r4, #0]
   b8ac8:	9a01      	ldr	r2, [sp, #4]
   b8aca:	68db      	ldr	r3, [r3, #12]
   b8acc:	4903      	ldr	r1, [pc, #12]	; (b8adc <_ZN5spark10JSONWriter5valueEi+0x20>)
   b8ace:	4620      	mov	r0, r4
   b8ad0:	4798      	blx	r3
    state_ = NEXT;
   b8ad2:	2301      	movs	r3, #1
}
   b8ad4:	4620      	mov	r0, r4
    state_ = NEXT;
   b8ad6:	7123      	strb	r3, [r4, #4]
}
   b8ad8:	b002      	add	sp, #8
   b8ada:	bd10      	pop	{r4, pc}
   b8adc:	000b95f4 	.word	0x000b95f4

000b8ae0 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b8ae0:	b513      	push	{r0, r1, r4, lr}
   b8ae2:	4604      	mov	r4, r0
   b8ae4:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b8ae6:	f7ff ffcf 	bl	b8a88 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b8aea:	6823      	ldr	r3, [r4, #0]
   b8aec:	9a01      	ldr	r2, [sp, #4]
   b8aee:	68db      	ldr	r3, [r3, #12]
   b8af0:	4903      	ldr	r1, [pc, #12]	; (b8b00 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b8af2:	4620      	mov	r0, r4
   b8af4:	4798      	blx	r3
    state_ = NEXT;
   b8af6:	2301      	movs	r3, #1
}
   b8af8:	4620      	mov	r0, r4
    state_ = NEXT;
   b8afa:	7123      	strb	r3, [r4, #4]
}
   b8afc:	b002      	add	sp, #8
   b8afe:	bd10      	pop	{r4, pc}
   b8b00:	000b96d8 	.word	0x000b96d8

000b8b04 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b8b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8b08:	460d      	mov	r5, r1
    write('"');
   b8b0a:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b8b0c:	4690      	mov	r8, r2
   b8b0e:	4604      	mov	r4, r0
    write('"');
   b8b10:	f7ff feff 	bl	b8912 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b8b14:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b8bbc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b8b18:	44a8      	add	r8, r5
    const char *s = str;
   b8b1a:	462f      	mov	r7, r5
    while (s != end) {
   b8b1c:	4547      	cmp	r7, r8
   b8b1e:	46ba      	mov	sl, r7
   b8b20:	d03d      	beq.n	b8b9e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b8b22:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b8b26:	2e22      	cmp	r6, #34	; 0x22
   b8b28:	d006      	beq.n	b8b38 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b8b2a:	2e5c      	cmp	r6, #92	; 0x5c
   b8b2c:	d004      	beq.n	b8b38 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b8b2e:	4630      	mov	r0, r6
   b8b30:	f000 f9c6 	bl	b8ec0 <isprint>
   b8b34:	2800      	cmp	r0, #0
   b8b36:	d1f1      	bne.n	b8b1c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b8b38:	6823      	ldr	r3, [r4, #0]
   b8b3a:	ebaa 0205 	sub.w	r2, sl, r5
   b8b3e:	689b      	ldr	r3, [r3, #8]
   b8b40:	4629      	mov	r1, r5
   b8b42:	4620      	mov	r0, r4
   b8b44:	4798      	blx	r3
            write('\\');
   b8b46:	215c      	movs	r1, #92	; 0x5c
   b8b48:	4620      	mov	r0, r4
   b8b4a:	f7ff fee2 	bl	b8912 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b8b4e:	2e0d      	cmp	r6, #13
   b8b50:	d80a      	bhi.n	b8b68 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b8b52:	2e07      	cmp	r6, #7
   b8b54:	d91c      	bls.n	b8b90 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b8b56:	f1a6 0308 	sub.w	r3, r6, #8
   b8b5a:	2b05      	cmp	r3, #5
   b8b5c:	d818      	bhi.n	b8b90 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b8b5e:	e8df f003 	tbb	[pc, r3]
   b8b62:	0f0d      	.short	0x0f0d
   b8b64:	15131711 	.word	0x15131711
   b8b68:	2e22      	cmp	r6, #34	; 0x22
   b8b6a:	d001      	beq.n	b8b70 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b8b6c:	2e5c      	cmp	r6, #92	; 0x5c
   b8b6e:	d10f      	bne.n	b8b90 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b8b70:	4631      	mov	r1, r6
                write('b');
   b8b72:	4620      	mov	r0, r4
   b8b74:	f7ff fecd 	bl	b8912 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b8b78:	463d      	mov	r5, r7
    while (s != end) {
   b8b7a:	e7cf      	b.n	b8b1c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b8b7c:	2162      	movs	r1, #98	; 0x62
   b8b7e:	e7f8      	b.n	b8b72 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b8b80:	2174      	movs	r1, #116	; 0x74
   b8b82:	e7f6      	b.n	b8b72 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b8b84:	216e      	movs	r1, #110	; 0x6e
   b8b86:	e7f4      	b.n	b8b72 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b8b88:	2166      	movs	r1, #102	; 0x66
   b8b8a:	e7f2      	b.n	b8b72 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b8b8c:	2172      	movs	r1, #114	; 0x72
   b8b8e:	e7f0      	b.n	b8b72 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b8b90:	6823      	ldr	r3, [r4, #0]
   b8b92:	4632      	mov	r2, r6
   b8b94:	68db      	ldr	r3, [r3, #12]
   b8b96:	4649      	mov	r1, r9
   b8b98:	4620      	mov	r0, r4
   b8b9a:	4798      	blx	r3
                break;
   b8b9c:	e7ec      	b.n	b8b78 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b8b9e:	42bd      	cmp	r5, r7
   b8ba0:	d005      	beq.n	b8bae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b8ba2:	6823      	ldr	r3, [r4, #0]
   b8ba4:	1b7a      	subs	r2, r7, r5
   b8ba6:	689b      	ldr	r3, [r3, #8]
   b8ba8:	4629      	mov	r1, r5
   b8baa:	4620      	mov	r0, r4
   b8bac:	4798      	blx	r3
    }
    write('"');
   b8bae:	2122      	movs	r1, #34	; 0x22
   b8bb0:	4620      	mov	r0, r4
   b8bb2:	f7ff feae 	bl	b8912 <_ZN5spark10JSONWriter5writeEc>
}
   b8bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8bba:	bf00      	nop
   b8bbc:	000b96db 	.word	0x000b96db

000b8bc0 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b8bc0:	b513      	push	{r0, r1, r4, lr}
   b8bc2:	4604      	mov	r4, r0
   b8bc4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b8bc8:	f7ff ff5e 	bl	b8a88 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b8bcc:	4620      	mov	r0, r4
   b8bce:	e9dd 2100 	ldrd	r2, r1, [sp]
   b8bd2:	f7ff ff97 	bl	b8b04 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b8bd6:	2302      	movs	r3, #2
}
   b8bd8:	4620      	mov	r0, r4
    state_ = VALUE;
   b8bda:	7123      	strb	r3, [r4, #4]
}
   b8bdc:	b002      	add	sp, #8
   b8bde:	bd10      	pop	{r4, pc}

000b8be0 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b8be0:	b513      	push	{r0, r1, r4, lr}
   b8be2:	4604      	mov	r4, r0
   b8be4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b8be8:	f7ff ff4e 	bl	b8a88 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b8bec:	4620      	mov	r0, r4
   b8bee:	e9dd 2100 	ldrd	r2, r1, [sp]
   b8bf2:	f7ff ff87 	bl	b8b04 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b8bf6:	2301      	movs	r3, #1
}
   b8bf8:	4620      	mov	r0, r4
    state_ = NEXT;
   b8bfa:	7123      	strb	r3, [r4, #4]
}
   b8bfc:	b002      	add	sp, #8
   b8bfe:	bd10      	pop	{r4, pc}

000b8c00 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8c00:	4770      	bx	lr
	...

000b8c04 <_Z20acquireSerial1Bufferv>:
{
   b8c04:	b538      	push	{r3, r4, r5, lr}
   b8c06:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8c08:	2514      	movs	r5, #20
   b8c0a:	462a      	mov	r2, r5
   b8c0c:	2100      	movs	r1, #0
   b8c0e:	f000 f997 	bl	b8f40 <memset>
   b8c12:	8025      	strh	r5, [r4, #0]
   b8c14:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8c16:	4907      	ldr	r1, [pc, #28]	; (b8c34 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8c18:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8c1a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8c1c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8c1e:	f000 f831 	bl	b8c84 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8c22:	4904      	ldr	r1, [pc, #16]	; (b8c34 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8c24:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8c26:	4628      	mov	r0, r5
   b8c28:	f000 f82c 	bl	b8c84 <_ZnajRKSt9nothrow_t>
    };
   b8c2c:	60e0      	str	r0, [r4, #12]
}
   b8c2e:	4620      	mov	r0, r4
   b8c30:	bd38      	pop	{r3, r4, r5, pc}
   b8c32:	bf00      	nop
   b8c34:	000b96e1 	.word	0x000b96e1

000b8c38 <_Z22__fetch_global_Serial1v>:
{
   b8c38:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8c3a:	4d0e      	ldr	r5, [pc, #56]	; (b8c74 <_Z22__fetch_global_Serial1v+0x3c>)
   b8c3c:	7829      	ldrb	r1, [r5, #0]
   b8c3e:	f3bf 8f5b 	dmb	ish
   b8c42:	f011 0401 	ands.w	r4, r1, #1
{
   b8c46:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8c48:	d111      	bne.n	b8c6e <_Z22__fetch_global_Serial1v+0x36>
   b8c4a:	4628      	mov	r0, r5
   b8c4c:	f7fb fa48 	bl	b40e0 <__cxa_guard_acquire>
   b8c50:	b168      	cbz	r0, b8c6e <_Z22__fetch_global_Serial1v+0x36>
   b8c52:	a801      	add	r0, sp, #4
   b8c54:	f7ff ffd6 	bl	b8c04 <_Z20acquireSerial1Bufferv>
   b8c58:	aa01      	add	r2, sp, #4
   b8c5a:	4621      	mov	r1, r4
   b8c5c:	4806      	ldr	r0, [pc, #24]	; (b8c78 <_Z22__fetch_global_Serial1v+0x40>)
   b8c5e:	f7ff fa1d 	bl	b809c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8c62:	4628      	mov	r0, r5
   b8c64:	f7fb fa41 	bl	b40ea <__cxa_guard_release>
   b8c68:	4804      	ldr	r0, [pc, #16]	; (b8c7c <_Z22__fetch_global_Serial1v+0x44>)
   b8c6a:	f000 f923 	bl	b8eb4 <atexit>
    return serial1;
}
   b8c6e:	4802      	ldr	r0, [pc, #8]	; (b8c78 <_Z22__fetch_global_Serial1v+0x40>)
   b8c70:	b007      	add	sp, #28
   b8c72:	bd30      	pop	{r4, r5, pc}
   b8c74:	2003e740 	.word	0x2003e740
   b8c78:	2003e744 	.word	0x2003e744
   b8c7c:	000b8c01 	.word	0x000b8c01

000b8c80 <_ZnwjRKSt9nothrow_t>:
   b8c80:	f7fb ba19 	b.w	b40b6 <_Znwj>

000b8c84 <_ZnajRKSt9nothrow_t>:
   b8c84:	f7fb ba19 	b.w	b40ba <_Znaj>

000b8c88 <_ZSt25__throw_bad_function_callv>:
   b8c88:	b508      	push	{r3, lr}
   b8c8a:	f7fc fa57 	bl	b513c <abort>
	...

000b8c90 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b8c90:	4901      	ldr	r1, [pc, #4]	; (b8c98 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b8c92:	f000 b8f9 	b.w	b8e88 <_ZNKSt9type_infoeqERKS_>
   b8c96:	bf00      	nop
   b8c98:	000b96fc 	.word	0x000b96fc

000b8c9c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b8c9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8c9e:	2400      	movs	r4, #0
   b8ca0:	2310      	movs	r3, #16
   b8ca2:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b8ca6:	6803      	ldr	r3, [r0, #0]
   b8ca8:	4615      	mov	r5, r2
   b8caa:	699e      	ldr	r6, [r3, #24]
   b8cac:	6812      	ldr	r2, [r2, #0]
   b8cae:	466b      	mov	r3, sp
   b8cb0:	e9cd 4400 	strd	r4, r4, [sp]
   b8cb4:	47b0      	blx	r6
   b8cb6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b8cba:	f003 0306 	and.w	r3, r3, #6
   b8cbe:	2b06      	cmp	r3, #6
   b8cc0:	bf03      	ittte	eq
   b8cc2:	9b00      	ldreq	r3, [sp, #0]
   b8cc4:	602b      	streq	r3, [r5, #0]
   b8cc6:	2001      	moveq	r0, #1
   b8cc8:	4620      	movne	r0, r4
   b8cca:	b004      	add	sp, #16
   b8ccc:	bd70      	pop	{r4, r5, r6, pc}

000b8cce <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b8cce:	9800      	ldr	r0, [sp, #0]
   b8cd0:	4290      	cmp	r0, r2
   b8cd2:	bf14      	ite	ne
   b8cd4:	2001      	movne	r0, #1
   b8cd6:	2006      	moveq	r0, #6
   b8cd8:	4770      	bx	lr
	...

000b8cdc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b8cdc:	b510      	push	{r4, lr}
   b8cde:	4b03      	ldr	r3, [pc, #12]	; (b8cec <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b8ce0:	6003      	str	r3, [r0, #0]
   b8ce2:	4604      	mov	r4, r0
   b8ce4:	f000 f8cd 	bl	b8e82 <_ZNSt9type_infoD1Ev>
   b8ce8:	4620      	mov	r0, r4
   b8cea:	bd10      	pop	{r4, pc}
   b8cec:	000b973c 	.word	0x000b973c

000b8cf0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b8cf0:	b510      	push	{r4, lr}
   b8cf2:	4604      	mov	r4, r0
   b8cf4:	f7ff fff2 	bl	b8cdc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8cf8:	4620      	mov	r0, r4
   b8cfa:	2108      	movs	r1, #8
   b8cfc:	f7fb f9e1 	bl	b40c2 <_ZdlPvj>
   b8d00:	4620      	mov	r0, r4
   b8d02:	bd10      	pop	{r4, pc}

000b8d04 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b8d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8d08:	461f      	mov	r7, r3
   b8d0a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b8d0e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b8d12:	4598      	cmp	r8, r3
   b8d14:	4606      	mov	r6, r0
   b8d16:	4615      	mov	r5, r2
   b8d18:	d107      	bne.n	b8d2a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8d1a:	9907      	ldr	r1, [sp, #28]
   b8d1c:	f000 f8b4 	bl	b8e88 <_ZNKSt9type_infoeqERKS_>
   b8d20:	b118      	cbz	r0, b8d2a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8d22:	7165      	strb	r5, [r4, #5]
   b8d24:	2000      	movs	r0, #0
   b8d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8d2a:	4639      	mov	r1, r7
   b8d2c:	4630      	mov	r0, r6
   b8d2e:	f000 f8ab 	bl	b8e88 <_ZNKSt9type_infoeqERKS_>
   b8d32:	2800      	cmp	r0, #0
   b8d34:	d0f6      	beq.n	b8d24 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b8d36:	2301      	movs	r3, #1
   b8d38:	f8c4 8000 	str.w	r8, [r4]
   b8d3c:	7125      	strb	r5, [r4, #4]
   b8d3e:	71a3      	strb	r3, [r4, #6]
   b8d40:	e7f0      	b.n	b8d24 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b8d42 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b8d42:	b538      	push	{r3, r4, r5, lr}
   b8d44:	4615      	mov	r5, r2
   b8d46:	461c      	mov	r4, r3
   b8d48:	f000 f89e 	bl	b8e88 <_ZNKSt9type_infoeqERKS_>
   b8d4c:	b120      	cbz	r0, b8d58 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b8d4e:	2308      	movs	r3, #8
   b8d50:	60e3      	str	r3, [r4, #12]
   b8d52:	2306      	movs	r3, #6
   b8d54:	6025      	str	r5, [r4, #0]
   b8d56:	7123      	strb	r3, [r4, #4]
   b8d58:	bd38      	pop	{r3, r4, r5, pc}

000b8d5a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b8d5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8d5c:	4605      	mov	r5, r0
   b8d5e:	460c      	mov	r4, r1
   b8d60:	9201      	str	r2, [sp, #4]
   b8d62:	461e      	mov	r6, r3
   b8d64:	f000 f890 	bl	b8e88 <_ZNKSt9type_infoeqERKS_>
   b8d68:	b950      	cbnz	r0, b8d80 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8d6a:	2e03      	cmp	r6, #3
   b8d6c:	d808      	bhi.n	b8d80 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8d6e:	6823      	ldr	r3, [r4, #0]
   b8d70:	9a01      	ldr	r2, [sp, #4]
   b8d72:	695b      	ldr	r3, [r3, #20]
   b8d74:	4629      	mov	r1, r5
   b8d76:	4620      	mov	r0, r4
   b8d78:	b002      	add	sp, #8
   b8d7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8d7e:	4718      	bx	r3
   b8d80:	b002      	add	sp, #8
   b8d82:	bd70      	pop	{r4, r5, r6, pc}

000b8d84 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b8d84:	b510      	push	{r4, lr}
   b8d86:	4b03      	ldr	r3, [pc, #12]	; (b8d94 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b8d88:	6003      	str	r3, [r0, #0]
   b8d8a:	4604      	mov	r4, r0
   b8d8c:	f7ff ffa6 	bl	b8cdc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8d90:	4620      	mov	r0, r4
   b8d92:	bd10      	pop	{r4, pc}
   b8d94:	000b979c 	.word	0x000b979c

000b8d98 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b8d98:	b510      	push	{r4, lr}
   b8d9a:	4604      	mov	r4, r0
   b8d9c:	f7ff fff2 	bl	b8d84 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b8da0:	4620      	mov	r0, r4
   b8da2:	210c      	movs	r1, #12
   b8da4:	f7fb f98d 	bl	b40c2 <_ZdlPvj>
   b8da8:	4620      	mov	r0, r4
   b8daa:	bd10      	pop	{r4, pc}

000b8dac <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b8dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8dae:	9f08      	ldr	r7, [sp, #32]
   b8db0:	4297      	cmp	r7, r2
   b8db2:	4605      	mov	r5, r0
   b8db4:	460e      	mov	r6, r1
   b8db6:	4614      	mov	r4, r2
   b8db8:	d00a      	beq.n	b8dd0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b8dba:	68a8      	ldr	r0, [r5, #8]
   b8dbc:	6802      	ldr	r2, [r0, #0]
   b8dbe:	9708      	str	r7, [sp, #32]
   b8dc0:	6a15      	ldr	r5, [r2, #32]
   b8dc2:	4631      	mov	r1, r6
   b8dc4:	4622      	mov	r2, r4
   b8dc6:	46ac      	mov	ip, r5
   b8dc8:	b003      	add	sp, #12
   b8dca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b8dce:	4760      	bx	ip
   b8dd0:	4619      	mov	r1, r3
   b8dd2:	9301      	str	r3, [sp, #4]
   b8dd4:	f000 f858 	bl	b8e88 <_ZNKSt9type_infoeqERKS_>
   b8dd8:	9b01      	ldr	r3, [sp, #4]
   b8dda:	2800      	cmp	r0, #0
   b8ddc:	d0ed      	beq.n	b8dba <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b8dde:	2006      	movs	r0, #6
   b8de0:	b003      	add	sp, #12
   b8de2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8de4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b8de4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8de8:	460d      	mov	r5, r1
   b8dea:	4619      	mov	r1, r3
   b8dec:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b8df0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b8df4:	4681      	mov	r9, r0
   b8df6:	4617      	mov	r7, r2
   b8df8:	4698      	mov	r8, r3
   b8dfa:	f000 f845 	bl	b8e88 <_ZNKSt9type_infoeqERKS_>
   b8dfe:	b190      	cbz	r0, b8e26 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b8e00:	2d00      	cmp	r5, #0
   b8e02:	6034      	str	r4, [r6, #0]
   b8e04:	7137      	strb	r7, [r6, #4]
   b8e06:	db09      	blt.n	b8e1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b8e08:	1961      	adds	r1, r4, r5
   b8e0a:	458a      	cmp	sl, r1
   b8e0c:	bf0c      	ite	eq
   b8e0e:	2106      	moveq	r1, #6
   b8e10:	2101      	movne	r1, #1
   b8e12:	71b1      	strb	r1, [r6, #6]
   b8e14:	2000      	movs	r0, #0
   b8e16:	b001      	add	sp, #4
   b8e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8e1c:	3502      	adds	r5, #2
   b8e1e:	d1f9      	bne.n	b8e14 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8e20:	2301      	movs	r3, #1
   b8e22:	71b3      	strb	r3, [r6, #6]
   b8e24:	e7f6      	b.n	b8e14 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8e26:	4554      	cmp	r4, sl
   b8e28:	d106      	bne.n	b8e38 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8e2a:	4659      	mov	r1, fp
   b8e2c:	4648      	mov	r0, r9
   b8e2e:	f000 f82b 	bl	b8e88 <_ZNKSt9type_infoeqERKS_>
   b8e32:	b108      	cbz	r0, b8e38 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8e34:	7177      	strb	r7, [r6, #5]
   b8e36:	e7ed      	b.n	b8e14 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8e38:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b8e3c:	6803      	ldr	r3, [r0, #0]
   b8e3e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b8e42:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b8e46:	69dc      	ldr	r4, [r3, #28]
   b8e48:	463a      	mov	r2, r7
   b8e4a:	4643      	mov	r3, r8
   b8e4c:	4629      	mov	r1, r5
   b8e4e:	46a4      	mov	ip, r4
   b8e50:	b001      	add	sp, #4
   b8e52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8e56:	4760      	bx	ip

000b8e58 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b8e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8e5c:	4607      	mov	r7, r0
   b8e5e:	460c      	mov	r4, r1
   b8e60:	4615      	mov	r5, r2
   b8e62:	461e      	mov	r6, r3
   b8e64:	f7ff ff6d 	bl	b8d42 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8e68:	b948      	cbnz	r0, b8e7e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b8e6a:	68b8      	ldr	r0, [r7, #8]
   b8e6c:	6803      	ldr	r3, [r0, #0]
   b8e6e:	699f      	ldr	r7, [r3, #24]
   b8e70:	462a      	mov	r2, r5
   b8e72:	4633      	mov	r3, r6
   b8e74:	4621      	mov	r1, r4
   b8e76:	46bc      	mov	ip, r7
   b8e78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b8e7c:	4760      	bx	ip
   b8e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8e82 <_ZNSt9type_infoD1Ev>:
   b8e82:	4770      	bx	lr

000b8e84 <_ZNKSt9type_info14__is_pointer_pEv>:
   b8e84:	2000      	movs	r0, #0
   b8e86:	4770      	bx	lr

000b8e88 <_ZNKSt9type_infoeqERKS_>:
   b8e88:	4281      	cmp	r1, r0
   b8e8a:	b508      	push	{r3, lr}
   b8e8c:	d00e      	beq.n	b8eac <_ZNKSt9type_infoeqERKS_+0x24>
   b8e8e:	6840      	ldr	r0, [r0, #4]
   b8e90:	7803      	ldrb	r3, [r0, #0]
   b8e92:	2b2a      	cmp	r3, #42	; 0x2a
   b8e94:	d00c      	beq.n	b8eb0 <_ZNKSt9type_infoeqERKS_+0x28>
   b8e96:	6849      	ldr	r1, [r1, #4]
   b8e98:	780b      	ldrb	r3, [r1, #0]
   b8e9a:	2b2a      	cmp	r3, #42	; 0x2a
   b8e9c:	bf08      	it	eq
   b8e9e:	3101      	addeq	r1, #1
   b8ea0:	f7fb f8bc 	bl	b401c <strcmp>
   b8ea4:	fab0 f080 	clz	r0, r0
   b8ea8:	0940      	lsrs	r0, r0, #5
   b8eaa:	bd08      	pop	{r3, pc}
   b8eac:	2001      	movs	r0, #1
   b8eae:	e7fc      	b.n	b8eaa <_ZNKSt9type_infoeqERKS_+0x22>
   b8eb0:	2000      	movs	r0, #0
   b8eb2:	e7fa      	b.n	b8eaa <_ZNKSt9type_infoeqERKS_+0x22>

000b8eb4 <atexit>:
   b8eb4:	2300      	movs	r3, #0
   b8eb6:	4601      	mov	r1, r0
   b8eb8:	461a      	mov	r2, r3
   b8eba:	4618      	mov	r0, r3
   b8ebc:	f000 b956 	b.w	b916c <__register_exitproc>

000b8ec0 <isprint>:
   b8ec0:	4b02      	ldr	r3, [pc, #8]	; (b8ecc <isprint+0xc>)
   b8ec2:	4418      	add	r0, r3
   b8ec4:	7840      	ldrb	r0, [r0, #1]
   b8ec6:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b8eca:	4770      	bx	lr
   b8ecc:	000b9869 	.word	0x000b9869

000b8ed0 <memcmp>:
   b8ed0:	b510      	push	{r4, lr}
   b8ed2:	3901      	subs	r1, #1
   b8ed4:	4402      	add	r2, r0
   b8ed6:	4290      	cmp	r0, r2
   b8ed8:	d101      	bne.n	b8ede <memcmp+0xe>
   b8eda:	2000      	movs	r0, #0
   b8edc:	e005      	b.n	b8eea <memcmp+0x1a>
   b8ede:	7803      	ldrb	r3, [r0, #0]
   b8ee0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8ee4:	42a3      	cmp	r3, r4
   b8ee6:	d001      	beq.n	b8eec <memcmp+0x1c>
   b8ee8:	1b18      	subs	r0, r3, r4
   b8eea:	bd10      	pop	{r4, pc}
   b8eec:	3001      	adds	r0, #1
   b8eee:	e7f2      	b.n	b8ed6 <memcmp+0x6>

000b8ef0 <memcpy>:
   b8ef0:	440a      	add	r2, r1
   b8ef2:	4291      	cmp	r1, r2
   b8ef4:	f100 33ff 	add.w	r3, r0, #4294967295
   b8ef8:	d100      	bne.n	b8efc <memcpy+0xc>
   b8efa:	4770      	bx	lr
   b8efc:	b510      	push	{r4, lr}
   b8efe:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8f02:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8f06:	4291      	cmp	r1, r2
   b8f08:	d1f9      	bne.n	b8efe <memcpy+0xe>
   b8f0a:	bd10      	pop	{r4, pc}

000b8f0c <memmove>:
   b8f0c:	4288      	cmp	r0, r1
   b8f0e:	b510      	push	{r4, lr}
   b8f10:	eb01 0402 	add.w	r4, r1, r2
   b8f14:	d902      	bls.n	b8f1c <memmove+0x10>
   b8f16:	4284      	cmp	r4, r0
   b8f18:	4623      	mov	r3, r4
   b8f1a:	d807      	bhi.n	b8f2c <memmove+0x20>
   b8f1c:	1e43      	subs	r3, r0, #1
   b8f1e:	42a1      	cmp	r1, r4
   b8f20:	d008      	beq.n	b8f34 <memmove+0x28>
   b8f22:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8f26:	f803 2f01 	strb.w	r2, [r3, #1]!
   b8f2a:	e7f8      	b.n	b8f1e <memmove+0x12>
   b8f2c:	4402      	add	r2, r0
   b8f2e:	4601      	mov	r1, r0
   b8f30:	428a      	cmp	r2, r1
   b8f32:	d100      	bne.n	b8f36 <memmove+0x2a>
   b8f34:	bd10      	pop	{r4, pc}
   b8f36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b8f3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b8f3e:	e7f7      	b.n	b8f30 <memmove+0x24>

000b8f40 <memset>:
   b8f40:	4402      	add	r2, r0
   b8f42:	4603      	mov	r3, r0
   b8f44:	4293      	cmp	r3, r2
   b8f46:	d100      	bne.n	b8f4a <memset+0xa>
   b8f48:	4770      	bx	lr
   b8f4a:	f803 1b01 	strb.w	r1, [r3], #1
   b8f4e:	e7f9      	b.n	b8f44 <memset+0x4>

000b8f50 <srand>:
   b8f50:	b538      	push	{r3, r4, r5, lr}
   b8f52:	4b10      	ldr	r3, [pc, #64]	; (b8f94 <srand+0x44>)
   b8f54:	681d      	ldr	r5, [r3, #0]
   b8f56:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8f58:	4604      	mov	r4, r0
   b8f5a:	b9b3      	cbnz	r3, b8f8a <srand+0x3a>
   b8f5c:	2018      	movs	r0, #24
   b8f5e:	f7fc f8cd 	bl	b50fc <malloc>
   b8f62:	4602      	mov	r2, r0
   b8f64:	63a8      	str	r0, [r5, #56]	; 0x38
   b8f66:	b920      	cbnz	r0, b8f72 <srand+0x22>
   b8f68:	4b0b      	ldr	r3, [pc, #44]	; (b8f98 <srand+0x48>)
   b8f6a:	480c      	ldr	r0, [pc, #48]	; (b8f9c <srand+0x4c>)
   b8f6c:	2142      	movs	r1, #66	; 0x42
   b8f6e:	f7fc f8f5 	bl	b515c <__assert_func>
   b8f72:	490b      	ldr	r1, [pc, #44]	; (b8fa0 <srand+0x50>)
   b8f74:	4b0b      	ldr	r3, [pc, #44]	; (b8fa4 <srand+0x54>)
   b8f76:	e9c0 1300 	strd	r1, r3, [r0]
   b8f7a:	4b0b      	ldr	r3, [pc, #44]	; (b8fa8 <srand+0x58>)
   b8f7c:	6083      	str	r3, [r0, #8]
   b8f7e:	230b      	movs	r3, #11
   b8f80:	8183      	strh	r3, [r0, #12]
   b8f82:	2100      	movs	r1, #0
   b8f84:	2001      	movs	r0, #1
   b8f86:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8f8a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8f8c:	2200      	movs	r2, #0
   b8f8e:	611c      	str	r4, [r3, #16]
   b8f90:	615a      	str	r2, [r3, #20]
   b8f92:	bd38      	pop	{r3, r4, r5, pc}
   b8f94:	2003e584 	.word	0x2003e584
   b8f98:	000b97d5 	.word	0x000b97d5
   b8f9c:	000b97ec 	.word	0x000b97ec
   b8fa0:	abcd330e 	.word	0xabcd330e
   b8fa4:	e66d1234 	.word	0xe66d1234
   b8fa8:	0005deec 	.word	0x0005deec

000b8fac <strchr>:
   b8fac:	b2c9      	uxtb	r1, r1
   b8fae:	4603      	mov	r3, r0
   b8fb0:	f810 2b01 	ldrb.w	r2, [r0], #1
   b8fb4:	b11a      	cbz	r2, b8fbe <strchr+0x12>
   b8fb6:	428a      	cmp	r2, r1
   b8fb8:	d1f9      	bne.n	b8fae <strchr+0x2>
   b8fba:	4618      	mov	r0, r3
   b8fbc:	4770      	bx	lr
   b8fbe:	2900      	cmp	r1, #0
   b8fc0:	bf18      	it	ne
   b8fc2:	2300      	movne	r3, #0
   b8fc4:	e7f9      	b.n	b8fba <strchr+0xe>

000b8fc6 <strchrnul>:
   b8fc6:	b510      	push	{r4, lr}
   b8fc8:	4604      	mov	r4, r0
   b8fca:	f7ff ffef 	bl	b8fac <strchr>
   b8fce:	b918      	cbnz	r0, b8fd8 <strchrnul+0x12>
   b8fd0:	4620      	mov	r0, r4
   b8fd2:	f7fb f82d 	bl	b4030 <strlen>
   b8fd6:	4420      	add	r0, r4
   b8fd8:	bd10      	pop	{r4, pc}

000b8fda <strcpy>:
   b8fda:	4603      	mov	r3, r0
   b8fdc:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8fe0:	f803 2b01 	strb.w	r2, [r3], #1
   b8fe4:	2a00      	cmp	r2, #0
   b8fe6:	d1f9      	bne.n	b8fdc <strcpy+0x2>
   b8fe8:	4770      	bx	lr

000b8fea <strncmp>:
   b8fea:	b510      	push	{r4, lr}
   b8fec:	b17a      	cbz	r2, b900e <strncmp+0x24>
   b8fee:	4603      	mov	r3, r0
   b8ff0:	3901      	subs	r1, #1
   b8ff2:	1884      	adds	r4, r0, r2
   b8ff4:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8ff8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b8ffc:	4290      	cmp	r0, r2
   b8ffe:	d101      	bne.n	b9004 <strncmp+0x1a>
   b9000:	42a3      	cmp	r3, r4
   b9002:	d101      	bne.n	b9008 <strncmp+0x1e>
   b9004:	1a80      	subs	r0, r0, r2
   b9006:	bd10      	pop	{r4, pc}
   b9008:	2800      	cmp	r0, #0
   b900a:	d1f3      	bne.n	b8ff4 <strncmp+0xa>
   b900c:	e7fa      	b.n	b9004 <strncmp+0x1a>
   b900e:	4610      	mov	r0, r2
   b9010:	e7f9      	b.n	b9006 <strncmp+0x1c>

000b9012 <strnlen>:
   b9012:	b510      	push	{r4, lr}
   b9014:	4602      	mov	r2, r0
   b9016:	4401      	add	r1, r0
   b9018:	428a      	cmp	r2, r1
   b901a:	4613      	mov	r3, r2
   b901c:	d003      	beq.n	b9026 <strnlen+0x14>
   b901e:	781c      	ldrb	r4, [r3, #0]
   b9020:	3201      	adds	r2, #1
   b9022:	2c00      	cmp	r4, #0
   b9024:	d1f8      	bne.n	b9018 <strnlen+0x6>
   b9026:	1a18      	subs	r0, r3, r0
   b9028:	bd10      	pop	{r4, pc}

000b902a <strrchr>:
   b902a:	b538      	push	{r3, r4, r5, lr}
   b902c:	4603      	mov	r3, r0
   b902e:	460c      	mov	r4, r1
   b9030:	b969      	cbnz	r1, b904e <strrchr+0x24>
   b9032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9036:	f7ff bfb9 	b.w	b8fac <strchr>
   b903a:	1c43      	adds	r3, r0, #1
   b903c:	4605      	mov	r5, r0
   b903e:	4621      	mov	r1, r4
   b9040:	4618      	mov	r0, r3
   b9042:	f7ff ffb3 	bl	b8fac <strchr>
   b9046:	2800      	cmp	r0, #0
   b9048:	d1f7      	bne.n	b903a <strrchr+0x10>
   b904a:	4628      	mov	r0, r5
   b904c:	bd38      	pop	{r3, r4, r5, pc}
   b904e:	2500      	movs	r5, #0
   b9050:	e7f5      	b.n	b903e <strrchr+0x14>
	...

000b9054 <_strtol_l.constprop.0>:
   b9054:	2b01      	cmp	r3, #1
   b9056:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b905a:	d001      	beq.n	b9060 <_strtol_l.constprop.0+0xc>
   b905c:	2b24      	cmp	r3, #36	; 0x24
   b905e:	d906      	bls.n	b906e <_strtol_l.constprop.0+0x1a>
   b9060:	f7fc f874 	bl	b514c <__errno>
   b9064:	2316      	movs	r3, #22
   b9066:	6003      	str	r3, [r0, #0]
   b9068:	2000      	movs	r0, #0
   b906a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b906e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b9154 <_strtol_l.constprop.0+0x100>
   b9072:	460d      	mov	r5, r1
   b9074:	462e      	mov	r6, r5
   b9076:	f815 4b01 	ldrb.w	r4, [r5], #1
   b907a:	f814 700c 	ldrb.w	r7, [r4, ip]
   b907e:	f017 0708 	ands.w	r7, r7, #8
   b9082:	d1f7      	bne.n	b9074 <_strtol_l.constprop.0+0x20>
   b9084:	2c2d      	cmp	r4, #45	; 0x2d
   b9086:	d132      	bne.n	b90ee <_strtol_l.constprop.0+0x9a>
   b9088:	782c      	ldrb	r4, [r5, #0]
   b908a:	2701      	movs	r7, #1
   b908c:	1cb5      	adds	r5, r6, #2
   b908e:	2b00      	cmp	r3, #0
   b9090:	d05b      	beq.n	b914a <_strtol_l.constprop.0+0xf6>
   b9092:	2b10      	cmp	r3, #16
   b9094:	d109      	bne.n	b90aa <_strtol_l.constprop.0+0x56>
   b9096:	2c30      	cmp	r4, #48	; 0x30
   b9098:	d107      	bne.n	b90aa <_strtol_l.constprop.0+0x56>
   b909a:	782c      	ldrb	r4, [r5, #0]
   b909c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b90a0:	2c58      	cmp	r4, #88	; 0x58
   b90a2:	d14d      	bne.n	b9140 <_strtol_l.constprop.0+0xec>
   b90a4:	786c      	ldrb	r4, [r5, #1]
   b90a6:	2310      	movs	r3, #16
   b90a8:	3502      	adds	r5, #2
   b90aa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b90ae:	f108 38ff 	add.w	r8, r8, #4294967295
   b90b2:	f04f 0c00 	mov.w	ip, #0
   b90b6:	fbb8 f9f3 	udiv	r9, r8, r3
   b90ba:	4666      	mov	r6, ip
   b90bc:	fb03 8a19 	mls	sl, r3, r9, r8
   b90c0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b90c4:	f1be 0f09 	cmp.w	lr, #9
   b90c8:	d816      	bhi.n	b90f8 <_strtol_l.constprop.0+0xa4>
   b90ca:	4674      	mov	r4, lr
   b90cc:	42a3      	cmp	r3, r4
   b90ce:	dd24      	ble.n	b911a <_strtol_l.constprop.0+0xc6>
   b90d0:	f1bc 0f00 	cmp.w	ip, #0
   b90d4:	db1e      	blt.n	b9114 <_strtol_l.constprop.0+0xc0>
   b90d6:	45b1      	cmp	r9, r6
   b90d8:	d31c      	bcc.n	b9114 <_strtol_l.constprop.0+0xc0>
   b90da:	d101      	bne.n	b90e0 <_strtol_l.constprop.0+0x8c>
   b90dc:	45a2      	cmp	sl, r4
   b90de:	db19      	blt.n	b9114 <_strtol_l.constprop.0+0xc0>
   b90e0:	fb06 4603 	mla	r6, r6, r3, r4
   b90e4:	f04f 0c01 	mov.w	ip, #1
   b90e8:	f815 4b01 	ldrb.w	r4, [r5], #1
   b90ec:	e7e8      	b.n	b90c0 <_strtol_l.constprop.0+0x6c>
   b90ee:	2c2b      	cmp	r4, #43	; 0x2b
   b90f0:	bf04      	itt	eq
   b90f2:	782c      	ldrbeq	r4, [r5, #0]
   b90f4:	1cb5      	addeq	r5, r6, #2
   b90f6:	e7ca      	b.n	b908e <_strtol_l.constprop.0+0x3a>
   b90f8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b90fc:	f1be 0f19 	cmp.w	lr, #25
   b9100:	d801      	bhi.n	b9106 <_strtol_l.constprop.0+0xb2>
   b9102:	3c37      	subs	r4, #55	; 0x37
   b9104:	e7e2      	b.n	b90cc <_strtol_l.constprop.0+0x78>
   b9106:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b910a:	f1be 0f19 	cmp.w	lr, #25
   b910e:	d804      	bhi.n	b911a <_strtol_l.constprop.0+0xc6>
   b9110:	3c57      	subs	r4, #87	; 0x57
   b9112:	e7db      	b.n	b90cc <_strtol_l.constprop.0+0x78>
   b9114:	f04f 3cff 	mov.w	ip, #4294967295
   b9118:	e7e6      	b.n	b90e8 <_strtol_l.constprop.0+0x94>
   b911a:	f1bc 0f00 	cmp.w	ip, #0
   b911e:	da05      	bge.n	b912c <_strtol_l.constprop.0+0xd8>
   b9120:	2322      	movs	r3, #34	; 0x22
   b9122:	6003      	str	r3, [r0, #0]
   b9124:	4646      	mov	r6, r8
   b9126:	b942      	cbnz	r2, b913a <_strtol_l.constprop.0+0xe6>
   b9128:	4630      	mov	r0, r6
   b912a:	e79e      	b.n	b906a <_strtol_l.constprop.0+0x16>
   b912c:	b107      	cbz	r7, b9130 <_strtol_l.constprop.0+0xdc>
   b912e:	4276      	negs	r6, r6
   b9130:	2a00      	cmp	r2, #0
   b9132:	d0f9      	beq.n	b9128 <_strtol_l.constprop.0+0xd4>
   b9134:	f1bc 0f00 	cmp.w	ip, #0
   b9138:	d000      	beq.n	b913c <_strtol_l.constprop.0+0xe8>
   b913a:	1e69      	subs	r1, r5, #1
   b913c:	6011      	str	r1, [r2, #0]
   b913e:	e7f3      	b.n	b9128 <_strtol_l.constprop.0+0xd4>
   b9140:	2430      	movs	r4, #48	; 0x30
   b9142:	2b00      	cmp	r3, #0
   b9144:	d1b1      	bne.n	b90aa <_strtol_l.constprop.0+0x56>
   b9146:	2308      	movs	r3, #8
   b9148:	e7af      	b.n	b90aa <_strtol_l.constprop.0+0x56>
   b914a:	2c30      	cmp	r4, #48	; 0x30
   b914c:	d0a5      	beq.n	b909a <_strtol_l.constprop.0+0x46>
   b914e:	230a      	movs	r3, #10
   b9150:	e7ab      	b.n	b90aa <_strtol_l.constprop.0+0x56>
   b9152:	bf00      	nop
   b9154:	000b986a 	.word	0x000b986a

000b9158 <strtol>:
   b9158:	4613      	mov	r3, r2
   b915a:	460a      	mov	r2, r1
   b915c:	4601      	mov	r1, r0
   b915e:	4802      	ldr	r0, [pc, #8]	; (b9168 <strtol+0x10>)
   b9160:	6800      	ldr	r0, [r0, #0]
   b9162:	f7ff bf77 	b.w	b9054 <_strtol_l.constprop.0>
   b9166:	bf00      	nop
   b9168:	2003e584 	.word	0x2003e584

000b916c <__register_exitproc>:
   b916c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9170:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b922c <__register_exitproc+0xc0>
   b9174:	4606      	mov	r6, r0
   b9176:	f8d8 0000 	ldr.w	r0, [r8]
   b917a:	461f      	mov	r7, r3
   b917c:	460d      	mov	r5, r1
   b917e:	4691      	mov	r9, r2
   b9180:	f000 f856 	bl	b9230 <__retarget_lock_acquire_recursive>
   b9184:	4b25      	ldr	r3, [pc, #148]	; (b921c <__register_exitproc+0xb0>)
   b9186:	681c      	ldr	r4, [r3, #0]
   b9188:	b934      	cbnz	r4, b9198 <__register_exitproc+0x2c>
   b918a:	4c25      	ldr	r4, [pc, #148]	; (b9220 <__register_exitproc+0xb4>)
   b918c:	601c      	str	r4, [r3, #0]
   b918e:	4b25      	ldr	r3, [pc, #148]	; (b9224 <__register_exitproc+0xb8>)
   b9190:	b113      	cbz	r3, b9198 <__register_exitproc+0x2c>
   b9192:	681b      	ldr	r3, [r3, #0]
   b9194:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9198:	6863      	ldr	r3, [r4, #4]
   b919a:	2b1f      	cmp	r3, #31
   b919c:	dd07      	ble.n	b91ae <__register_exitproc+0x42>
   b919e:	f8d8 0000 	ldr.w	r0, [r8]
   b91a2:	f000 f847 	bl	b9234 <__retarget_lock_release_recursive>
   b91a6:	f04f 30ff 	mov.w	r0, #4294967295
   b91aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b91ae:	b34e      	cbz	r6, b9204 <__register_exitproc+0x98>
   b91b0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b91b4:	b988      	cbnz	r0, b91da <__register_exitproc+0x6e>
   b91b6:	4b1c      	ldr	r3, [pc, #112]	; (b9228 <__register_exitproc+0xbc>)
   b91b8:	b923      	cbnz	r3, b91c4 <__register_exitproc+0x58>
   b91ba:	f8d8 0000 	ldr.w	r0, [r8]
   b91be:	f000 f838 	bl	b9232 <__retarget_lock_release>
   b91c2:	e7f0      	b.n	b91a6 <__register_exitproc+0x3a>
   b91c4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b91c8:	f7fb ff98 	bl	b50fc <malloc>
   b91cc:	2800      	cmp	r0, #0
   b91ce:	d0f4      	beq.n	b91ba <__register_exitproc+0x4e>
   b91d0:	2300      	movs	r3, #0
   b91d2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b91d6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b91da:	6863      	ldr	r3, [r4, #4]
   b91dc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b91e0:	2201      	movs	r2, #1
   b91e2:	409a      	lsls	r2, r3
   b91e4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b91e8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b91ec:	4313      	orrs	r3, r2
   b91ee:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b91f2:	2e02      	cmp	r6, #2
   b91f4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b91f8:	bf02      	ittt	eq
   b91fa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b91fe:	4313      	orreq	r3, r2
   b9200:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9204:	6863      	ldr	r3, [r4, #4]
   b9206:	f8d8 0000 	ldr.w	r0, [r8]
   b920a:	1c5a      	adds	r2, r3, #1
   b920c:	3302      	adds	r3, #2
   b920e:	6062      	str	r2, [r4, #4]
   b9210:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9214:	f000 f80e 	bl	b9234 <__retarget_lock_release_recursive>
   b9218:	2000      	movs	r0, #0
   b921a:	e7c6      	b.n	b91aa <__register_exitproc+0x3e>
   b921c:	2003e7e8 	.word	0x2003e7e8
   b9220:	2003e75c 	.word	0x2003e75c
   b9224:	00000000 	.word	0x00000000
   b9228:	000b50fd 	.word	0x000b50fd
   b922c:	2003e5e8 	.word	0x2003e5e8

000b9230 <__retarget_lock_acquire_recursive>:
   b9230:	4770      	bx	lr

000b9232 <__retarget_lock_release>:
   b9232:	4770      	bx	lr

000b9234 <__retarget_lock_release_recursive>:
   b9234:	4770      	bx	lr

000b9236 <link_code_end>:
	...

000b9238 <link_const_data_start>:
   b9238:	514d0400 	.word	0x514d0400
   b923c:	00045454 	.word	0x00045454
   b9240:	49514d06 	.word	0x49514d06
   b9244:	03706473 	.word	0x03706473
   b9248:	00000000 	.word	0x00000000
   b924c:	34fb0000 	.word	0x34fb0000
   b9250:	00805f9b 	.word	0x00805f9b
   b9254:	10008000 	.word	0x10008000
	...

000b9260 <dynalib_user>:
   b9260:	000b4041 000b407d 000b40a5 000b40a9     A@..}@...@...@..
   b9270:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   b9280:	72697620 6c617574 73737200 64253d69      virtual.rssi=%d
   b9290:	72657320 3d726576 58323025 3230253a      server=%02X:%02
   b92a0:	30253a58 253a5832 3a583230 58323025     X:%02X:%02X:%02X
   b92b0:	3230253a 41420058 72612f52 336e6f67     :%02X.BAR/argon3
   b92c0:	5353522f 616c0049 68742e62 6c637765     /RSSI.lab.thewcl
   b92d0:	6d6f632e 65666100 63636137 33332d35     .com.afe7acc5-33
   b92e0:	342d3961 2d663837 31656262 3439382d     a9-478f-bbe1-894
   b92f0:	30616134 38386538 00000034              4aa08e884...

000b92fc <_ZTVN5spark10LogHandlerE>:
	...
   b930c:	000b40c9 000b40f1                       .@...@..

000b9314 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b931c:	000b40f5 000b4129 000b7921 000b7ac5     .@..)A..!y...z..

000b932c <_ZTVN5spark13EthernetClassE>:
	...
   b9334:	000b51db 000b51d1 000b51c7 000b51bd     .Q...Q...Q...Q..
   b9344:	000b51b1 000b51a5 000b872d 000b8735     .Q...Q..-...5...
   b9354:	000b5199 000b5191 000b5187 000b517d     .Q...Q...Q..}Q..
   b9364:	000b8765 65737341 6f697472 6961466e     e...AssertionFai
   b9374:	6572756c 6c616620 77006573 6e697269     lure false.wirin
   b9384:	6c622e67 74530065 20747261 63736964     g.ble.Start disc
   b9394:	7265766f 20676e69 76726573 73656369     overing services
   b93a4:	7341002e 74726573 466e6f69 756c6961     ..AssertionFailu
   b93b4:	68206572 625f6c61 735f656c 6b636174     re hal_ble_stack
   b93c4:	696e695f 756e2874 74706c6c 3d202972     _init(nullptr) =
   b93d4:	5953203d 4d455453 5252455f 4e5f524f     = SYSTEM_ERROR_N
   b93e4:	00454e4f 6c696146 74206465 6c61206f     ONE.Failed to al
   b93f4:	61636f6c 6d206574 726f6d65 46002179     locate memory!.F
   b9404:	656c6961 6f742064 70706120 20646e65     ailed to append 
   b9414:	72656570 6e654320 6c617274 76656420     peer Central dev
   b9424:	2e656369 6e6f4300 7463656e 44006465     ice..Connected.D
   b9434:	6f637369 63656e6e 00646574              isconnected.

000b9440 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9448:	000b54dd 000b5501 000b5c1d 000b550f     .T...U...\...U..
   b9458:	000b54e1                                .T..

000b945c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b9464:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   b9474:	00316c61 4e4f534a 65727453 6f4c6d61     al1.JSONStreamLo
   b9484:	6e614867 72656c64 70706100 31302500     gHandler.app.%01
   b9494:	00207530 2c00205d 29280020 2000203a     0u .] ., .(): . 
   b94a4:	6f63005b 3d206564 69250020 74656400     [.code = .%i.det
   b94b4:	736c6961 00203d20 66000a0d 006e6c00     ails = ....f.ln.
   b94c4:	74006e66 646f6300 65640065 6c696174     fn.t.code.detail
   b94d4:	00000000                                ....

000b94d8 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b94e0:	000b6d1b 000b6d41 000b6cff 000b887f     .m..Am...l......

000b94f0 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b94f8:	000b71c9 000b71e1 000b7921 000b7ac5     .q...q..!y...z..

000b9508 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b9510:	000b71f5 000b7209 000b7afd 000b6d07     .q...r...z...m..

000b9520 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b9528:	000b6d19 000b6d4f 000b7885 000b6d09     .m..Om...x...m..

000b9538 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b9540:	000b6d17 000b6d5d 000b7131 000b6d7f     .m..]m..1q...m..
   b9550:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   b9560:	007a2553 74637361 00656d69              S%z.asctime.

000b956c <_ZTV9IPAddress>:
	...
   b9574:	000b7e05 000b7df5 000b7df7              .~...}...}..

000b9580 <_ZTV9USBSerial>:
	...
   b9588:	000b7f17 000b7f7f 000b7f55 000b6c6d     ........U...ml..
   b9598:	000b7f47 000b7f19 000b7f29 000b7f79     G.......)...y...
   b95a8:	000b7f39 000b7f11                       9.......

000b95b0 <_ZTV11USARTSerial>:
	...
   b95b8:	000b8021 000b808d 000b8065 000b6c6d     !.......e...ml..
   b95c8:	000b8035 000b8051 000b8043 000b805f     5...Q...C..._...
   b95d8:	000b8023 000b8027 69726977 7200676e     #...'...wiring.r
   b95e8:	20766365 6f727265 203d2072 00006425     ecv error = %d..

000b95f8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9600:	000b815d 000b8181 000b866b 000b818f     ].......k.......
   b9610:	000b8161                                a...

000b9614 <_ZTV9TCPClient>:
	...
   b961c:	000b7c85 000b7c9d 000b80d9 000b80f3     .|...|..........
   b962c:	000b8501 000b811d 000b8377 000b8151     ........w...Q...
   b963c:	000b8409 000b8249 000b83a5 000b85b5     ....I...........
   b964c:	000b8345 000b8153 000b8105 000b8195     E...S...........
   b965c:	000b8229                                )...

000b9660 <_ZTVN5spark9WiFiClassE>:
	...
   b9668:	000b86cf 000b86c5 000b86bb 000b8671     ............q...
   b9678:	000b86af 000b86a3 000b872d 000b8735     ........-...5...
   b9688:	000b8697 000b868f 000b8685 000b867b     ............{...
   b9698:	000b8765                                e...

000b969c <_ZTVN5spark12NetworkClassE>:
	...
   b96a4:	000b86ed 000b86f7 000b8701 000b870b     ................
   b96b4:	000b8715 000b8721 000b872d 000b8735     ....!...-...5...
   b96c4:	000b873d 000b8749 000b8751 000b875b     =...I...Q...[...
   b96d4:	000b8765 75007525 78343025               e...%u.u%04x.

000b96e1 <_ZSt7nothrow>:
	...

000b96e2 <_ZTSSt19_Sp_make_shared_tag>:
   b96e2:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   b96f2:	5f646572 00676174                        red_tag...

000b96fc <_ZTISt19_Sp_make_shared_tag>:
   b96fc:	000b973c 000b96e2                       <.......

000b9704 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b9704:	000b979c 000b9710 000b97c0              ............

000b9710 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b9710:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   b9720:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   b9730:	00000045                                E...

000b9734 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b9734:	00000000 000b9704 000b8cdd 000b8cf1     ................
   b9744:	000b8e85 000b8e85 000b8d5b 000b8c9d     ........[.......
   b9754:	000b8d43 000b8d05 000b8ccf              C...........

000b9760 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b9760:	000b979c 000b976c 000b9704              ....l.......

000b976c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b976c:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   b977c:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   b978c:	456f666e 00000000                       nfoE....

000b9794 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b9794:	00000000 000b9760 000b8d85 000b8d99     ....`...........
   b97a4:	000b8e85 000b8e85 000b8d5b 000b8c9d     ........[.......
   b97b4:	000b8e59 000b8de5 000b8dad              Y...........

000b97c0 <_ZTISt9type_info>:
   b97c0:	000b973c 000b97c8                       <.......

000b97c8 <_ZTSSt9type_info>:
   b97c8:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   b97d8:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   b97e8:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
   b97f8:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   b9808:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   b9818:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   b9828:	656e696c 5f38342d 30323032 34323131     line-48_20201124
   b9838:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
   b9848:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
   b9858:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
	...

000b9869 <_ctype_>:
   b9869:	20202000 20202020 28282020 20282828     .         ((((( 
   b9879:	20202020 20202020 20202020 20202020                     
   b9889:	10108820 10101010 10101010 10101010      ...............
   b9899:	04040410 04040404 10040404 10101010     ................
   b98a9:	41411010 41414141 01010101 01010101     ..AAAAAA........
   b98b9:	01010101 01010101 01010101 10101010     ................
   b98c9:	42421010 42424242 02020202 02020202     ..BBBBBB........
   b98d9:	02020202 02020202 02020202 10101010     ................
   b98e9:	00000020 00000000 00000000 00000000      ...............
	...

000b996a <link_const_data_end>:
	...

000b996c <link_constructors_location>:
   b996c:	000b439d 	.word	0x000b439d
   b9970:	000b51e5 	.word	0x000b51e5
   b9974:	000b51f9 	.word	0x000b51f9
   b9978:	000b6c5d 	.word	0x000b6c5d
   b997c:	000b7911 	.word	0x000b7911
   b9980:	000b7c71 	.word	0x000b7c71
   b9984:	000b7cb1 	.word	0x000b7cb1
   b9988:	000b86d9 	.word	0x000b86d9
   b998c:	000b883d 	.word	0x000b883d
